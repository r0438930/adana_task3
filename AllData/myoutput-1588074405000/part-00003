{"title_page": "Bash (Unix shell)", "text_new": "{{short description|GNU replacement for the Bourne shell}}\n{{Use mdy dates|date=March 2014}}\n{{Infobox software\n| name = Bash\n| logo = Gnu-bash-logo.svg\n| screenshot = Bash screenshot.png\n| caption = Screenshot of a Bash session\n| author = [[Brian Fox (computer programmer)|Brian Fox]]\n| released = {{start date and age|1989|06|08}}\n| programming language = [[C (programming language)|C]]\n| operating system = {{Plainlist|\n* [[Unix-like]],<ref>{{cite web|url=ftp://ftp.cwru.edu/pub/bash/FAQ|archive-url=https://web.archive.org/web/20180901171316/ftp://ftp.cwru.edu/pub/bash/FAQ|archive-date=September 1, 2018|url-status=dead|title=Bash FAQ, version 4.14|access-date=April 9, 2016|df=mdy-all}}</ref>\n* [[macOS]] (only latest [[GNU GPL#Version 2|GPLv2]] release; GPLv3 releases available through third parties\n* [[Windows]] (newer [[GNU GPL#Version 3|GPLv3+]] version)<ref>{{cite web|url=https://github.com/Microsoft/BashOnWindows/issues/107|title=Missing source code - GPL compliance? \u00b7 Issue #107 \u00b7 Microsoft/WSL|website=GitHub}}</ref><ref>{{cite web|title=GNU Bash|url=http://www.softpedia.com/get/System/System-Miscellaneous/GNU-Bash.shtml|website=[[Softpedia]]|publisher=SoftNews|accessdate=9 April 2016}}</ref>\n }}\n| platform = [[GNU]]\n| language = Multilingual ([[gettext]])\n| genre = [[Unix shell]], [[command language]]\n| license = [[GNU GPL#Version 3|GPLv3+]]<ref name=\"license\">{{cite web | author = GNU Project | authorlink = GNU Project | title = README file | url = https://www.gnu.org/software/bash/ | quote = Bash is free software, distributed under the terms of the [GNU] General Public License as published by the Free Software Foundation, version 3 of the License (or any later version).}}</ref>\n| website = {{URL|https://www.gnu.org/software/bash/}}\n}}\n\n'''GNU Bash''' or simply '''Bash''' is a [[Unix shell]] and [[command language]] written by [[Brian Fox (computer programmer)|Brian Fox]] for the [[GNU Project]] as a [[free software]] replacement for the [[Bourne shell]].<ref name=\"GNUBSD\">\n{{Cite newsgroup\n  | title = GNU + BSD = ?\n  | author = [[Richard Stallman]] (forwarded with comments by Chet Ramey)\n  | date = February 10, 1988\n  | newsgroup = comp.unix.questions\n  |message-id=2362@mandrill.CWRU.Edu\n  | url=https://groups.google.com/forum/#!original/comp.unix.questions/iNjWwkyroR8/yedr9yDWSuQJ\n  | accessdate = March 22, 2011\n  | quote = For a year and a half, the GNU shell was \"just about done\". The author made repeated promises to deliver what he had done, and never kept them. Finally I could no longer believe he would ever deliver anything. So Foundation staff member Brian Fox is now implementing an imitation of the Bourne shell.\n}}\n</ref><ref>\n{{Citation\n  | last = Hamilton\n  | first = Naomi\n  | title = The A-Z of Programming Languages: BASH/Bourne-Again Shell\n  | journal = Computerworld\n  | page = 2\n  | date = May 30, 2008\n  | accessdate = March 21, 2011\n  | url = http://www.computerworld.com.au/article/222764/a-z_programming_languages_bash_bourne-again_shell/?pp=2&fp=16&fpid=1\n  | quote = When Richard Stallman decided to create a full replacement for the then-encumbered Unix systems, he knew that he would eventually have to have replacements for all of the common utilities, especially the standard shell, and those replacements would have to have acceptable licensing.\n}}\n</ref> First released in 1989,<ref name=BashBeta>\n{{Cite newsgroup\n  | title = Bash is in beta release!\n  | author = Brian Fox (forwarded by Leonard H. Tower Jr.)\n  | date = June 8, 1989\n  | newsgroup = gnu.announce\n  | url = https://groups.google.com/group/gnu.announce/msg/a509f48ffb298c35?hl=en\n  | accessdate = October 28, 2010 \n}}\n</ref> it has been used widely as the default [[login]] shell for most [[Linux]] distributions and [[Apple Inc.|Apple's]] [[macOS Mojave]] and earlier versions. A version [[Windows Subsystem for Linux|is also available for Windows 10]].<ref>{{cite web|url=http://www.windowscentral.com/how-install-bash-shell-command-line-windows-10|title=How to install Bash shell command-line tool on Windows 10|date=September 28, 2016|publisher=}}</ref> It is also the default user shell in [[Solaris_(operating_system)|Solaris]] 11.<ref>{{cite web|url=https://docs.oracle.com/cd/E23824_01/html/E24456/userenv-1.html|title=User Environment Feature Changes|date=|publisher=Oracle}}</ref>\n\nBash is a [[Command-line interpreter|command processor]] that typically runs in a [[terminal emulator|text window]] where the user types commands that cause actions. Bash can also read and execute commands from a file, called a [[shell script]]. Like all Unix shells, it supports filename [[glob (programming)|globbing]] (wildcard matching), [[Pipeline (Unix)|piping]], [[here document]]s, [[command substitution]], [[Variable (programming)|variables]], and [[control flow|control structures]] for [[Conditional (programming)|condition-testing]] and [[iteration]]. The [[Keyword (computer programming)|keywords]], [[Syntax (programming languages)|syntax]], [[Scope_(computer_science)#Dynamic_scoping|dynamically scoped]] variables and other basic features of the [[Language (computer science)|language]] are all copied from [[Bourne shell|sh]]. Other features, e.g., [[C shell#History|history]], are copied from [[C shell|csh]] and [[Korn shell|ksh]]. Bash is a [[POSIX]]-compliant shell, but with a number of extensions.\n\nThe shell's name is an acronym for ''Bourne-again shell'', a [[pun]] on the name of the [[Bourne shell]] that it replaces<ref>[http://www.ddj.com/cpp/184404693 C Programming] by Al Stevens, [[Dr. Dobb's Journal]], July 1, 2001</ref> and the notion of being \"[[born again]]\".<ref>\n{{cite web\n  | author = [[Richard Stallman]]\n  | title = About the GNU Project\n  | publisher = [[Free Software Foundation]]\n  | date = November 12, 2010\n  | url = https://www.gnu.org/gnu/thegnuproject.html\n  | quote = \"Bourne Again Shell\" is a play on the name ''Bourne Shell'', which was the usual shell on Unix.\n  | accessdate = March 13, 2011\n| archiveurl= https://web.archive.org/web/20110424064815/https://www.gnu.org/gnu/thegnuproject.html| archivedate=April 24, 2011 | url-status= live}}\n</ref><ref>\n{{Citation\n |last        = Gattol\n |first       = Markus\n |title       = Bourne-again Shell\n |date        = March 13, 2011\n |url         = http://www.markus-gattol.name/ws/bash.html\n |quote       = The name is a pun on the name of the Bourne shell (sh), an early and important Unix shell written by Stephen Bourne and distributed with Version 7 Unix circa 1978, and the concept of being \"born again\".\n |accessdate  = March 13, 2011\n |url-status     = dead\n |archiveurl  = https://web.archive.org/web/20110309092607/http://www.markus-gattol.name/ws/bash.html\n |archivedate = March 9, 2011\n |df          = mdy-all\n}}\n</ref>\n\nA [[shellshock_(software_bug)|security hole]] in Bash dating from version 1.03 (August 1989),<ref name=\"Seclists-20141004\">{{cite web |last=Chazelas |first=Stephane |title=oss-sec mailing list archives |url=http://seclists.org/oss-sec/2014/q4/102 |date=4 October 2014 |work=Seclists.org |accessdate=4 October 2014}}</ref> dubbed [[Shellshock (software bug)|Shellshock]], was discovered in early September 2014 and quickly led to a range of [[Attack (computing)|attacks]] across the [[Internet]].<ref name=\"TR-20140924\">{{cite web |last=Leyden |first=John |title=Patch Bash NOW: 'Shell Shock' bug blasts OS X, Linux systems wide open |url=https://www.theregister.co.uk/2014/09/24/bash_shell_vuln/ |work=[[The Register]] |date=September 24, 2014 |accessdate=September 25, 2014}}</ref><ref name=\"NYT-20140925-NP\">{{cite news |last=Perlroth |first=Nicole |title=Security Experts Expect \u2018Shellshock\u2019 Software Bug in Bash to Be Significant |url=https://www.nytimes.com/2014/09/26/technology/security-experts-expect-shellshock-software-bug-to-be-significant.html |date=September 25, 2014 |work=[[The New York Times]] |accessdate=September 25, 2014 }}</ref><ref name=\"ZDN-20140929\">{{cite web |last=Seltzer |first=Larry |title=Shellshock makes Heartbleed look insignificant |archiveurl=https://web.archive.org/web/20160514191755/http://www.zdnet.com/article/hackers-jump-on-the-shellshock-bash-bandwagon/ |archivedate=May 14, 2016 |url=http://www.zdnet.com/shellshock-makes-heartbleed-look-insignificant-7000034143/ |date=29 September 2014 |work=[[ZDNet]]}}</ref> Patches to fix the bugs were made available soon after the bugs were identified.\n\n==History== \n[[Brian Fox (computer programmer)|Brian Fox]] began [[Computer programming|coding]] Bash on January 10, 1988<ref>\n{{Citation\n  | author = Brian Fox\n  | title = shell.c\n  | place =\n  | publisher = [[Free Software Foundation]]\n  | date = August 29, 1996\n  | url = http://ftp.gnu.org/gnu/bash/bash-1.14.7.tar.gz\n  | quote = Birthdate: Sunday, January 10th, 1988. Initial author: Brian Fox\n }}\n</ref> after [[Richard Stallman]] became dissatisfied with the lack of progress being made by a prior developer.<ref name=GNUBSD/> Stallman and the [[Free Software Foundation]] (FSF) considered a free shell that could run existing shell scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves, with Fox undertaking the work as an employee of FSF.<ref name=GNUBSD/><ref>\n{{cite web\n  | author = [[Richard Stallman]]\n  | title = About the GNU Project\n  | publisher = [[Free Software Foundation]]\n  | date = October 3, 2010\n  | url = https://www.gnu.org/gnu/thegnuproject.html\n  | accessdate = March 21, 2011\n  | quote = Free Software Foundation employees have written and maintained a number of GNU software packages. Two notable ones are the C library and the shell. \u2026 We funded development of these programs because the GNU Project was not just about tools or a development environment. Our goal was a complete operating system, and these programs were needed for that goal.\n| archiveurl= https://web.archive.org/web/20110424064815/https://www.gnu.org/gnu/thegnuproject.html| archivedate=April 24, 2011 | url-status= live}}\n</ref> Fox released Bash as a beta, version .99, on June 8, 1989<ref name=BashBeta/> and remained the primary maintainer until sometime between mid-1992<ref>\n{{Cite newsgroup\n  | title = January 1993 GNU's Bulletin\n  | author = len (g...@prep.ai.mit.edu)\n  | date = April 20, 1993\n  | newsgroup = gnu.announce\n  |message-id= gnusenet930421bulletin@prep.ai.mit.edu\n  | url = https://groups.google.com/group/gnu.misc.discuss/msg/4f42c739cd7e8bd8\n  | accessdate = October 28, 2010\n}}\n</ref> and mid-1994,<ref name=\"Bourne shell grammar\">{{cite web|first=Chet|last=Ramey|title=Bash - the GNU shell (Reflections and Lessons Learned)|url=http://www.linuxjournal.com/article/2800#N0xa50890.0xb46380|accessdate=November 13, 2008| date=August 1, 1994|work=[[Linux Journal]]| archiveurl= https://web.archive.org/web/20081205082152/http://www.linuxjournal.com/article/2800| archivedate=December 5, 2008 | url-status= live}}</ref> when he was laid off from FSF<ref>\n{{Citation\n  | title = Dates in your Computerworld interview\n  | author = Chet Ramey\n  | date = October 31, 2010\n  | url = https://www.scribd.com/doc/40556434/2010-10-31-Chet-Ramey-Early-Bash-Dates\n  | accessdate = October 31, 2010\n}}\n</ref> and his responsibility was transitioned to another early contributor, Chet Ramey.<ref>\n{{Cite newsgroup\n  | title = Bash 0.99 fixes & improvements\n  | author = Chet Ramey\n  | date = June 12, 1989\n  | newsgroup = gnu.bash.bug\n  |message-id=\n  | url = https://groups.google.com/group/gnu.bash.bug/msg/1fc7b688f5d44438?hl=en\n  | accessdate = November 1, 2010\n}}\n</ref><ref>\n{{Cite newsgroup\n  | title = Some bash-1.02 fixes\n  | author = Chet Ramey\n  | date = July 24, 1989\n  | newsgroup = gnu.bash.bug\n  |message-id=\n  | url = https://groups.google.com/group/gnu.bash.bug/msg/072a03645663caea?hl=en\n  | accessdate = October 30, 2010\n}}\n</ref><ref>\n{{Cite newsgroup\n| title = Availability of bash 1.05\n| author = Brian Fox\n| date = March 2, 1990\n| newsgroup = gnu.bash.bug\n|message-id=\n| url = https://groups.google.com/group/gnu.bash.bug/msg/e6112ccc8866e2f4?hl=en\n| accessdate = October 30, 2010\n}}\n</ref>\n\nSince then, Bash has become by far the most popular shell among users of Linux, becoming the default interactive shell on that operating system's various distributions<ref>\n{{cite book\n| title = CompTIA Linux+ Powered by Linux Professional Institute Study Guide: Exam LX0-103 and Exam LX0-104\n| edition = 3rd\n| publisher = John Wiley & Sons, Inc.\n| date = April 2015\n| isbn = 978-1-119-02122-3\n| last = Bresnahan\n| first = Christine\n| last2 = Blum\n| first2 = Richard\n| url = https://books.google.com/books?id=2P3zBgAAQBAJ&pg=PA5&dq=%22most+popular%22+linux+shell&hl=en&sa=X&ved=0ahUKEwiDhpnX4JPNAhWCKGMKHQCmCoEQ6AEIRjAH#v=onepage&q=%22most%20popular%22%20linux%20shell&f=false\n| quote = In Linux, most users run bash because it is the most popular shell.\n| page = 5\n| accessdate = June 6, 2016\n}}</ref><ref>\n{{cite book\n| title = Mastering Linux\n| publisher = John Wiley & Sons, Inc.\n| date = February 2006\n| isbn = 978-0-7821-5277-7\n| last = Danesh\n| first = Arman\n| last2 = Jang\n| first2 = Michael\n| url = https://books.google.com/books?id=tIjrVYbZmUAC&pg=PA363&dq=bash+most+popular+unix+shell&hl=en&sa=X&ved=0ahUKEwjnipq_3JPNAhUH52MKHUD-DA04ChDoAQgpMAA#v=onepage&q=bash%20most%20popular%20unix%20shell&f=false\n| quote = The Bourne Again Shell (bash) is the most common shell installed with Linux distributions.\n| page = 363\n| accessdate = June 6, 2016\n}}</ref> (although [[Almquist shell]] may be the default scripting shell) and on Apple's macOS releases before [[MacOS Catalina|Catalina]] in October 2019.<ref>\n{{Cite book\n| title = Beginning Shell Scripting\n| publisher = John Wiley & Sons, Inc.\n| date = April 2005\n| isbn = 978-0-7645-9791-6\n| last = Foster-Johnson\n| first = Eric\n| last2 = Welch\n| first2 = John C.\n| last3 = Anderson\n| first3 = Micah\n| url = https://books.google.com/books?id=dwIRERUpQPEC&pg=PA6&dq=bash+most+popular+unix+shell&hl=en&sa=X&ved=0ahUKEwi_3fnR2pPNAhUX3GMKHTEdAZoQ6AEIQTAF#v=onepage&q=bash%20most%20popular%20unix%20shell&f=false\n| quote = Bash is by far the most popular shell and forms the default shell on Linux and Mac OSX systems.\n| page = 6\n| accessdate = June 6, 2016\n}}</ref><ref name=\"zsh1\">{{cite web|url=https://support.apple.com/en-us/HT208050|title=Use zsh as the default shell on your Mac - Apple Support|accessdate=1 July 2019}}</ref><ref name=\"zsh2\">{{Cite web|url=https://www.theverge.com/2019/6/4/18651872/apple-macos-catalina-zsh-bash-shell-replacement-features|title=Apple replaces bash with zsh as the default shell in macOS Catalina|last=Warren|first=Tom|date=June 4, 2019|website=The Verge|access-date=June 13, 2019}}</ref> Bash has also been ported to [[Microsoft Windows]] and distributed with [[Cygwin]] and [[MinGW]], to [[DOS]] by the [[DJGPP]] project, to [[Novell NetWare]] and to [[Android (operating system)|Android]] via various terminal emulation applications.\n\nIn September 2014, St\u00e9phane Chazelas, a Unix/Linux specialist,<ref>{{cite news |last1=Juliana |first1=Cino |title=Linux bash exit status and how to set exit status in bash - Techolac |url=https://www.techolac.com/linux/linux-bash-exit-status-and-how-to-set-exit-status-in-bash/ |accessdate=21 June 2019 |date=10 June 2017}}</ref> discovered a [[security bug]] in the program. The bug, first disclosed on September 24, was named [[Shellshock (software bug)|Shellshock]] and assigned the numbers [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271 CVE-2014-6271], [https://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-6277 CVE-2014-6277] and [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169 CVE-2014-7169]. The bug was regarded as severe, since [[Common Gateway Interface|CGI]] scripts using Bash could be vulnerable, enabling [[arbitrary code execution]]. The bug was related to how Bash passes function definitions to subshells through [[environment variable]]s.<ref>{{Cite web\n| author = Huzaifa Sidhpurwala\n| title = Bash specially-crafted environment variables code injection attack\n| publisher = [[Red Hat]]\n| url = https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/\n| date = 2014-09-24\n}}</ref>\n\n==Features==\nThe Bash [[command (computing)|command]] syntax is a [[superset]] of the Bourne shell command syntax. Bash supports [[brace expansion]], [[command line completion]] (Programmable Completion),<ref>https://www.gnu.org/software/bash/manual/bash.html#Programmable-Completion</ref> basic debugging<ref>{{cite web|url=http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html|title=Debugging Bash scripts|website=tldp.org}}</ref> and [[Signal (IPC)|signal handling]] (using <code>trap</code>) since bash 2.05a<ref>https://wiki-dev.bash-hackers.org/scripting/bashchanges</ref> among other features. Bash can execute the vast majority of Bourne shell scripts without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc. Bash command syntax includes ideas drawn from the [[Korn shell]] (ksh) and the [[C shell]] (csh) such as command line editing, [[command history]] (<code>history</code> command),<ref>https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-History-Builtins</ref> the directory stack, the <code>$RANDOM</code> and <code>$PPID</code> variables, and POSIX [[command substitution]] syntax <code>$(\u2026)</code>.\n\nWhen a user presses the [[tab key]] within an interactive command-shell, Bash automatically uses [[command line completion]], since beta version 2.04,<ref>{{cite web|url=http://www.caliban.org/bash/index.shtml|title=Working more productively with bash 2.x/3.x|website=www.caliban.org}}</ref> to match partly typed program names, filenames and variable names. The Bash command-line completion system is very flexible and customizable, and is often packaged with functions that complete arguments and filenames for specific programs and tasks.\n\nBash's syntax has many extensions lacking in the Bourne shell. Bash can perform integer calculations (\"arithmetic evaluation\") without spawning external processes. It uses the <code>((\u2026))</code> command and the <code>$((\u2026))</code> variable syntax for this purpose. Its syntax simplifies [[redirection (computing)|I/O redirection]]. For example, it can redirect [[standard out]]put (stdout) and [[Standard error stream|standard error]] (stderr) at the same time using the <code>&></code> operator. This is simpler to type than the Bourne shell equivalent '<code>command > file 2>&1</code>'. Bash supports [[process substitution]] using the <code><(command)</code> and <code>>(command)</code>syntax, which substitutes the output of (or input to) a command where a filename is normally used. (This is implemented through ''/proc/fd/'' unnamed pipes on systems that support that, or via temporary [[named pipe]]s where necessary).\n\nWhen using the 'function' keyword, Bash function declarations are not compatible with Bourne/Korn/POSIX scripts (the Korn shell has the same problem when using 'function'), but Bash accepts the same function declaration syntax as the Bourne and Korn shells, and is POSIX-conformant. Because of these and other differences, Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind, which is becoming less common as Linux becomes more widespread. But in POSIX mode, Bash conforms with POSIX more closely.<ref name=\"GNUBASHREF\">\n{{Citation\n  | title = The GNU Bash Reference Manual, for Bash, Version 4.1\n  | date = December 23, 2009\n  | chapter = 6.11 Bash POSIX Mode\n  | chapterurl = https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html\n  | accessdate = October 26, 2010\n  | url = https://www.gnu.org/software/bash/manual/html_node/index.html\n| archiveurl= https://web.archive.org/web/20101203065400/https://www.gnu.org/software/bash/manual/html_node/index.html| archivedate= December 3, 2010 | url-status= live}}\n</ref>\n\nBash supports [[here document]]s. Since version 2.05b Bash can redirect [[Stdin|standard input]] (stdin) from a \"here string\" using the <code><<<</code> operator.\n\nBash 3.0 supports in-process [[regular expression]] matching using a syntax reminiscent of [[Perl]].<ref>{{Cite web|url=http://www.tldp.org/LDP/abs/html/bashver3.html#BASH3REF|title=Advanced Bash-Scripting Guide|last=|first=|date=|website=www.tldp.org|at=Section 37.2 (Bash, version 3)|access-date=2017-03-05}}</ref><ref>The syntax matches that shown on the <code>[http://www.tin.org/bin/man.cgi?section=7&topic=regex regex(7)]</code> [[man page]].</ref>\n\nIn February 2009,<ref>{{cite web|url=http://tldp.org/LDP/abs/html/bashver4.html|title=Bash, version 4|website=tldp.org}}</ref> Bash 4.0 introduced support for [[associative arrays]].<ref name=GNUBASHREF/><ref>\"The shell provides associative array variables, with the appropriate support to create, delete, assign values to, and expand them.\" http://tiswww.case.edu/php/chet/bash/NEWS</ref> Associative array indices are strings, in a manner similar to [[AWK]] or [[Tcl]].  Numeric and multidimensional indices are treated as strings. Bash 4.x has not been provided with newer versions of MacOS.<ref>{{cite web|url=https://apple.stackexchange.com/questions/193411/update-bash-to-version-4-0-on-osx|title=macos - Update bash to version 4.0 on OSX|website=Ask Different}}</ref> Associative array example:<ref>{{cite web|url=https://www.gnu.org/software/bash/manual/html_node/Arrays.html|title=Arrays (Bash Reference Manual)|website=www.gnu.org}}</ref>\n\n<syntaxhighlight lang=\"console\">\n$ declare -A aa        # declare an associative array 'aa' faking a bi-dimensional indexed array\n$ i=1; j=2             # initialize some indices\n$ aa[$i,$j]=5          # associate value \"5\" to key \"$i,$j\" (i.e. the string \"1,2\")\n$ echo ${aa[$i,$j]}    # print the stored value at key \"$i,$j\"\n5\n</syntaxhighlight>\n\n\n===Brace expansion===\nBrace expansion, also called alternation, is a feature copied from the [[C shell]]. It generates a set of alternative combinations. Generated results need not exist as files. The results of each expanded string are not sorted and left to right order is preserved:\n\n<syntaxhighlight lang=\"console\">\n$ echo a{p,c,d,b}e\nape ace ade abe\n$ echo {a,b,c}{d,e,f}\nad ae af bd be bf cd ce cf\n</syntaxhighlight>\nUsers should not use brace expansions in portable shell scripts, because the [[Bourne shell]] does not produce the same output.\n\n<syntaxhighlight lang=\"console\">\n$ # A traditional shell does not produce the same output\n$ /bin/sh -c 'echo a{p,c,d,b}e'\na{p,c,d,b}e\n</syntaxhighlight>\n\nWhen brace expansion is combined with wildcards, the braces are expanded first, and then the resulting wildcards are substituted normally. Hence, a listing of JPEG and PNG images in the current directory could be obtained using:\n\n<syntaxhighlight lang=\"bash\">\nls *.{jpg,jpeg,png}    # expands to *.jpg *.jpeg *.png - after which,\n                       # the wildcards are processed\necho *.{png,jp{e,}g}   # echo just show the expansions -\n                       # and braces in braces are possible.\n</syntaxhighlight>\n\nIn addition to alternation, brace expansion can be used for sequential ranges between two integers or characters separated by double dots. Newer versions of Bash allow a third integer to specify the increment.\n\n<syntaxhighlight lang=\"console\">\n$ echo {1..10}\n1 2 3 4 5 6 7 8 9 10\n$ echo file{1..4}.txt\nfile1.txt file2.txt file3.txt file4.txt\n$ echo {a..e}\na b c d e\n$ echo {1..10..3}\n1 4 7 10\n$ echo {a..j..3}\na d g j\n</syntaxhighlight>\n\nWhen brace expansion is combined with variable expansion the variable expansion is performed ''after'' the brace expansion, which in some cases may necessitate the use of the <code>eval</code> built-in, thus:\n\n<syntaxhighlight lang=\"console\">\n$ start=1; end=10\n$ echo {$start..$end}  # fails to expand due to the evaluation order\n{1..10}\n$ eval echo {$start..$end} # variable expansion occurs then resulting string is evaluated\n1 2 3 4 5 6 7 8 9 10\n</syntaxhighlight>\n\n===Startup scripts===\n\n{{Section howto|date=January 2019}}\n\nWhen Bash starts, it executes the commands in a variety of [[Hidden file and hidden directory#Unix and Unix-like environments|dot files]]. Though similar to Bash shell script commands, which have execute permission enabled and an [[interpreter directive]] like <code>#!/bin/bash</code>, the initialization files used by Bash require neither.\n\n====Execution order of startup files====\n<!-- A little margin for readability -->\n<div style=\"margin: 1.5em 3em\">\n\n=====When started as an interactive login shell=====\nBash reads and executes <code>/etc/profile</code> (if it exists). (Often this file calls <code>/etc/bash.bashrc</code>.)\n\nAfter reading that file, it looks for <code>~/.bash_profile</code>, <code>~/.bash_login</code>, and <code>~/.profile</code> ''in that order'', and reads and executes the first one that exists and is readable.\n\n=====When a login shell exits=====\nBash reads and executes <code>~/.bash_logout</code> (if it exists).\n\n=====When started as an interactive shell (but not a login shell)=====\nBash reads and executes <code>/etc/bash.bashrc</code> and then <code>~/.bashrc</code> (if it exists). This may be inhibited by using the <code>--norc</code> option. The <code>--rcfile file</code> option forces Bash to read and execute commands from <code>file</code> instead of <code>~/.bashrc</code>.\n</div>\n\n====Comparison with the Bourne shell and csh startup sequences====\nElements of Bash derive from the [[Bourne shell]] and [[C shell|csh]]. These allow limited startup file sharing with the Bourne shell and provide some startup features familiar to csh users.\n\n<!-- A little margin for readability -->\n<div style=\"margin: 1.5em 3em\">\n\n=====Setting inheritable environment variables=====\nThe Bourne shell uses the <code>~/.profile</code> at login to set environment variables that subprocesses then inherit. Bash can use the <code>~/.profile</code> in a compatible way, by executing it explicitly from the Bash-specific <code>~/.bash_profile</code> or <code>~/.bash_login</code> with the line below. Bash-specific syntax can be kept out of the <code>~/.profile</code> to keep the latter compatible with the Bourne shell.\n<syntaxhighlight lang=\"bash\">. ~/.profile</syntaxhighlight>\n\n=====Aliases and functions=====\nThese two facilities, [[alias (command)|aliases]] from ''csh'' and the more general functions that largely supersede them from Bourne shell, were not typically inheritable from the login shell, and had to be redefined in each subshell spawned from the login shell. Although there is an <code>ENV</code> environment variable that could be applied to the problem, both ''csh'' and Bash support per-subshell startup files that address it directly. In Bash, the <code>~/.bashrc</code> is called for interactive subshells. If user-defined functions from the <code>~/.bashrc</code> are desired in the login shell as well, the <code>~/.bash_login</code> can include the line below after any setting up of environment variables:\n<syntaxhighlight lang=\"bash\">. ~/.bashrc</syntaxhighlight>\n\n=====Commands performed only at login and logout=====\nThe ''csh'' supports a <code>~/.login</code> file for purposes of tasks performed only during initial login, such as displaying system load, disk status, whether email has come in, logging the login time, etc. The Bourne shell can emulate this in the <code>~/.profile</code>, but does not predefine a file name. To achieve similar semantics to the csh model, the <code>~/.bash_profile</code> can contain the line below, after the environment setup and function setup:\n<syntaxhighlight lang=\"bash\">. ~/.bash_login</syntaxhighlight>\nLikewise, the ''csh'' has a <code>~/.logout</code> file run only when the login shell exits. The Bash equivalent is <code>~/.bash_logout</code>, and requires no special setup. In the Bourne shell, the [[Trap_(computing)|<code>trap</code>]] built-in can be used to achieve a similar effect.\n</div>\n\n=====Legacy-compatible Bash startup example=====\nThe skeleton <code>~/.bash_profile</code> below is compatible with the Bourne shell and gives semantics similar to csh for the <code>~/.bashrc</code> and <code>~/.bash_login</code>. The <code>[ -r ''filename'' ]</code> are tests to see if the ''filename'' exists and is readable, simply skipping the part after the <code>&&</code> if it is not.\n\n<syntaxhighlight lang=\"bash\">\n[ -r ~/.profile ] && . ~/.profile             # set up environment, once, Bourne-sh syntax only\nif [ -n \"$PS1\" ] ; then                       # are we interactive?\n   [ -r ~/.bashrc     ] && . ~/.bashrc        # tty/prompt/function setup for interactive shells\n   [ -r ~/.bash_login ] && . ~/.bash_login    # any at-login tasks for login shell only\nfi                                            # End of \"if\" block\n</syntaxhighlight>\n\n====Operating system issues in Bash startup====\nSome versions of [[Unix]] and [[Linux]] contain Bash system startup scripts, generally under the <code>/etc</code> directories. Bash calls these as part of its standard initialization, but other startup files can read them in a different order than the documented Bash startup sequence. The default content of the root user's files may also have issues, as well as the skeleton files the system provides to new user accounts upon setup. The startup scripts that launch the [[X window system]] may also do surprising things with the user's Bash startup scripts in an attempt to set up user-environment variables before launching the [[window manager]]. These issues can often be addressed using a <code>~/.xsession</code> or <code>~/.xprofile</code> file to read the <code>~/.profile</code> \u2014 which provides the environment variables that Bash shell windows spawned from the window manager need, such as [[xterm]] or [[Gnome Terminal]].\n\n===Portability===\nInvoking Bash with the <code>--posix</code> option or stating <code>set -o posix</code> in a script causes Bash to conform very closely to the [[Posix#POSIX.2|POSIX 1003.2 standard]].<ref name=tldp />\nBash shell scripts intended for [[portability (computer science)|portability]] should at least take into account the Bourne shell it intends to replace. Bash has certain features that the traditional Bourne shell lacks. They include:<ref name=tldp>{{cite web|author=Mendel Cooper|title=Portability Issues|url=http://tldp.org/LDP/abs/html/portabilityissues.html|work=The Linux Documentation Project|publisher=ibiblio.org}}</ref>\n\n* Certain extended invocation options\n* Command substitution using $( ) notation (this feature is part of the POSIX 1003.2 standard though)\n* Brace expansion\n* Certain array operations, and associative arrays\n* The double brackets extended test construct\n* The double-parentheses arithmetic-evaluation construct\n* Certain string-manipulation operations\n* Process substitution\n* A Regular Expression matching operator\n* Bash-specific builtins\n* [[Coprocess]]es\n\nA \"bashism\" is a portion of bash code that does not run properly on other Unix shells.<ref>{{cite web|url=https://linux.die.net/man/1/checkbashisms|title=checkbashisms(1) - Linux man page|website=linux.die.net}}</ref>\n\n===Keyboard shortcuts===\n{{Main article|GNU Readline}}\nBash uses readline to provide keyboard shortcuts for command line editing using the default ([[Emacs]]) key bindings. [[Vi-binding]]s can be enabled by running <code>set -o vi</code>.<ref>{{cite web|url=http://www.hypexr.org/bash_tutorial.php#emacs |title=BASH Help - A Bash Tutorial |publisher=Hypexr.org |date=October 5, 2012 |accessdate=July 21, 2013}}</ref>\n\n===Process management===\nThe Bash shell has two modes of execution for commands: [[batch (Unix) |batch]], and concurrent mode.\n\nTo execute commands in batch (i.e., in sequence) they must be separated by the character \";\", or on separate lines:\n\n<syntaxhighlight lang=\"bash\">\ncommand1; command2\n</syntaxhighlight>\n\nin this example, when command1 is finished, command2 is executed.\n\nA [[background execution]] of command1 can occur using (symbol &) at the end of an execution command, and process will be executed in background returning immediately control to the shell and allowing continued execution of commands.\n<syntaxhighlight lang=\"bash\">command1 &</syntaxhighlight>\n\nOr to have a concurrent execution of two command1 and command2, they must be executed in the Bash shell in the following way:\n\n<syntaxhighlight lang=\"bash\">\ncommand1 & command2\n</syntaxhighlight>\n\nIn this case command1 is executed in the background ''&'' symbol, returning immediately control to the shell that executes command2 in the foreground.\n\nA process can be stopped and returned control to bash by typing {{Key press|Ctrl|z}} while the process is running in the foreground.<ref>{{cite web|url=https://www.gnu.org/software/bash/manual/bash.html#index-background|title=Bash Reference Manual|website=www.gnu.org}}</ref>\n\nA list of all processes, both in the background and stopped, can be achieved by running <code>jobs</code>:\n<syntaxhighlight lang=\"console\">\n$ jobs\n[1]-  Running                  command1 &\n[2]+  Stopped                  command2\n</syntaxhighlight>\n\nIn the output, the number in brackets refers to the job id. The plus sign signifies the default process for <code>bg</code> and <code>fg</code>. The text \"Running\" and \"Stopped\" refer to the [[Process state]]. The last string is the command that started the process. \n\nThe state of a process can be changed using various commands. The <code>fg</code> command brings a process to the foreground, while <code>bg</code> sets a stopped process running in the background. <code>bg</code> and <code>fg</code> can take a job id as their first argument, to specify the process to act on. Without one, they use the default process, identified by a plus sign in the output of <code>jobs</code>. The <code>[[Kill_(command)|kill]]</code> command can be used to end a process prematurely, by sending it a [[Signal (IPC)|signal]]. The job id must be specified after a percent sign:\n\n<syntaxhighlight lang=\"bash\">\nkill -s SIGKILL %1\n</syntaxhighlight>\n or\n<syntaxhighlight lang=\"bash\">\nkill -9 %1\n</syntaxhighlight>\n\n===Conditional execution===\nBash supplies \"conditional execution\" command separators that make execution of a command contingent on the [[Exit status|exit code]] set by a precedent command. For example:\n\n<syntaxhighlight lang=\"bash\">\ncd \"$SOMEWHERE\" && ./do_something || echo \"An error occurred\" >&2\n</syntaxhighlight>\n\nWhere ''./do_something'' is only executed if the ''cd'' (change directory) command was \"successful\" (returned an exit status of zero) and the ''echo'' command would only be executed if either the ''cd'' or the ''./do_something'' command return an \"error\" (non-zero exit status).\n\nFor all commands the exit status is stored in the special variable <code>$?</code>. Bash also supports {{code|2=bash|if ...;then ...;else ...;fi}} and {{code|2=bash|case $VARIABLE in $pattern)...;;$other_pattern)...;; esac}} forms of conditional command evaluation.\n\n===Bug reporting===\n{{Redirect|bashbug|the widely reported September 2014 bug found in Bash|Shellshock (software bug)}}\nAn external command called ''bashbug'' reports Bash shell bugs. When the command is invoked, it brings up the user's default editor with a form to fill in. The form is mailed to the Bash maintainers (or optionally to other email addresses).<ref>\n[http://linux.die.net/man/1/bashbug bashbug(1)], die.net\n</ref><ref>\n[https://developer.apple.com/library/prerelease/mac/documentation/Darwin/Reference/ManPages/man1/bashbug.1.html \"Linux / Unix Command: bashbug\"], apple.com\n</ref>\n\n===Programmable completion===\nBash programmable completion, <code>complete</code> and <code>compgen</code> commands<ref>https://tiswww.case.edu/php/chet/bash/bashref.html#Programmable-Completion</ref> have been available since the beta version of 2.04<ref>http://www.caliban.org/bash/index.shtml</ref> in 2000<ref>https://ftp.swin.edu.au/gnu/bash/</ref> and offers at least Pathname and filename completion.\n\n==Release history==\n{| class=\"wikitable\"\n|-\n! VERSION\n! RELEASE DATE\n|-\n| bash-5.0 \n| 2019-01-07\n|-\n| bash-5.0-rc1 \n| 2018-12-20\n|-\n| bash-5.0-beta2 \n| 2018-11-28\n|-\n| bash-5.0-beta \n| 2018-09-17\n|-\n| bash-5.0-alpha \n| 2018-05-22\n|-\n| bash-4.4 \n| 2016-09-15\n|-\n| bash-4.4-rc2 \n| 2016-08-22\n|-\n| bash-4.4-rc1 \n| 2016-02-24\n|-\n| bash-4.4-beta2 \n| 2016-07-11\n|-\n| bash-4.4-beta \n| 2015-10-12\n|-\n| bash-4.3 \n| 2014-02-26\n|-\n| bash-4.2 \n| 2011-02-13\n|-\n| bash-4.1 \n| 2009-12-31\n|-\n| bash-4.0 \n| 2009-02-20\n|-\n| bash-4.0-rc1 \n| 2009-01-12\n|-\n| bash-3.2 \n| 2006-10-11\n|-\n| bash-3.1 \n| 2005-12-08\n|-\n| bash-3.0 \n| 2004-08-03\n|-\n| bash-2.05b \n| 2002-07-17\n|-\n| bash-2.05a \n| 2001-11-16\n|-\n| bash-2.05 \n| 2001-04-09\n|-\n| bash-2.04 \n| 2000-03-21\n|-\n| bash-2.03 \n| 1999-02-19\n|-\n| bash-2.02 \n| 1998-04-18\n|-\n| bash-2.01 \n| 1997-06-05\n|-\n| bash-2.0 \n| 1996-12-31\n|}\n\n==See also==\n{{Portal|Free and open-source software}}\n* [[Comparison of command shells]]\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n{{Commons category|GNU Bash|Bash}}\n{{Wikibooks|Bash Shell Scripting}}\n* {{official website|https://www.gnu.org/software/bash/}}\n* [http://www.computerworld.com.au/article/222764/ 2008 interview with GNU Bash's maintainer, Chet Ramey]\n* [https://github.com/lanl/MPI-Bash MPI-Bash]: A [[Message_Passing_Interface|MPI]]-enabled plugin for the Bourne-Again Shell by [[Scott Pakin]]\n* [https://wiki.bash-hackers.org/scripting/bashchanges List of bash changes]\n\n{{GNU}}\n{{Unix shells}}{{Programming languages}}\n\n{{DEFAULTSORT:Bash (Unix Shell)}}\n[[Category:1989 software]]\n[[Category:Cross-platform free software]]\n[[Category:Domain-specific programming languages]]\n[[Category:Free software programmed in C]]\n[[Category:GNU Project software]]\n[[Category:Scripting languages]]\n[[Category:Text-oriented programming languages]]\n[[Category:Unix shells]]\n", "text_old": "{{short description|GNU replacement for the Bourne shell}}\n{{Use mdy dates|date=March 2014}}\n{{Infobox software\n| name = Bash\n| logo = Gnu-bash-logo.svg\n| screenshot = Bash screenshot.png\n| caption = Screenshot of a Bash session\n| author = [[Brian Fox (computer programmer)|Brian Fox]]\n| released = {{start date and age|1989|06|08}}\n| programming language = [[C (programming language)|C]]\n| operating system = {{Plainlist|\n* [[Unix-like]],<ref>{{cite web|url=ftp://ftp.cwru.edu/pub/bash/FAQ|archive-url=https://web.archive.org/web/20180901171316/ftp://ftp.cwru.edu/pub/bash/FAQ|archive-date=September 1, 2018|url-status=dead|title=Bash FAQ, version 4.14|access-date=April 9, 2016|df=mdy-all}}</ref>\n* [[macOS]] (only latest [[GNU GPL#Version 2|GPLv2]] release; GPLv3 releases available through third parties\n* [[Windows]] (newer [[GNU GPL#Version 3|GPLv3+]] version)<ref>{{cite web|url=https://github.com/Microsoft/BashOnWindows/issues/107|title=Missing source code - GPL compliance? \u00b7 Issue #107 \u00b7 Microsoft/WSL|website=GitHub}}</ref><ref>{{cite web|title=GNU Bash|url=http://www.softpedia.com/get/System/System-Miscellaneous/GNU-Bash.shtml|website=[[Softpedia]]|publisher=SoftNews|accessdate=9 April 2016}}</ref>\n }}\n| platform = [[GNU]]\n| language = Multilingual ([[gettext]])\n| genre = [[Unix shell]], [[command language]]\n| license = [[GNU GPL#Version 3|GPLv3+]]<ref name=\"license\">{{cite web | author = GNU Project | authorlink = GNU Project | title = README file | url = https://www.gnu.org/software/bash/ | quote = Bash is free software, distributed under the terms of the [GNU] General Public License as published by the Free Software Foundation, version 3 of the License (or any later version).}}</ref>\n| website = {{URL|https://www.gnu.org/software/bash/}}\n}}\n\n'''GNU Bash''' or simply '''Bash''' is a [[Unix shell]] and [[command language]] written by [[Brian Fox (computer programmer)|Brian Fox]] for the [[GNU Project]] as a [[free software]] replacement for the [[Bourne shell]].<ref name=\"GNUBSD\">\n{{Cite newsgroup\n  | title = GNU + BSD = ?\n  | author = [[Richard Stallman]] (forwarded with comments by Chet Ramey)\n  | date = February 10, 1988\n  | newsgroup = comp.unix.questions\n  |message-id=2362@mandrill.CWRU.Edu\n  | url=https://groups.google.com/forum/#!original/comp.unix.questions/iNjWwkyroR8/yedr9yDWSuQJ\n  | accessdate = March 22, 2011\n  | quote = For a year and a half, the GNU shell was \"just about done\". The author made repeated promises to deliver what he had done, and never kept them. Finally I could no longer believe he would ever deliver anything. So Foundation staff member Brian Fox is now implementing an imitation of the Bourne shell.\n}}\n</ref><ref>\n{{Citation\n  | last = Hamilton\n  | first = Naomi\n  | title = The A-Z of Programming Languages: BASH/Bourne-Again Shell\n  | journal = Computerworld\n  | page = 2\n  | date = May 30, 2008\n  | accessdate = March 21, 2011\n  | url = http://www.computerworld.com.au/article/222764/a-z_programming_languages_bash_bourne-again_shell/?pp=2&fp=16&fpid=1\n  | quote = When Richard Stallman decided to create a full replacement for the then-encumbered Unix systems, he knew that he would eventually have to have replacements for all of the common utilities, especially the standard shell, and those replacements would have to have acceptable licensing.\n}}\n</ref> First released in 1989,<ref name=BashBeta>\n{{Cite newsgroup\n  | title = Bash is in beta release!\n  | author = Brian Fox (forwarded by Leonard H. Tower Jr.)\n  | date = June 8, 1989\n  | newsgroup = gnu.announce\n  | url = https://groups.google.com/group/gnu.announce/msg/a509f48ffb298c35?hl=en\n  | accessdate = October 28, 2010 \n}}\n</ref> it has been used widely as the default [[login]] shell for most [[Linux]] distributions and [[Apple Inc.|Apple's]] [[macOS Mojave]] and earlier versions. A version [[Windows Subsystem for Linux|is also available for Windows 10]].<ref>{{cite web|url=http://www.windowscentral.com/how-install-bash-shell-command-line-windows-10|title=How to install Bash shell command-line tool on Windows 10|date=September 28, 2016|publisher=}}</ref> It is also the default user shell in [[Solaris_(operating_system)|Solaris]] 11.<ref>{{cite web|url=https://docs.oracle.com/cd/E23824_01/html/E24456/userenv-1.html|title=User Environment Feature Changes|date=|publisher=Oracle}}</ref>\n\nBash is a [[Command-line interpreter|command processor]] that typically runs in a [[terminal emulator|text window]] where the user types commands that cause actions. Bash can also read and execute commands from a file, called a [[shell script]]. Like all Unix shells, it supports filename [[glob (programming)|globbing]] (wildcard matching), [[Pipeline (Unix)|piping]], [[here document]]s, [[command substitution]], [[Variable (programming)|variables]], and [[control flow|control structures]] for [[Conditional (programming)|condition-testing]] and [[iteration]]. The [[Keyword (computer programming)|keywords]], [[Syntax (programming languages)|syntax]], [[Scope_(computer_science)#Dynamic_scoping|dynamically scoped]] variables and other basic features of the [[Language (computer science)|language]] are all copied from [[Bourne shell|sh]]. Other features, e.g., [[C shell#History|history]], are copied from [[C shell|csh]] and [[Korn shell|ksh]]. Bash is a [[POSIX]]-compliant shell, but with a number of extensions.\n\nThe shell's name is an acronym for ''Bourne-again shell'', a [[pun]] on the name of the [[Bourne shell]] that it replaces<ref>[http://www.ddj.com/cpp/184404693 C Programming] by Al Stevens, [[Dr. Dobb's Journal]], July 1, 2001</ref> and the notion of being \"[[born again]]\".<ref>\n{{cite web\n  | author = [[Richard Stallman]]\n  | title = About the GNU Project\n  | publisher = [[Free Software Foundation]]\n  | date = November 12, 2010\n  | url = https://www.gnu.org/gnu/thegnuproject.html\n  | quote = \"Bourne Again Shell\" is a play on the name ''Bourne Shell'', which was the usual shell on Unix.\n  | accessdate = March 13, 2011\n| archiveurl= https://web.archive.org/web/20110424064815/https://www.gnu.org/gnu/thegnuproject.html| archivedate=April 24, 2011 | url-status= live}}\n</ref><ref>\n{{Citation\n |last        = Gattol\n |first       = Markus\n |title       = Bourne-again Shell\n |date        = March 13, 2011\n |url         = http://www.markus-gattol.name/ws/bash.html\n |quote       = The name is a pun on the name of the Bourne shell (sh), an early and important Unix shell written by Stephen Bourne and distributed with Version 7 Unix circa 1978, and the concept of being \"born again\".\n |accessdate  = March 13, 2011\n |url-status     = dead\n |archiveurl  = https://web.archive.org/web/20110309092607/http://www.markus-gattol.name/ws/bash.html\n |archivedate = March 9, 2011\n |df          = mdy-all\n}}\n</ref>\n\nA [[shellshock_(software_bug)|security hole]] in Bash dating from version 1.03 (August 1989),<ref name=\"Seclists-20141004\">{{cite web |last=Chazelas |first=Stephane |title=oss-sec mailing list archives |url=http://seclists.org/oss-sec/2014/q4/102 |date=4 October 2014 |work=Seclists.org |accessdate=4 October 2014}}</ref> dubbed [[Shellshock (software bug)|Shellshock]], was discovered in early September 2014 and quickly led to a range of [[Attack (computing)|attacks]] across the [[Internet]].<ref name=\"TR-20140924\">{{cite web |last=Leyden |first=John |title=Patch Bash NOW: 'Shell Shock' bug blasts OS X, Linux systems wide open |url=https://www.theregister.co.uk/2014/09/24/bash_shell_vuln/ |work=[[The Register]] |date=September 24, 2014 |accessdate=September 25, 2014}}</ref><ref name=\"NYT-20140925-NP\">{{cite news |last=Perlroth |first=Nicole |title=Security Experts Expect \u2018Shellshock\u2019 Software Bug in Bash to Be Significant |url=https://www.nytimes.com/2014/09/26/technology/security-experts-expect-shellshock-software-bug-to-be-significant.html |date=September 25, 2014 |work=[[The New York Times]] |accessdate=September 25, 2014 }}</ref><ref name=\"ZDN-20140929\">{{cite web |last=Seltzer |first=Larry |title=Shellshock makes Heartbleed look insignificant |archiveurl=https://web.archive.org/web/20160514191755/http://www.zdnet.com/article/hackers-jump-on-the-shellshock-bash-bandwagon/ |archivedate=May 14, 2016 |url=http://www.zdnet.com/shellshock-makes-heartbleed-look-insignificant-7000034143/ |date=29 September 2014 |work=[[ZDNet]]}}</ref> Patches to fix the bugs were made available soon after the bugs were identified.\n\n==History== \n[[Brian Fox (computer programmer)|Brian Fox]] began [[Computer programming|coding]] Bash on January 10, 1988<ref>\n{{Citation\n  | author = Brian Fox\n  | title = shell.c\n  | place =\n  | publisher = [[Free Software Foundation]]\n  | date = August 29, 1996\n  | url = http://ftp.gnu.org/gnu/bash/bash-1.14.7.tar.gz\n  | quote = Birthdate: Sunday, January 10th, 1988. Initial author: Brian Fox\n }}\n</ref> after [[Richard Stallman]] became dissatisfied with the lack of progress being made by a prior developer.<ref name=GNUBSD/> Stallman and the [[Free Software Foundation]] (FSF) considered a free shell that could run existing shell scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves, with Fox undertaking the work as an employee of FSF.<ref name=GNUBSD/><ref>\n{{cite web\n  | author = [[Richard Stallman]]\n  | title = About the GNU Project\n  | publisher = [[Free Software Foundation]]\n  | date = October 3, 2010\n  | url = https://www.gnu.org/gnu/thegnuproject.html\n  | accessdate = March 21, 2011\n  | quote = Free Software Foundation employees have written and maintained a number of GNU software packages. Two notable ones are the C library and the shell. \u2026 We funded development of these programs because the GNU Project was not just about tools or a development environment. Our goal was a complete operating system, and these programs were needed for that goal.\n| archiveurl= https://web.archive.org/web/20110424064815/https://www.gnu.org/gnu/thegnuproject.html| archivedate=April 24, 2011 | url-status= live}}\n</ref> Fox released Bash as a beta, version .99, on June 8, 1989<ref name=BashBeta/> and remained the primary maintainer until sometime between mid-1992<ref>\n{{Cite newsgroup\n  | title = January 1993 GNU's Bulletin\n  | author = len (g...@prep.ai.mit.edu)\n  | date = April 20, 1993\n  | newsgroup = gnu.announce\n  |message-id= gnusenet930421bulletin@prep.ai.mit.edu\n  | url = https://groups.google.com/group/gnu.misc.discuss/msg/4f42c739cd7e8bd8\n  | accessdate = October 28, 2010\n}}\n</ref> and mid-1994,<ref name=\"Bourne shell grammar\">{{cite web|first=Chet|last=Ramey|title=Bash - the GNU shell (Reflections and Lessons Learned)|url=http://www.linuxjournal.com/article/2800#N0xa50890.0xb46380|accessdate=November 13, 2008| date=August 1, 1994|work=[[Linux Journal]]| archiveurl= https://web.archive.org/web/20081205082152/http://www.linuxjournal.com/article/2800| archivedate=December 5, 2008 | url-status= live}}</ref> when he was laid off from FSF<ref>\n{{Citation\n  | title = Dates in your Computerworld interview\n  | author = Chet Ramey\n  | date = October 31, 2010\n  | url = https://www.scribd.com/doc/40556434/2010-10-31-Chet-Ramey-Early-Bash-Dates\n  | accessdate = October 31, 2010\n}}\n</ref> and his responsibility was transitioned to another early contributor, Chet Ramey.<ref>\n{{Cite newsgroup\n  | title = Bash 0.99 fixes & improvements\n  | author = Chet Ramey\n  | date = June 12, 1989\n  | newsgroup = gnu.bash.bug\n  |message-id=\n  | url = https://groups.google.com/group/gnu.bash.bug/msg/1fc7b688f5d44438?hl=en\n  | accessdate = November 1, 2010\n}}\n</ref><ref>\n{{Cite newsgroup\n  | title = Some bash-1.02 fixes\n  | author = Chet Ramey\n  | date = July 24, 1989\n  | newsgroup = gnu.bash.bug\n  |message-id=\n  | url = https://groups.google.com/group/gnu.bash.bug/msg/072a03645663caea?hl=en\n  | accessdate = October 30, 2010\n}}\n</ref><ref>\n{{Cite newsgroup\n| title = Availability of bash 1.05\n| author = Brian Fox\n| date = March 2, 1990\n| newsgroup = gnu.bash.bug\n|message-id=\n| url = https://groups.google.com/group/gnu.bash.bug/msg/e6112ccc8866e2f4?hl=en\n| accessdate = October 30, 2010\n}}\n</ref>\n\nSince then, Bash has become by far the most popular shell among users of Linux, becoming the default interactive shell on that operating system's various distributions<ref>\n{{cite book\n| title = CompTIA Linux+ Powered by Linux Professional Institute Study Guide: Exam LX0-103 and Exam LX0-104\n| edition = 3rd\n| publisher = John Wiley & Sons, Inc.\n| date = April 2015\n| isbn = 978-1-119-02122-3\n| last = Bresnahan\n| first = Christine\n| last2 = Blum\n| first2 = Richard\n| url = https://books.google.com/books?id=2P3zBgAAQBAJ&pg=PA5&dq=%22most+popular%22+linux+shell&hl=en&sa=X&ved=0ahUKEwiDhpnX4JPNAhWCKGMKHQCmCoEQ6AEIRjAH#v=onepage&q=%22most%20popular%22%20linux%20shell&f=false\n| quote = In Linux, most users run bash because it is the most popular shell.\n| page = 5\n| accessdate = June 6, 2016\n}}</ref><ref>\n{{cite book\n| title = Mastering Linux\n| publisher = John Wiley & Sons, Inc.\n| date = February 2006\n| isbn = 978-0-7821-5277-7\n| last = Danesh\n| first = Arman\n| last2 = Jang\n| first2 = Michael\n| url = https://books.google.com/books?id=tIjrVYbZmUAC&pg=PA363&dq=bash+most+popular+unix+shell&hl=en&sa=X&ved=0ahUKEwjnipq_3JPNAhUH52MKHUD-DA04ChDoAQgpMAA#v=onepage&q=bash%20most%20popular%20unix%20shell&f=false\n| quote = The Bourne Again Shell (bash) is the most common shell installed with Linux distributions.\n| page = 363\n| accessdate = June 6, 2016\n}}</ref> (although [[Almquist shell]] may be the default scripting shell) and on Apple's macOS releases before [[MacOS Catalina|Catalina]] in October 2019.<ref>\n{{Cite book\n| title = Beginning Shell Scripting\n| publisher = John Wiley & Sons, Inc.\n| date = April 2005\n| isbn = 978-0-7645-9791-6\n| last = Foster-Johnson\n| first = Eric\n| last2 = Welch\n| first2 = John C.\n| last3 = Anderson\n| first3 = Micah\n| url = https://books.google.com/books?id=dwIRERUpQPEC&pg=PA6&dq=bash+most+popular+unix+shell&hl=en&sa=X&ved=0ahUKEwi_3fnR2pPNAhUX3GMKHTEdAZoQ6AEIQTAF#v=onepage&q=bash%20most%20popular%20unix%20shell&f=false\n| quote = Bash is by far the most popular shell and forms the default shell on Linux and Mac OSX systems.\n| page = 6\n| accessdate = June 6, 2016\n}}</ref><ref name=\"zsh1\">{{cite web|url=https://support.apple.com/en-us/HT208050|title=Use zsh as the default shell on your Mac - Apple Support|accessdate=1 July 2019}}</ref><ref name=\"zsh2\">{{Cite web|url=https://www.theverge.com/2019/6/4/18651872/apple-macos-catalina-zsh-bash-shell-replacement-features|title=Apple replaces bash with zsh as the default shell in macOS Catalina|last=Warren|first=Tom|date=June 4, 2019|website=The Verge|access-date=June 13, 2019}}</ref> Bash has also been ported to [[Microsoft Windows]] and distributed with [[Cygwin]] and [[MinGW]], to [[DOS]] by the [[DJGPP]] project, to [[Novell NetWare]] and to [[Android (operating system)|Android]] via various terminal emulation applications.\n\nIn September 2014, St\u00e9phane Chazelas, a Unix/Linux specialist,<ref>{{cite news |last1=Juliana |first1=Cino |title=Linux bash exit status and how to set exit status in bash - Techolac |url=https://www.techolac.com/linux/linux-bash-exit-status-and-how-to-set-exit-status-in-bash/ |accessdate=21 June 2019 |date=10 June 2017}}</ref> discovered a [[security bug]] in the program. The bug, first disclosed on September 24, was named [[Shellshock (software bug)|Shellshock]] and assigned the numbers [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271 CVE-2014-6271], [https://cve.mitre.org/cgi-bin/cvename.cgi?name=2014-6277 CVE-2014-6277] and [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169 CVE-2014-7169]. The bug was regarded as severe, since [[Common Gateway Interface|CGI]] scripts using Bash could be vulnerable, enabling [[arbitrary code execution]]. The bug was related to how Bash passes function definitions to subshells through [[environment variable]]s.<ref>{{Cite web\n| author = Huzaifa Sidhpurwala\n| title = Bash specially-crafted environment variables code injection attack\n| publisher = [[Red Hat]]\n| url = https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/\n| date = 2014-09-24\n}}</ref>\n\n==Features==\nThe Bash [[command (computing)|command]] syntax is a [[superset]] of the Bourne shell command syntax. Bash supports [[brace expansion]], [[command line completion]] (Programmable Completion),<ref>https://www.gnu.org/software/bash/manual/bash.html#Programmable-Completion</ref> basic debugging<ref>{{cite web|url=http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html|title=Debugging Bash scripts|website=tldp.org}}</ref> and [[Signal (IPC)|signal handling]] (using <code>trap</code>) since bash 2.05a<ref>https://wiki-dev.bash-hackers.org/scripting/bashchanges</ref> among other features. Bash can execute the vast majority of Bourne shell scripts without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc. Bash command syntax includes ideas drawn from the [[Korn shell]] (ksh) and the [[C shell]] (csh) such as command line editing, [[command history]] (<code>history</code> command),<ref>https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-History-Builtins</ref> the directory stack, the <code>$RANDOM</code> and <code>$PPID</code> variables, and POSIX [[command substitution]] syntax <code>$(\u2026)</code>.\n\nWhen a user presses the [[tab key]] within an interactive command-shell, Bash automatically uses [[command line completion]], since beta version 2.04,<ref>{{cite web|url=http://www.caliban.org/bash/index.shtml|title=Working more productively with bash 2.x/3.x|website=www.caliban.org}}</ref> to match partly typed program names, filenames and variable names. The Bash command-line completion system is very flexible and customizable, and is often packaged with functions that complete arguments and filenames for specific programs and tasks.\n\nBash's syntax has many extensions lacking in the Bourne shell. Bash can perform integer calculations (\"arithmetic evaluation\") without spawning external processes. It uses the <code>((\u2026))</code> command and the <code>$((\u2026))</code> variable syntax for this purpose. Its syntax simplifies [[redirection (computing)|I/O redirection]]. For example, it can redirect [[standard out]]put (stdout) and [[Standard error stream|standard error]] (stderr) at the same time using the <code>&></code> operator. This is simpler to type than the Bourne shell equivalent '<code>command > file 2>&1</code>'. Bash supports [[process substitution]] using the <code><(command)</code> and <code>>(command)</code>syntax, which substitutes the output of (or input to) a command where a filename is normally used. (This is implemented through ''/proc/fd/'' unnamed pipes on systems that support that, or via temporary [[named pipe]]s where necessary).\n\nWhen using the 'function' keyword, Bash function declarations are not compatible with Bourne/Korn/POSIX scripts (the Korn shell has the same problem when using 'function'), but Bash accepts the same function declaration syntax as the Bourne and Korn shells, and is POSIX-conformant. Because of these and other differences, Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind, which is becoming less common as Linux becomes more widespread. But in POSIX mode, Bash conforms with POSIX more closely.<ref name=\"GNUBASHREF\">\n{{Citation\n  | title = The GNU Bash Reference Manual, for Bash, Version 4.1\n  | date = December 23, 2009\n  | chapter = 6.11 Bash POSIX Mode\n  | chapterurl = https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html\n  | accessdate = October 26, 2010\n  | url = https://www.gnu.org/software/bash/manual/html_node/index.html\n| archiveurl= https://web.archive.org/web/20101203065400/https://www.gnu.org/software/bash/manual/html_node/index.html| archivedate= December 3, 2010 | url-status= live}}\n</ref>\n\nBash supports [[here document]]s. Since version 2.05b Bash can redirect [[Stdin|standard input]] (stdin) from a \"here string\" using the <code><<<</code> operator.\n\nBash 3.0 supports in-process [[regular expression]] matching using a syntax reminiscent of [[Perl]].<ref>{{Cite web|url=http://www.tldp.org/LDP/abs/html/bashver3.html#BASH3REF|title=Advanced Bash-Scripting Guide|last=|first=|date=|website=www.tldp.org|at=Section 37.2 (Bash, version 3)|access-date=2017-03-05}}</ref><ref>The syntax matches that shown on the <code>[http://www.tin.org/bin/man.cgi?section=7&topic=regex regex(7)]</code> [[man page]].</ref>\n\nIn February 2009,<ref>{{cite web|url=http://tldp.org/LDP/abs/html/bashver4.html|title=Bash, version 4|website=tldp.org}}</ref> Bash 4.0 introduced support for [[associative arrays]].<ref name=GNUBASHREF/><ref>\"The shell provides associative array variables, with the appropriate support to create, delete, assign values to, and expand them.\" http://tiswww.case.edu/php/chet/bash/NEWS</ref> Associative array indices are strings, in a manner similar to [[AWK]] or [[Tcl]].  Numeric and multidimensional indices are treated as strings. Bash 4.x has not been provided with newer versions of MacOS.<ref>{{cite web|url=https://apple.stackexchange.com/questions/193411/update-bash-to-version-4-0-on-osx|title=macos - Update bash to version 4.0 on OSX|website=Ask Different}}</ref> Associative array example:<ref>{{cite web|url=https://www.gnu.org/software/bash/manual/html_node/Arrays.html|title=Arrays (Bash Reference Manual)|website=www.gnu.org}}</ref>\n\n<syntaxhighlight lang=\"console\">\n$ declare -A aa        # declare an associative array 'aa' faking a bi-dimensional indexed array\n$ i=1; j=2             # initialize some indices\n$ aa[$i,$j]=5          # associate value \"5\" to key \"$i,$j\" (i.e. the string \"1,2\")\n$ echo ${aa[$i,$j]}    # print the stored value at key \"$i,$j\"\n5\n</syntaxhighlight>\n\n\n===Brace expansion===\nBrace expansion, also called alternation, is a feature copied from the [[C shell]]. It generates a set of alternative combinations. Generated results need not exist as files. The results of each expanded string are not sorted and left to right order is preserved:\n\n<syntaxhighlight lang=\"console\">\n$ echo a{p,c,d,b}e\nape ace ade abe\n$ echo {a,b,c}{d,e,f}\nad ae af bd be bf cd ce cf\n</syntaxhighlight>\nUsers should not use brace expansions in portable shell scripts, because the [[Bourne shell]] does not produce the same output.\n\n<syntaxhighlight lang=\"console\">\n$ # A traditional shell does not produce the same output\n$ /bin/sh -c 'echo a{p,c,d,b}e'\na{p,c,d,b}e\n</syntaxhighlight>\n\nWhen brace expansion is combined with wildcards, the braces are expanded first, and then the resulting wildcards are substituted normally. Hence, a listing of JPEG and PNG images in the current directory could be obtained using:\n\n<syntaxhighlight lang=\"bash\">\nls *.{jpg,jpeg,png}    # expands to *.jpg *.jpeg *.png - after which,\n                       # the wildcards are processed\necho *.{png,jp{e,}g}   # echo just show the expansions -\n                       # and braces in braces are possible.\n</syntaxhighlight>\n\nIn addition to alternation, brace expansion can be used for sequential ranges between two integers or characters separated by double dots. Newer versions of Bash allow a third integer to specify the increment.\n\n<syntaxhighlight lang=\"console\">\n$ echo {1..10}\n1 2 3 4 5 6 7 8 9 10\n$ echo file{1..4}.txt\nfile1.txt file2.txt file3.txt file4.txt\n$ echo {a..e}\na b c d e\n$ echo {1..10..3}\n1 4 7 10\n$ echo {a..j..3}\na d g j\n</syntaxhighlight>\n\nWhen brace expansion is combined with variable expansion the variable expansion is performed ''after'' the brace expansion, which in some cases may necessitate the use of the <code>eval</code> built-in, thus:\n\n<syntaxhighlight lang=\"console\">\n$ start=1; end=10\n$ echo {$start..$end}  # fails to expand due to the evaluation order\n{1..10}\n$ eval echo {$start..$end} # variable expansion occurs then resulting string is evaluated\n1 2 3 4 5 6 7 8 9 10\n</syntaxhighlight>\n\n===Startup scripts===\n\n{{Section howto|date=January 2019}}\n\nWhen Bash starts, it executes the commands in a variety of [[Hidden file and hidden directory#Unix and Unix-like environments|dot files]]. Though similar to Bash shell script commands, which have execute permission enabled and an [[interpreter directive]] like <code>#!/bin/bash</code>, the initialization files used by Bash require neither.\n\n====Execution order of startup files====\n<!-- A little margin for readability -->\n<div style=\"margin: 1.5em 3em\">\n\n=====When started as an interactive login shell=====\nBash reads and executes <code>/etc/profile</code> (if it exists). (Often this file calls <code>/etc/bash.bashrc</code>.)\n\nAfter reading that file, it looks for <code>~/.bash_profile</code>, <code>~/.bash_login</code>, and <code>~/.profile</code> ''in that order'', and reads and executes the first one that exists and is readable.\n\n=====When a login shell exits=====\nBash reads and executes <code>~/.bash_logout</code> (if it exists).\n\n=====When started as an interactive shell (but not a login shell)=====\nBash reads and executes <code>/etc/bash.bashrc</code> and then <code>~/.bashrc</code> (if it exists). This may be inhibited by using the <code>--norc</code> option. The <code>--rcfile file</code> option forces Bash to read and execute commands from <code>file</code> instead of <code>~/.bashrc</code>.\n</div>\n\n====Comparison with the Bourne shell and csh startup sequences====\nElements of Bash derive from the [[Bourne shell]] and [[C shell|csh]]. These allow limited startup file sharing with the Bourne shell and provide some startup features familiar to csh users.\n\n<!-- A little margin for readability -->\n<div style=\"margin: 1.5em 3em\">\n\n=====Setting inheritable environment variables=====\nThe Bourne shell uses the <code>~/.profile</code> at login to set environment variables that subprocesses then inherit. Bash can use the <code>~/.profile</code> in a compatible way, by executing it explicitly from the Bash-specific <code>~/.bash_profile</code> or <code>~/.bash_login</code> with the line below. Bash-specific syntax can be kept out of the <code>~/.profile</code> to keep the latter compatible with the Bourne shell.\n<syntaxhighlight lang=\"bash\">. ~/.profile</syntaxhighlight>\n\n=====Aliases and functions=====\nThese two facilities, [[alias (command)|aliases]] from ''csh'' and the more general functions that largely supersede them from Bourne shell, were not typically inheritable from the login shell, and had to be redefined in each subshell spawned from the login shell. Although there is an <code>ENV</code> environment variable that could be applied to the problem, both ''csh'' and Bash support per-subshell startup files that address it directly. In Bash, the <code>~/.bashrc</code> is called for interactive subshells. If user-defined functions from the <code>~/.bashrc</code> are desired in the login shell as well, the <code>~/.bash_login</code> can include the line below after any setting up of environment variables:\n<syntaxhighlight lang=\"bash\">. ~/.bashrc</syntaxhighlight>\n\n=====Commands performed only at login and logout=====\nThe ''csh'' supports a <code>~/.login</code> file for purposes of tasks performed only during initial login, such as displaying system load, disk status, whether email has come in, logging the login time, etc. The Bourne shell can emulate this in the <code>~/.profile</code>, but does not predefine a file name. To achieve similar semantics to the csh model, the <code>~/.bash_profile</code> can contain the line below, after the environment setup and function setup:\n<syntaxhighlight lang=\"bash\">. ~/.bash_login</syntaxhighlight>\nLikewise, the ''csh'' has a <code>~/.logout</code> file run only when the login shell exits. The Bash equivalent is <code>~/.bash_logout</code>, and requires no special setup. In the Bourne shell, the [[Trap_(computing)|<code>trap</code>]] built-in can be used to achieve a similar effect.\n</div>\n\n=====Legacy-compatible Bash startup example=====\nThe skeleton <code>~/.bash_profile</code> below is compatible with the Bourne shell and gives semantics similar to csh for the <code>~/.bashrc</code> and <code>~/.bash_login</code>. The <code>[ -r ''filename'' ]</code> are tests to see if the ''filename'' exists and is readable, simply skipping the part after the <code>&&</code> if it is not.\n\n<syntaxhighlight lang=\"bash\">\n[ -r ~/.profile ] && . ~/.profile             # set up environment, once, Bourne-sh syntax only\nif [ -n \"$PS1\" ] ; then                       # are we interactive?\n   [ -r ~/.bashrc     ] && . ~/.bashrc        # tty/prompt/function setup for interactive shells\n   [ -r ~/.bash_login ] && . ~/.bash_login    # any at-login tasks for login shell only\nfi                                            # End of \"if\" block\n</syntaxhighlight>\n\n====Operating system issues in Bash startup====\nSome versions of [[Unix]] and [[Linux]] contain Bash system startup scripts, generally under the <code>/etc</code> directories. Bash calls these as part of its standard initialization, but other startup files can read them in a different order than the documented Bash startup sequence. The default content of the root user's files may also have issues, as well as the skeleton files the system provides to new user accounts upon setup. The startup scripts that launch the [[X window system]] may also do surprising things with the user's Bash startup scripts in an attempt to set up user-environment variables before launching the [[window manager]]. These issues can often be addressed using a <code>~/.xsession</code> or <code>~/.xprofile</code> file to read the <code>~/.profile</code> \u2014 which provides the environment variables that Bash shell windows spawned from the window manager need, such as [[xterm]] or [[Gnome Terminal]].\n\n===Portability===\nInvoking Bash with the <code>--posix</code> option or stating <code>set -o posix</code> in a script causes Bash to conform very closely to the [[Posix#POSIX.2|POSIX 1003.2 standard]].<ref name=tldp />\nBash shell scripts intended for [[portability (computer science)|portability]] should at least take into account the Bourne shell it intends to replace. Bash has certain features that the traditional Bourne shell lacks. They include:<ref name=tldp>{{cite web|author=Mendel Cooper|title=Portability Issues|url=http://tldp.org/LDP/abs/html/portabilityissues.html|work=The Linux Documentation Project|publisher=ibiblio.org}}</ref>\n\n* Certain extended invocation options\n* Command substitution using $( ) notation (this feature is part of the POSIX 1003.2 standard though)\n* Brace expansion\n* Certain array operations, and associative arrays\n* The double brackets extended test construct\n* The double-parentheses arithmetic-evaluation construct\n* Certain string-manipulation operations\n* Process substitution\n* A Regular Expression matching operator\n* Bash-specific builtins\n* [[Coprocess]]es\n\nA \"bashism\" is a portion of bash code that does not run properly on other Unix shells.<ref>{{cite web|url=https://linux.die.net/man/1/checkbashisms|title=checkbashisms(1) - Linux man page|website=linux.die.net}}</ref>\n\n===Keyboard shortcuts===\n{{Main article|GNU Readline}}\nBash uses readline to provide keyboard shortcuts for command line editing using the default ([[Emacs]]) key bindings. [[Vi-binding]]s can be enabled by running <code>set -o vi</code>.<ref>{{cite web|url=http://www.hypexr.org/bash_tutorial.php#emacs |title=BASH Help - A Bash Tutorial |publisher=Hypexr.org |date=October 5, 2012 |accessdate=July 21, 2013}}</ref>\n\n===Process management===\nThe Bash shell has two modes of execution for commands: [[batch (Unix) |batch]], and concurrent mode.\n\nTo execute commands in batch (i.e., in sequence) they must be separated by the character \";\", or on separate lines:\n\n<syntaxhighlight lang=\"bash\">\ncommand1; command2\n</syntaxhighlight>\n\nin this example, when command1 is finished, command2 is executed.\n\nA [[background execution]] of command1 can occur using (symbol &) at the end of an execution command, and process will be executed in background returning immediately control to the shell and allowing continued execution of commands.\n<syntaxhighlight lang=\"bash\">command1 &</syntaxhighlight>\n\nOr to have a concurrent execution of two command1 and command2, they must be executed in the Bash shell in the following way:\n\n<syntaxhighlight lang=\"bash\">\ncommand1 & command2\n</syntaxhighlight>\n\nIn this case command1 is executed in the background ''&'' symbol, returning immediately control to the shell that executes command2 in the foreground.\n\nA process can be stopped and returned control to bash by typing {{Key press|Ctrl|z}} while the process is running in the foreground.<ref>{{cite web|url=https://www.gnu.org/software/bash/manual/bash.html#index-background|title=Bash Reference Manual|website=www.gnu.org}}</ref>\n\nA list of all processes, both in the background and stopped, can be achieved by running <code>jobs</code>:\n<syntaxhighlight lang=\"console\">\n$ jobs\n[1]-  Running                  command1 &\n[2]+  Stopped                  command2\n</syntaxhighlight>\n\nIn the output, the number in brackets refers to the job id. The plus sign signifies the default process for <code>bg</code> and <code>fg</code>. The text \"Running\" and \"Stopped\" refer to the [[Process state]]. The last string is the command that started the process. \n\nThe state of a process can be changed using various commands. The <code>fg</code> command brings a process to the foreground, while the <code>bg</code> sets a stopped process running in the background. <code>bg</code> and <code>fg</code> can take a job id as their first argument, to specify the process to act on. Without one, they use the default process, identified by a plus sign in the output of <code>jobs</code>. The <code>[[Kill_(command)|kill]]</code> command can be used to end a process prematurely, by sending it a [[Signal (IPC)|signal]]. The job id must be specified after a percent sign:\n\n<syntaxhighlight lang=\"bash\">\nkill -s SIGKILL %1 or kill -9 %1\n</syntaxhighlight>\n\n===Conditional execution===\nBash supplies \"conditional execution\" command separators that make execution of a command contingent on the [[Exit status|exit code]] set by a precedent command. For example:\n\n<syntaxhighlight lang=\"bash\">\ncd \"$SOMEWHERE\" && ./do_something || echo \"An error occurred\" >&2\n</syntaxhighlight>\n\nWhere ''./do_something'' is only executed if the ''cd'' (change directory) command was \"successful\" (returned an exit status of zero) and the ''echo'' command would only be executed if either the ''cd'' or the ''./do_something'' command return an \"error\" (non-zero exit status).\n\nFor all commands the exit status is stored in the special variable <code>$?</code>. Bash also supports {{code|2=bash|if ...;then ...;else ...;fi}} and {{code|2=bash|case $VARIABLE in $pattern)...;;$other_pattern)...;; esac}} forms of conditional command evaluation.\n\n===Bug reporting===\n{{Redirect|bashbug|the widely reported September 2014 bug found in Bash|Shellshock (software bug)}}\nAn external command called ''bashbug'' reports Bash shell bugs. When the command is invoked, it brings up the user's default editor with a form to fill in. The form is mailed to the Bash maintainers (or optionally to other email addresses).<ref>\n[http://linux.die.net/man/1/bashbug bashbug(1)], die.net\n</ref><ref>\n[https://developer.apple.com/library/prerelease/mac/documentation/Darwin/Reference/ManPages/man1/bashbug.1.html \"Linux / Unix Command: bashbug\"], apple.com\n</ref>\n\n===Programmable completion===\nBash programmable completion, <code>complete</code> and <code>compgen</code> commands<ref>https://tiswww.case.edu/php/chet/bash/bashref.html#Programmable-Completion</ref> have been available since the beta version of 2.04<ref>http://www.caliban.org/bash/index.shtml</ref> in 2000<ref>https://ftp.swin.edu.au/gnu/bash/</ref> and offers at least Pathname and filename completion.\n\n==Release history==\n{| class=\"wikitable\"\n|-\n! VERSION\n! RELEASE DATE\n|-\n| bash-5.0 \n| 2019-01-07\n|-\n| bash-5.0-rc1 \n| 2018-12-20\n|-\n| bash-5.0-beta2 \n| 2018-11-28\n|-\n| bash-5.0-beta \n| 2018-09-17\n|-\n| bash-5.0-alpha \n| 2018-05-22\n|-\n| bash-4.4 \n| 2016-09-15\n|-\n| bash-4.4-rc2 \n| 2016-08-22\n|-\n| bash-4.4-rc1 \n| 2016-02-24\n|-\n| bash-4.4-beta2 \n| 2016-07-11\n|-\n| bash-4.4-beta \n| 2015-10-12\n|-\n| bash-4.3 \n| 2014-02-26\n|-\n| bash-4.2 \n| 2011-02-13\n|-\n| bash-4.1 \n| 2009-12-31\n|-\n| bash-4.0 \n| 2009-02-20\n|-\n| bash-4.0-rc1 \n| 2009-01-12\n|-\n| bash-3.2 \n| 2006-10-11\n|-\n| bash-3.1 \n| 2005-12-08\n|-\n| bash-3.0 \n| 2004-08-03\n|-\n| bash-2.05b \n| 2002-07-17\n|-\n| bash-2.05a \n| 2001-11-16\n|-\n| bash-2.05 \n| 2001-04-09\n|-\n| bash-2.04 \n| 2000-03-21\n|-\n| bash-2.03 \n| 1999-02-19\n|-\n| bash-2.02 \n| 1998-04-18\n|-\n| bash-2.01 \n| 1997-06-05\n|-\n| bash-2.0 \n| 1996-12-31\n|}\n\n==See also==\n{{Portal|Free and open-source software}}\n* [[Comparison of command shells]]\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n{{Commons category|GNU Bash|Bash}}\n{{Wikibooks|Bash Shell Scripting}}\n* {{official website|https://www.gnu.org/software/bash/}}\n* [http://www.computerworld.com.au/article/222764/ 2008 interview with GNU Bash's maintainer, Chet Ramey]\n* [https://github.com/lanl/MPI-Bash MPI-Bash]: A [[Message_Passing_Interface|MPI]]-enabled plugin for the Bourne-Again Shell by [[Scott Pakin]]\n* [https://wiki.bash-hackers.org/scripting/bashchanges List of bash changes]\n\n{{GNU}}\n{{Unix shells}}{{Programming languages}}\n\n{{DEFAULTSORT:Bash (Unix Shell)}}\n[[Category:1989 software]]\n[[Category:Cross-platform free software]]\n[[Category:Domain-specific programming languages]]\n[[Category:Free software programmed in C]]\n[[Category:GNU Project software]]\n[[Category:Scripting languages]]\n[[Category:Text-oriented programming languages]]\n[[Category:Unix shells]]\n", "name_user": "Jacob's Crackers", "label": "safe", "comment": "\u2192\u200eProcess management:formatting and grammar", "url_page": "//en.wikipedia.org/wiki/Bash_(Unix_shell)"}
