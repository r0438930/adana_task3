{"title_page": "Comment (computer programming)", "text_new": "{{selfref|For comments in Wikipedia markup, see [[Help:Wiki markup#Character formatting]] and [[WP:COMMENT]].}}\n[[File:CodeCmmt002.svg|thumb|right|300px|An illustration of [[Java (programming language)|Java]] source code with '''prologue''' comments indicated in <span style=\"color:#f00;\">red</span> and '''inline''' comments in <span style=\"color:#0e850e;\">green</span>. '''Program code''' is in <span style=\"color:#00f;\"> blue</span>.]]\nIn [[computer programming]], a '''comment''' is a programmer-readable explanation or ''[[annotation]]'' in the [[source code]] of a [[computer program]].  They are added with the purpose of making the source code easier for humans to understand, and are generally ignored by [[compiler]]s and [[interpreter (computing)|interpreters]].<ref name=\"PennyGrubb000\">Source code can be divided into ''program code'' (which consists of machine-translatable instructions); and ''comments'' (which include human-readable notes and other kinds of annotations in support of the program code).{{cite book | last = Penny Grubb | first = Armstrong Takang | title = Software Maintenance: Concepts and Practice | publisher = World Scientific | year = 2003 | isbn = 978-981-238-426-3 | pages = 7, plese start120\u2013121}}</ref><ref>For purposes of this article, programming language comments are treated as indistinct from comments that appear in [[markup language]]s, [[configuration file]]s and other similar contexts. Moreover, markup language is often closely integrated with programming language code, especially in the context of [[Automatic programming|code generation]]. See e.g., {{cite book | last = Ganguli | first = Madhushree | title = Making Use of Jsp | publisher = Wiley | location = New York | year = 2002 | isbn = 978-0-471-21974-3 }}, {{cite book | last = Hewitt | first = Eben | title = Java for Coldfusion Developers | publisher = Pearson Education | location = Upper Saddle River | year = 2003 | isbn = 978-0-13-046180-3}}</ref> The [[comparison of programming languages (syntax)#Comments|syntax of comments]] in various programming languages varies considerably.\n\nComments are sometimes processed in various ways to generate documentation external to the source code itself by [[documentation generator]]s, or used for integration with [[Version control|source code management]] systems and other kinds of external [[programming tool]]s.\n\nThe flexibility provided by comments allows for a wide degree of variability, but formal conventions for their use are commonly part of programming style guides.\n\n== Overview ==\n\nComments are generally formatted as either ''block comments'' (also called ''prologue comments'' or ''stream comments'') or ''line comments'' (also called ''inline comments'').<ref name=\"JBDixit000\">{{cite book | last = Dixit | first = J.B. | title = Computer Fundamentals and Programming in C | publisher = Laxmi Publications | year = 2003 | isbn = 978-81-7008-882-0 }}</ref>\n\nBlock comments [[delimiter#Bracket delimiters|delimit]] a region of source code which may span multiple lines or a part of a single line. This region is specified with a ''start'' delimiter and an ''end'' delimiter. Some programming languages (such as [[MATLAB]]) allow block comments to be recursively nested inside one another, but others (such as [[Java (programming language)|Java]]) do not.<ref name=\"Higham000\">{{cite book\n| title     = MATLAB Guide\n| first     = Desmond\n| last      = Higham\n| publisher = SIAM\n| year      = 2005\n| isbn      = 978-0-89871-578-1\n}}</ref><ref name=\"Vermeulen000\">{{cite book\n| title      = The Elements of Java Style\n| first      = Al\n| last      = Vermeulen\n| publisher      = Cambridge University Press\n| year      = 2000\n| isbn      = 978-0-521-77768-1\n| url      = https://archive.org/details/elementsofjavast00verm\n}}</ref><ref name=\"javadude000\">{{cite web\n| title       = Using the right comment in Java\n| url         = http://javadude.com/articles/comments.html\n| accessdate  = 2007-07-24\n| date = 2000-03-04\n}}</ref>\n\nLine comments either start with a comment delimiter and continue until the end of the line, or in some cases, start at a specific column (character line offset) in the source code, and continue until the end of the line.<ref name=\"javadude000\" />\n\nSome programming languages employ both block and line comments with different comment delimiters.  For example, [[C++]] has block comments delimited by <code>/*</code> and <code>*/</code> that can span multiple lines and line comments delimited by <code>//</code>. Other languages support only one type of comment. For example, [[Ada (programming language)|Ada]] comments are line comments: they start with <code>--</code> and continue to the end of the line.<ref name=\"javadude000\" />\n\n==Uses==\n\nHow best to make use of comments is subject to dispute; different commentators have offered varied and sometimes opposing viewpoints.<ref name=\"Dietrich000\">{{cite book\n| last      = W. R.\n| first     = Dietrich\n| title     = Applied Pattern Recognition: Algorithms and Implementation in C++\n| publisher = Springer\n| year      = 2003\n| isbn      = 978-3-528-35558-6\n}} offers viewpoints on proper use of comments in source code. p. 66.</ref><ref name=\"Keyes000\">{{cite book\n| last      = Keyes\n| first     = Jessica\n| title     = Software Engineering Handbook\n| publisher = CRC Press\n| year      = 2003\n| isbn      = 978-0-8493-1479-7\n}} discusses comments and the \"Science of Documentation\" p. 256.</ref>\nThere are many different ways of writing comments and many commentators offer conflicting advice.<ref name=\"Keyes000\" />\n\n=== Planning and reviewing ===\nComments can be used as a form of [[pseudocode]] to outline intention prior to writing the actual code. In this case it should explain the logic behind the code rather than the code itself.\n.\n<syntaxhighlight lang=\"cpp\">/* loop backwards through all elements returned by the server \n(they should be processed chronologically)*/\nfor (i = (numElementsReturned - 1); i >= 0; i--) {\n    /* process each element's data */\n    updatePattern(i, returnedElements[i]);\n}\n</syntaxhighlight>\n\nIf this type of comment is left in, it simplifies the review process by allowing a direct comparison of the code with the intended results. A common logical fallacy is that code that is easy to understand does what it's ''supposed'' to do.\n\n=== Code description ===\nComments can be used to summarize code or to explain the programmer's intent. According to this school of thought, restating the code in plain English is considered superfluous; the need to re-explain code may be a sign that it is too complex and should be rewritten, or that the naming is bad.\n\n:\"Don't document bad code \u2013 rewrite it.\"<ref name=\"BadComment000\">''[[The Elements of Programming Style (book)|The Elements of Programming Style]]'', [[Brian Kernighan|Kernighan]] & [[P. J. Plauger|Plauger]]</ref>\n\n:\"Good comments don't repeat the code or explain it. They clarify its intent. Comments should explain, at a higher level of abstraction than the code, what you're trying to do.\"<ref name=\"GoodComment000\">''[[Code Complete]]'', [[Steve McConnell|McConnell]]</ref>\n\nComments may also be used to explain why a block of code does not seem to fit conventions or best practices.  This is especially true of projects involving very little development time, or in bug fixing.  For example:\n<syntaxhighlight lang=\"vb\">' Second variable dim because of server errors produced when reuse form data. No\n' documentation available on server behavior issue, so just coding around it.\nvtx = server.mappath(\"local settings\")\n</syntaxhighlight>\n\n=== Algorithmic description ===\n\nSometimes source code contains a novel or noteworthy solution to a specific problem. In such cases, comments may contain an explanation of the methodology. Such explanations may include diagrams and formal mathematical proofs. This may constitute explanation of the code, rather than a clarification of its intent; but others tasked with maintaining the code base may find such explanation crucial. This might especially be true in the case of highly specialized problem domains; or rarely used optimizations, constructs or function-calls.<ref name=\"AlgoComments\">{{cite book\n| last      = Spinellis\n| first     = Diomidis\n| title     = Code reading: The Open Source Perspective\n| publisher = Addison-Wesley\n| year      = 2003\n| isbn      = 978-0-201-79940-8\n}}</ref>\n\nFor example, a programmer may add a comment to explain why an [[insertion sort]] was chosen instead of a [[quicksort]], as the former is, in theory, slower than the latter. This could be written as follows:\n<syntaxhighlight lang=\"java\">\n list = [f (b), f (b), f (c), f (d), f (a), ...];\n // Need a stable sort. Besides, the performance really does not matter.\n insertion_sort (list);\n</syntaxhighlight>\n\n=== Resource inclusion ===<!--This header is linked externally, pls. no changey unless you fixy-->\n\n[[Logo]]s, diagrams, and [[flowchart]]s consisting of [[ASCII art]] constructions can be inserted into source code formatted as a comment.<ref name=\"asciiart000\">{{cite web\n| title       = CodePlotter 1.6 \u2013 Add and edit diagrams in your code with this 'Visio-like' tool\n| url       = http://www.codeproject.com/macro/codeplotter.asp\n| accessdate       = 2007-07-24\n| archive-url       = https://web.archive.org/web/20070714092702/http://www.codeproject.com/macro/codeplotter.asp\n| archive-date       = 2007-07-14\n| url-status       = dead\n}}</ref> Further, [[copyright]] notices can be embedded within source code as comments. Binary data may also be encoded in comments through a process known as [[binary-to-text encoding]], although such practice is uncommon and typically relegated to external resource files.\n\nThe following code fragment is a simple ASCII diagram depicting the process flow for a [[system administration]] script contained in a [[Windows Script File]] running under [[Windows Script Host]]. Although a section marking the code appears as a comment, the diagram itself actually appears in an [[XML]] [[CDATA]] section, which is technically considered distinct from comments, but can serve similar purposes.<ref name=\"Niederst000\">{{cite book\n| title     = Web Design in a Nutshell: A Desktop Quick Reference\n| first     = Jennifer\n| last      = Niederst\n| publisher = O'Reilly\n| year      = 2006\n| isbn      = 978-0-596-00987-8\n}}Sometimes the difference between a \"comment\" and other syntax elements of a programming or markup language entails subtle nuances. Niederst indicates one such situation by stating: \"Unfortunately, XML software thinks of comments as unimportant information and may simply remove the comments from a document before processing it. To avoid this problem, use an XML CDATA section instead.\"</ref>\n\n<syntaxhighlight lang=\"xml\">\n<!-- begin: wsf_resource_nodes -->\n<resource id=\"ProcessDiagram000\">\n<![CDATA[\n HostApp (Main_process)\n    |\n    V\nscript.wsf (app_cmd) --> ClientApp (async_run, batch_process)\n                |\n                |\n                V\n         mru.ini (mru_history)  \n]]>\n</resource>\n</syntaxhighlight>\n\nAlthough this identical diagram could easily have been included as a comment, the example illustrates one instance where a programmer may opt not to use comments as a way of including resources in source code.<ref name=\"Niederst000\" />\n\n=== Metadata ===\n{{main | Metadata }}\n\nComments in a computer program often store metadata about a program file.\n\nIn particular, many [[software maintainer]]s put submission guidelines in comments to help people who read the source code of that program to send any improvements they make back to the maintainer.\n\nOther metadata includes:\nthe name of the creator of the original version of the program file and the date when the first version was created,\nthe name of the current maintainer of the program,\nthe names of other people who have edited the program file so far,\nthe URL of documentation about how to use the program,\nthe name of the [[software license]] for this program file,\netc.\n\nWhen an algorithm in some section of the program is based on a description in a book or other reference, comments can be used to give the page number and title of the book or [[Request for Comments]] or other reference.\n\n{{anchor|Comment out}} <!-- [[Comment out]] redirects here -->\n=== Debugging ===\n\nA common developer practice is to ''comment out'' a [[snippet (programming)|code snippet]], meaning to add comment syntax causing that block of code to become a comment, so that it will not be executed in the final program. This may be done to exclude certain pieces of code from the final program, or (more commonly) it can be used to find the source of an error. By systematically commenting out and running parts of the program, the source of an error can be determined, allowing it to be corrected.\n\nAn example of commenting out code for exclusion purposes is below:\n\n<syntaxhighlight lang=\"C\">\n if (opt.equals (\"e\"))\n   opt_enabled = true;\n\n /*\n if (opt.equals (\"d\"))\n   opt_debug = true;\n */\n\n if (opt.equals (\"v\"))\n    opt_verbose = true;\n\n</syntaxhighlight>\nThe above code fragment suggests that the programmer opted to disable the debugging option for some reason.\n\nMany [[Integrated development environment|IDEs]] allow quick adding or removing such comments with single menu options or key combinations. The programmer has only to mark the part of text they want to (un)comment and choose the appropriate option.\n\n===Automatic documentation generation===\n{{main|Documentation generator}}\n[[Programming tool]]s sometimes store documentation and [[metadata]] in comments.<ref>See e.g., {{cite book | last = Wynne-Powell | first = Rod | title = Mac Os X for Photographers: Optimized Image Workflow for the Mac User | publisher = Focal Press | location = Oxford | year = 2008 | isbn = 978-0-240-52027-8 | url = https://archive.org/details/macosxforphotogr0000wynn }} page 243</ref> These may include insert positions for automatic header file inclusion, commands to set the file's [[syntax highlighting]] mode,<ref>{{cite book | last = Lamb | first = Linda | title = Learning the VI Editor | publisher = O'Reilly & Associates | location = Sebastopol | year = 1998 | isbn = 978-1-56592-426-0 | url = https://archive.org/details/learningvieditor00lamb }} describes the use of modeline syntax in Vim configuration files.</ref> or the file's [[revision control|revision number]].<ref>See e.g., {{cite book | last = Berlin | first = Daniel | title = Practical Subversion, Second Edition | publisher = APress | location = Berkeley | year = 2006 | isbn = 978-1-59059-753-8 }} page 168.</ref> These functional control comments are also commonly referred to as [[annotation]]s. Keeping documentation within source code comments is considered as one way to simplify the documentation process, as well as increase the chances that the documentation will be kept up to date with changes in the code.<ref name=\"Ambler000\">{{cite book\n| title     = The Object Primer: Agile Model-Driven Development with UML 2.0\n| first     = Scott\n| last      = Ambler\n| publisher = Cambridge University Press\n| year      = 2004\n| isbn      = 978-1-397-80521-8\n}}</ref>\n\nExamples of documentation generators include the programs [[Javadoc]] for use with [[Java (programming language)|Java]], [[Ddoc]] for [[D (programming language)|D]], [[Doxygen]] for [[C (programming language)|C]], [[C++]], Java, [[interface description language|IDL]], [[Visual Expert]] for [[PL/SQL]], [[Transact-SQL]], [[PowerBuilder]] and [[PHPDoc]] for [[PHP]]. Forms of [[docstring]] are supported by [[Python (programming language)|Python]], [[Lisp (programming language)|Lisp]], [[Elixir (programming language)|Elixir]], and [[Clojure]].<ref>[https://clojure.github.com/clojure/clojure.core-api.html#clojure.core/defn Function definition with docstring in Clojure]</ref>\n\n[[C Sharp (programming language)|C#]], [[F Sharp (programming language)|F#]] and [[Visual Basic .NET]] implement a similar feature called \"XML Comments\" which are read by [[IntelliSense]] from the compiled [[.NET Framework|.NET]] assembly.<ref>{{cite book|last=Murach|title=C# 2005|page=56}}</ref>\n\n=== Syntax extension ===\n\nOccasionally syntax elements that were originally intended to be comments are re-purposed to convey additional information to a program, such as \"[[conditional comment]]s\".\nSuch \"hot comments\" may be the only practical solution that maintains backward-compatibility, but are widely regarded as a [[kludge]].<ref>\n[[c2: HotComments]]\n</ref>\n\n===Directive uses===\nThere are cases where the normal comment characters are co-opted to create a special [[Directive (programming)|directive]] for an editor or interpreter. \n\nTwo examples of this directing an interpreter are:\n\n* The Unix \"[[shebang (Unix)|shebang]]\" \u2013 <code>#!</code> \u2013 used on the first line of a script to point to the interpreter to be used.\n* \"Magic comments\" identifying the encoding a source file is using,<ref>{{cite web |title=class Encoding |url=https://docs.ruby-lang.org/en/2.4.0/Encoding.html |website=Ruby |publisher=ruby-lang.org |accessdate=5 December 2018}}</ref> e.g. Python's PEP 263.<ref>{{cite web |title=PEP 263 \u2013 Defining Python Source Code Encodings |url=https://www.python.org/dev/peps/pep-0263/ |publisher=Python.org |accessdate=5 December 2018}}</ref>\n\nThe script below for a Unix-like system shows both of these uses:\n<syntaxhighlight lang=\"bash\">\n#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\nprint(\"Testing\")\n</syntaxhighlight>\n\nSomewhat similar is the use of comments in C to communicate to a compiler that a default \"fallthough\" in a [[case statement]] has been done deliberately:\n<syntaxhighlight lang=\"c\">\nswitch (command) {\n    case CMD_SHOW_HELP_AND_EXIT:\n      do_show_help();\n      /* Fall thru */\n    case CMD_EXIT:\n      do_exit();\n      break;\n    case CMD_OTHER:\n      do_other();\n      break;\n    /* ... etc. ... */\n  }\n</syntaxhighlight>\nInserting such a <code>/* Fall thru */</code> comment for human readers was a already a common convention, but in 2017 the [[GNU Compiler Collection|gcc]] compiler began looking for these (or other indications of deliberate intent), and, if not found, emitting: \"warning: this statement may fall through\".<ref>{{cite web |last1=Polacek |first1=Marek |title=-Wimplicit-fallthrough in GCC 7 |url=https://developers.redhat.com/blog/2017/03/10/wimplicit-fallthrough-in-gcc-7/ |website=Red Hat Developer |publisher=Red Hat |accessdate=10 February 2019|date=2017-03-10 }}</ref> Compiler-dependent comments which switch off warnings have existed for decades.{{cn|date=February 2019}}\n\n===Stress relief===\nSometimes programmers will add comments as a way to relieve stress by commenting about development tools, competitors, employers, working conditions, or the quality of the code itself.<ref>[http://www.businessinsider.com.au/microsoft-hidden-messages-in-word-and-ms-dos-2014-3?r=US&IR=T \"Microsoft Programmers Hid A Bunch Of Profanity In Early Software Code\"], Lisa Eadicicco, 27 March 2014, businessinsider.com.au</ref> The occurrence of this phenomenon can be easily seen from online resources that track [[profanity]] in source code.<ref name=\"SwearWords\">(see e.g., [http://www.vidarholen.net/contents/wordcount/ Linux Swear Count]).</ref>\n\n==Normative views==\nThere are various normative views and long-standing opinions regarding the proper use of comments in source code.<ref>{{cite book | last = Goodliffe | first = Pete | title = Code Craft | publisher = No Starch Press | location = San Francisco | year = 2006 | isbn = 978-1-59327-119-0 }}</ref><ref>{{cite book | last = Smith | first = T. | title = Intermediate Programming Principles and Techniques Using Pascal | publisher = West Pub. Co | location = Belmont | year = 1991 | isbn = 978-0-314-66314-6 }}</ref> Some of these are informal and based on personal preference, while others are published or promulgated as formal guidelines for a particular community.<ref>See e.g., {{cite book | last = Koletzke | first = Peter | title = Oracle Developer Advanced Forms & Reports | publisher = Osborne/McGraw-Hill | location = Berkeley | year = 2000 | isbn = 978-0-07-212048-6 }} page 65.</ref>\n\n===Need for comments===\nExperts have varying viewpoints on whether, and when, comments are appropriate in source code.<ref name=\"BadComment000\" /><ref name=\"BadComments001\">{{cite web\n| title       = Worst Practice - Bad Comments\n| url         = http://www.sqlservercentral.com/columnists/awarren/worstpracticebadcomments.asp\n| accessdate  = 2007-07-24\n}}</ref> Some assert that source code should be written with few comments, on the basis that the source code should be self-explanatory or [[self-documenting]].<ref name=\"BadComment000\" /> Others suggest code should be extensively commented (it is not uncommon for over 50% of the non-[[whitespace (computer science)|whitespace]] characters in source code to be contained within comments).<ref name=\"Morelli000\">{{cite book\n| title     = Java, Java, Java: object-oriented problem solving\n| first     = Ralph\n| last      = Morelli\n| publisher = Prentice Hall College\n| year      = 2006\n| isbn      = 978-0-13-147434-5\n}}</ref><ref name=\"Javadoc000\">{{cite web\n| title       = How to Write Doc Comments for the Javadoc Tool\n| url         = http://java.sun.com/j2se/javadoc/writingdoccomments/\n| accessdate  = 2007-07-24\n}} Javadoc guidelines specify that comments are crucial to the platform. Further, the appropriate level of detail is fairly well-defined: \"We spend time and effort focused on specifying boundary conditions, argument ranges and corner cases rather than defining common programming terms, writing conceptual overviews, and including examples for developers.\"</ref>\n\nIn between these views is the assertion that comments are neither beneficial nor harmful by themselves, and what matters is that they are correct and kept in sync with the source code, and omitted if they are superfluous, excessive, difficult to maintain or otherwise unhelpful.<ref name=\"techniques001\">{{cite book\n| title     = Techniques of Program Structure and Design\n| first     = Edward\n| last      = Yourdon\n| publisher = University of Michigan\n| year      = 2007\n| id        = 013901702X\n}}Non-existent comments can make it difficult to comprehend code, but comments may be detrimental if they are obsolete, redundant, incorrect or otherwise make it more difficult to comprehend the intended purpose for the source code.</ref><ref name=\"CmmtPhilosophy\">{{cite book\n| last      = Dewhurst \n| first     = Stephen C\n| title     = C++ Gotchas: Avoiding Common Problems in Coding and Design\n| publisher = Addison-Wesley Professional\n| year      = 2002\n| isbn      = 978-0-321-12518-7\n}}</ref>\n\nComments are sometimes used to document contracts in the [[design by contract]] approach to programming.\n\n=== Level of detail ===\nDepending on the intended audience of the code and other considerations, the level of detail and description may vary considerably.\n\nFor example, the following Java comment would be suitable in an introductory text designed to teach beginning programming:\n\n    <syntaxhighlight lang=\"java\">\n    String s = \"Wikipedia\"; /* Assigns the value \"Wikipedia\" to the variable s. */\n    </syntaxhighlight>\n\nThis level of detail, however, would not be appropriate in the context of production code, or other situations involving experienced developers. Such rudimentary descriptions are inconsistent with the guideline: \"Good comments ... clarify intent.\"<ref name=\"GoodComment000\" /> Further, for professional coding environments, the level of detail is ordinarily well-defined to meet a specific performance requirement defined by business operations.<ref name=\"Javadoc000\" />\n\n==Styles==\nThere are many stylistic alternatives available when considering how comments should appear in source code. For larger projects involving a team of developers, comment styles are either agreed upon before a project starts, or evolve as a matter of convention or need as a project grows. Usually programmers prefer styles that are consistent, non-obstructive, easy to modify, and difficult to break.<ref name=\"gnome000\">{{cite web\n| title       = Coding Style\n| url       = http://developer.gnome.org/doc/guides/programming-guidelines/code-style.html\n| accessdate       = 2007-07-24\n| archive-url       = https://web.archive.org/web/20070808173421/http://developer.gnome.org/doc/guides/programming-guidelines/code-style.html\n| archive-date       = 2007-08-08\n| url-status       = dead\n}}</ref>\n\n===Block comment===\nThe following code fragments in C demonstrate just a tiny example of how comments can vary stylistically, while still conveying the same basic information:\n<syntaxhighlight lang=\"c\">\n/*\n     This is the comment body.\n     Variation One.\n*/\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"c\">\n/***************************\\\n*                           *\n* This is the comment body. *\n* Variation Two.            *\n*                           *\n\\***************************/\n</syntaxhighlight>\n\nFactors such as personal preference, flexibility of programming tools, and other considerations tend to influence the stylistic variants used in source code. For example, Variation Two might be disfavored among programmers who do not have [[source code editor]]s that can automate the alignment and visual appearance of text in comments.\n\nSoftware consultant and technology commentator Allen Holub<ref name=\"Holub000\">{{cite web\n| title       = Allen Holub\n| url       = http://www.holub.com/company/allen_holub.html\n| url-status       = dead\n| accessdate       = 2007-07-24\n| archive-url       = https://web.archive.org/web/20070720153845/http://www.holub.com/company/allen_holub.html\n| archive-date       = 2007-07-20\n}}</ref> is one expert who advocates aligning the left edges of comments:<ref name=\"Holub001\">Allen Holub, ''Enough Rope to Shoot Yourself in the Foot'', {{ISBN|0-07-029689-8}}, 1995, McGraw-Hill</ref>\n\n <syntaxhighlight lang=\"c\">\n /* This is the style recommended by Holub for C and C++.\n  * It is demonstrated in ''Enough Rope'', in rule 29.\n  */\n </syntaxhighlight>\n\n <syntaxhighlight lang=\"c\">\n /* This is another way to do it, also in C.\n ** It is easier to do in editors that do not automatically indent the second\n ** through last lines of the comment one space from the first.\n ** It is also used in Holub's book, in rule 31.\n */\n </syntaxhighlight>\n\nThe use of /* and */ as block comment delimiters was inherited from PL/I into the B programming language, the immediate predecessor of the C programming language.<ref name=\"Thompson1972\">\n{{cite web\n| title = Users' Reference to B\n| author = Ken Thompson\n| url = https://www.bell-labs.com/usr/dmr/www/kbman.html\n| accessdate = 2017-07-21\n}}</ref>\n\n===Line comments===\nLine comments generally use an arbitrary [[delimiter]] or sequence of [[token (parser)|tokens]] to indicate the beginning of a comment, and a [[newline]] character to indicate the end of a comment.\n\nIn this example, all the text from the ASCII characters // to the end of the line is ignored.\n<syntaxhighlight lang=\"c\">\n// -------------------------\n// This is the comment body.\n// -------------------------\n</syntaxhighlight>\n\nOften such a comment has to begin at far left and extend to the whole line. However in many languages, it is also possible to put a comment ''inline'' with a command line, to add a comment to it \u2013 as in this Perl example:\n<syntaxhighlight lang=\"Perl\">\nprint $s . \"\\n\";     # Add a newline character after printing\n</syntaxhighlight>\n\nIf a language allows both line comments and block comments, programming teams may decide upon a convention of using them differently: e.g. line comments only for minor comments, and  block comments to describe higher-level abstractions.\n\n==Tags==\nProgrammers may use informal [[tag (metadata)|tags]] in comments to assist in indexing common issues. They may then be able to be searched for with common programming tools, such as the [[Unix]] [[grep]] utility or even [[Syntax highlighting|syntax-highlighted]] within [[text editor]]s. These are sometimes referred to as \"codetags\"<ref>[https://www.python.org/dev/peps/pep-0350/#what-are-codetags \"PEP 0350 \u2013 Codetags\"], Python Software Foundation</ref><ref>[https://medium.com/@eido.askayo/never-forget-anything-before-after-and-while-coding-98d187ae4cf1 \"Never Forget Anything Before, After and While Coding\"], Using \"codetag\" comments as productive remainders</ref> or \"tokens\".<ref>[https://msdn.microsoft.com/en-us/library/txtwdysk.aspx#tokenscomments \"Using the Task List\"], msdn.microsoft.com</ref>\n\nSuch tags differ widely, but might include:\n* BUG \u2013 a known [[software bug|bug]] that should be corrected.\n* FIXME \u2013 should be corrected.\n* HACK \u2013 a workaround.\n* TODO \u2013 something to be done.\n* UNDONE \u2013 a reversal or \"roll back\" of previous code.\n* XXX \u2013 warn other programmers of problematic or misguiding code\n\n==Examples==\n\n===Comparison===\n{{main|Comparison of programming languages (syntax)#Comments}}\n\nTypographic conventions to specify comments vary widely. Further, individual programming languages sometimes provide unique variants. For a detailed review, please consult the [[comparison of programming languages (syntax)#Comments|programming language comparison]] article.\n\n====Ada====\n\nThe [[Ada (programming language)|Ada]] programming language uses '--' to indicate a comment up to the end of the line.\n\nFor example:\n<syntaxhighlight lang=\"ada\">\n  -- the air traffic controller task takes requests for takeoff and landing\n   task type Controller (My_Runway: Runway_Access) is\n      -- task entries for synchronous message passing\n      entry Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access);\n      entry Request_Approach(ID: in Airplane_ID; Approach: out Runway_Access);\n   end Controller;\n</syntaxhighlight>\n====APL====\n\n[[APL (programming language)|APL]] uses <code>\u235d</code> to indicate a comment up to the end of the line.\n\nFor example:\n<syntaxhighlight lang=\"apl\">\n\u235d Now add the numbers:\nc\u2190a+b \u235d addition\n</syntaxhighlight>\n\nIn dialects that have the <code>\u22a3</code> (\"left\") and <code>\u22a2</code> (\"right\") primitives, comments can often be ''inside'' or separate statements, in the form of ignored strings:\n<syntaxhighlight lang=\"apl\">\nd\u21902\u00d7c \u22a3'where'\u22a2 c\u2190a+ 'bound'\u22a2 b\n</syntaxhighlight>\n\n====AppleScript====\nThis section of [[AppleScript]] code shows the two styles of comments used in that language.\n<syntaxhighlight lang=\"AppleScript\">\n(*\nThis program displays a greeting.\n*)\non greet(myGreeting)\n     display dialog myGreeting & \" world!\"\nend greet\n\n-- Show the greeting\ngreet(\"Hello\")\n</syntaxhighlight>\n\n====BASIC====\nIn this classic early [[BASIC]] code fragment the REM (''\"Remark\"'') keyword is used to add comments.\n<syntaxhighlight lang=\"basic\">\n10 REM This BASIC program shows the use of the PRINT and GOTO Statements.\n15 REM It fills the screen with the phrase \"HELLO\"\n20 PRINT \"HELLO\"\n30 GOTO 20\n</syntaxhighlight>\n\nIn later [[Microsoft]] BASICs, including [[Quick Basic]], [[Q Basic]], [[Visual Basic]], [[Visual Basic .NET]], and [[VB Script]]; and in descendants such as [[Free BASIC]] and [[Gam bas]] any text on a line after an ' (apostrophe) character is also treated as a comment.\n\nAn example in Visual Basic .NET:\n<syntaxhighlight lang=\"vbnet\">\nPublic Class Form1\n    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n        ' The following code is executed when the user\n        ' clicks the button in the program's window.\n        rem comments still exist.\n\n        MessageBox.Show(\"Hello, World\") 'Show a pop-up window with a greeting\n    End Sub\nEnd Class\n</syntaxhighlight>\n\n====C====\nThis [[C (programming language)|C]] code fragment demonstrates the use of a prologue comment or \"block comment\" to describe the purpose of a [[conditional (programming)|conditional statement]]. The comment explains key terms and concepts, and includes a short signature by the programmer who authored the code.\n<syntaxhighlight lang=\"c\">\n /*\n  * Check if we are over our maximum process limit, but be sure to\n  * exclude root. This is needed to make it possible for login and\n  * friends to set the per-user process limit to something lower\n  * than the amount of processes root is running. -- Rik\n  */\n if (atomic_read(&p->user->processes) >= p->rlim[RLIMIT_NPROC].rlim_cur\n     && !capable(CAP_SYS_ADMIN) && !capable(CAP_SYS_RESOURCE))\n     goto bad_fork_free;\n</syntaxhighlight>\n\nSince C99, it has also been possible to use the // syntax from C++, indicating a single-line comment.\n\n====Cisco IOS and IOS-XE configuration====\nThe [[exclamation point]] ('''!''') may be used to mark comments in a Cisco router's configuration mode, however such comments are ''not'' saved to [[non-volatile memory]] (which contains the startup-config), nor are they displayed by the \"show run\" command.<ref>{{cite web|url=https://learningnetwork.cisco.com/thread/71302|title=Leave a comment in running-config|work=Cisco Learning Network (discussion forum)}}</ref><ref>{{cite web|url =http://www.cisco.com/c/en/us/td/docs/ios-xml/ios/config-mgmt/configuration/xe-3s/asr903/config-mgmt-xe-3s-asr903-book/cm-config-files.html|ref=GUID-657D5FD4-32C5-444C-BCE0-BC2CC1069005|title=Managing Configuration Files Configuration Guide, Cisco IOS XE Release 3S (ASR 900 Series)}}</ref>\n\nIt is possible to insert [[human-readable]] content that is actually part of the configuration, and may be saved to the [[NVRAM]] startup-config via:\n*  The \"description\" command, used to add a description to the configuration of an interface or of a [[BGP]] neighbor\n* The \"name\" parameter, to add a remark to a static route\n* The \"remark\" command in access lists\n\n<syntaxhighlight lang=\"text\">\n! Paste the text below to reroute traffic manually\nconfig t\nint gi0/2\nno shut\nip route 0.0.0.0 0.0.0.0 gi0/2 name ISP2\nno ip route 0.0.0.0 0.0.0.0 gi0/1 name ISP1\nint gi0/1\nshut\nexit\n</syntaxhighlight>\n\n====ColdFusion====\n[[ColdFusion]] uses comments similar to [[HTML comment]]s, but instead of two dashes, it uses three. These comments are caught by the ColdFusion engine and not printed to the browser.\n\n<syntaxhighlight lang=\"cfm\">\n <!--- This prints \"Hello World\" to the browser. --->\n <cfoutput>\n   Hello World<br />\n </cfoutput>\n</syntaxhighlight>\n\n====Fortran IV====\nThis [[Fortran IV]] code fragment demonstrates how comments are used in that language, which is very column-oriented. A letter \"C\" in column 1 causes the entire line to be treated as a comment.\n\n<syntaxhighlight lang=\"fortranfixed\">\nC\nC Lines that begin with 'C' (in the first or 'comment' column) are comments\nC\n      WRITE (6,610)\n  610 FORMAT(12H HELLO WORLD)\n      END\n</syntaxhighlight>\n\nNote that the columns of a line are otherwise treated as four fields: 1 to 5 is the label field, 6 causes the line to be taken as a continuation of the previous statement; and declarations and statements go in 7 to 72.\n\n====Fortran 90====\nThis [[Fortran]] code fragment demonstrates how comments are used in that language, with the comments themselves describing the basic formatting rules.\n<syntaxhighlight lang=\"Fortran\">\n!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n!* All characters after an exclamation mark are considered as comments *\n!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nprogram comment_test\n    print '(A)', 'Hello world' ! Fortran 90 introduced the option for inline comments.\nend program\n</syntaxhighlight>\n\n====Haskell====\nLine comments in Haskell start with '--' (two hyphens) until the end of line, and multiple line comments start with '{-' and end with '-}'.\n<syntaxhighlight lang=\"Haskell\">\n{- this is a comment\non more lines -}\n-- and this is a comment on one line\nputStrLn \"Wikipedia\"  -- this is another comment\n</syntaxhighlight>\n\nHaskell also provides a [[literate programming]] method of commenting known as \"Bird Style\".<ref>{{cite web |url=http://www.haskell.org/haskellwiki/Literate_programming#Bird_Style |title=Literate programming |website=haskell.org}}</ref> In this all lines starting with > are interpreted as code, everything else is considered a comment. One additional requirement is that you always leave a blank line before and after the code block:\n\n<syntaxhighlight lang=\"lHaskell\">\nIn Bird-style you have to leave a blank before the code.\n\n> fact :: Integer -> Integer\n> fact 0 = 1\n> fact (n+1) = (n+1) * fact n\n\nAnd you have to leave a blank line after the code as well.\n</syntaxhighlight>\nLiterate programming can also be done in Haskell, using [[LaTeX]].  The code environment can be used instead of the Richard Bird's style:\nIn [[LaTeX]] style this is equivalent to the above example, the code environment could be defined in the LaTeX preamble. Here is a simple definition:\n<syntaxhighlight lang=\"lHaskell\">\n\\usepackage{verbatim}\n\\newenvironment{code}{\\verbatim}{\\endverbatim}\n</syntaxhighlight>\nlater in\n<syntaxhighlight lang=\"lhaskell\">\n% the LaTeX source file\nThe \\verb|fact n| function call computes $n!$ if $n\\ge 0$, here is a definition:\\\\\n\\begin{code}\nfact :: Integer -> Integer\nfact 0 = 1\nfact (n+1) = (n+1) * fact n\n\\end{code}\nHere more explanation using \\LaTeX{} markup\n</syntaxhighlight>\n\n====Java====\nThis [[Java (programming language)|Java]] code fragment shows a block comment used to describe the <code>setToolTipText</code> method. The formatting is consistent with [[Sun Microsystems]] [[Javadoc]] standards. The comment is designed to be read by the Javadoc processor.\n<syntaxhighlight lang=\"java\">\n/**\n * This is a block comment in Java.\n * The setToolTipText method registers the text to display in a tool tip.\n * The text is displayed when the cursor lingers over the component.\n *\n * @param text  The string to be displayed.  If 'text' is null,\n *              the tool tip is turned off for this component.\n */\npublic void setToolTipText(String text) {\n    // This is an inline comment in Java. TODO: Write code for this method.\n}\n</syntaxhighlight>\n\n====JavaScript====\n[[JavaScript (programming language)|JavaScript]] uses // to precede comments and /* */ for multi-line comments.\n\n<syntaxhighlight lang=\"javascript\">\n// A single line JavaScript comment\nvar iNum = 100;\nvar iTwo = 2; // A comment at the end of line\n/*\nmulti-line\nJavaScript comment\n*/\n</syntaxhighlight>\n\n====Lua====\nThe [[Lua (programming language)|Lua]] programming language uses double-hyphens, <code>--</code>, for single line comments in a similar way to [[Ada (programming language)|Ada]], [[Eiffel (programming language)|Eiffel]], [[Haskell (programming language)|Haskell]], [[SQL]] and [[VHDL]] languages. Lua also has block comments, which start with <code>--[[</code> and run until a closing <code>]]</code>\n\nFor example:\n\n<syntaxhighlight lang=\"lua\">\n--[[A multi-line\nlong comment\n]]\nprint(20)   -- print the result\n</syntaxhighlight>\n\nA common technique to comment out a piece of code,<ref>{{Cite web|url=http://www.lua.org/pil/1.3.html|title=Programming in Lua 1.3|website=www.Lua.org|access-date=2017-11-08}}</ref> is to enclose the code between <code>--[[</code> and\n<code>--]]</code>, as below:\n\n<syntaxhighlight lang=\"lua\">\n--[[\nprint(10)\n--]]\n-- no action (commented out)\n</syntaxhighlight>\n\nIn this case, it's possible to reactivate the code by adding a single hyphen to the first line:\n\n<syntaxhighlight lang=\"lua\">\n---[[\nprint(10)\n--]]\n--> 10\n</syntaxhighlight>\n\nIn the first example, the <code>--[[</code> in the first line starts a long comment, and the two hyphens in the last line\nare still inside that comment. In the second example, the sequence <code>---[[</code> starts an ordinary, single-line\ncomment, so that the first and the last lines become independent comments. In this case, the <code>print</code> is\noutside comments. In this case, the last line becomes an independent comment, as it starts with <code>--</code>.\n\nLong comments in Lua can be more complex than these, as you can read in the section called \"Long strings\" c.f. ''Programming in Lua''.\n\n====MATLAB====\nIn [[MATLAB]]'s programming language, the '%' character indicates a single-line comment.  Multi line comments are also available via %{ and %} brackets and can be nested, e.g.\n\n<syntaxhighlight lang=\"matlab\">\n% These are the derivatives for each term\nd = [0 -1 0];\n\n%{\n  %{\n    (Example of a nested comment, indentation is for cosmetics (and ignored).)\n  %}\n  We form the sequence, following the Taylor formula.\n  Note that we're operating on a vector.\n%}\nseq = d .* (x - c).^n ./(factorial(n))\n\n% We add-up to get the Taylor approximation\napprox = sum(seq)\n</syntaxhighlight>\n\n====OCaml====\n[[OCaml]] uses nestable comments, which is useful when commenting a code block.\n<syntaxhighlight lang=\"ocaml\">\ncodeLine(* comment level 1(*comment level 2*)*)\n</syntaxhighlight>\n\n====Pascal====\n\nIn Niklaus Wirth's [[Pascal (programming language)|pascal]] family of languages (including [[Modula-2]] and [[Oberon (programming language)|Oberon]]), comments are opened with '(*' and completed with '*)'.\n\nfor example:\n<syntaxhighlight lang=\"pascal\">\n(* test diagonals *)\ncolumnDifference := testColumn - column;\nif (row + columnDifference = testRow) or\n    .......\n</syntaxhighlight>In modern dialects of Pascal, '{' and '}' are used instead.<ref>{{Cite web|url=https://www.freepascal.org/docs-html/3.0.0/ref/refse2.html|title=Comments|website=www.freepascal.org|access-date=2017-09-20}}</ref>\n\n====Perl====\nLine comments in [[Perl]], and many other [[scripting language]]s, begin with a hash (#) symbol. \n<syntaxhighlight lang=\"perl\">\n# A simple example\n# \nmy $s = \"Wikipedia\"; # Sets the variable s to \"Wikipedia\".\nprint $s . \"\\n\";     # Add a newline character after printing\n</syntaxhighlight>\n\nInstead of a regular block commenting construct, Perl uses [[Plain Old Documentation]], a markup language for [[literate programming]],<ref>\n{{cite web\n| title = perlpod \u2013 the Plain Old Documentation format\n| url = http://perldoc.perl.org/perlpod.html|accessdate=2011-09-12\n}}\n</ref> for instance:<ref>\n{{cite web\n| title = Pod::ParseUtils \u2013 helpers for POD parsing and conversion\n| url = http://search.cpan.org/~bradapp/PodParser-1.20/lib/Pod/ParseUtils.pm|accessdate=2011-09-12\n}}</ref>\n<syntaxhighlight lang=\"perl\">\n=item Pod::List-E<gt>new()\n\nCreate a new list object. Properties may be specified through a hash\nreference like this:\n\n  my $list = Pod::List->new({ -start => $., -indent => 4 });\n\nSee the individual methods/properties for details.\n\n=cut\n\nsub new {\n    my $this = shift;\n    my $class = ref($this) || $this;\n    my %params = @_;\n    my $self = {%params};\n    bless $self, $class;\n    $self->initialize();\n    return $self;\n}\n</syntaxhighlight>\n\n====Raku====\n[[Raku (programming language)|Raku]] (previously called Perl 6) uses the same line comments and POD Documentation comments as regular [[Perl]] (see Perl section above), but adds a configurable block comment type: \"multi-line / embedded comments\".<ref name=perl6>\n{{cite web\n| title = Perl 6 Documentation \u2013 Syntax (Comments)\n| url = https://docs.perl6.org/language/syntax#Comments|accessdate=2017-04-06\n}}\n</ref>\n\nThese start with a hash character, followed by a backtick, and then some opening bracketing character, and end with the matching closing bracketing character.<ref name=perl6 /> The content can not only span multiple lines, but can also be embedded inline.\n<syntaxhighlight lang=\"perl6\">\n#`{{ \"commenting out\" this version \ntoggle-case(Str:D $s)\n\nToggles the case of each character in a string:\n\n  my Str $toggled-string = toggle-case(\"mY NAME IS mICHAEL!\");\n\n}}\n\nsub toggle-case(Str:D $s) #`( this version of parens is used now ){\n    ...\n}\n</syntaxhighlight>\n\n====PHP====\nComments in [[PHP]] can be either in C++ style (both inline and block), or use hashes.  [[PHPDoc]] is a style adapted from Javadoc and is a common standard for documenting PHP code.\n\n====PowerShell====\nComments in [[Windows PowerShell]]\n\n<syntaxhighlight lang=\"powershell\">\n# Single line comment\nWrite-Host \"Hello, World!\"\n\n<# Multi\n   Line\n   Comment #>\n\nWrite-Host \"Goodbye, world!\"\n</syntaxhighlight>\n\n====Python====\nInline comments in [[Python (programming language)|Python]] use the hash (#) character, as in the two examples in this code: \n\n<syntaxhighlight lang=\"python\">\n# This program prints \"Hello World\" to the screen\nprint(\"Hello World!\")  # Note the new syntax\n</syntaxhighlight>\n\nBlock comments, as defined in this article, don't technically exist in Python.<ref>{{cite web |url=https://www.tutorialdocs.com/tutorial/python3/python3-basic-syntax.html |title=Python 3 Basic Syntax |accessdate=25 February 2019 |quote=Triple quotes are treated as regular strings with the exception that they can span multiple lines. By regular strings I mean that if they are not assigned to a variable they will be immediately garbage collected as soon as that code executes. hence are not ignored by the interpreter in the same way that #a comment is.}}</ref> A bare [[string literal]] represented by a triple-quoted string can be used<ref>[https://twitter.com/gvanrossum/status/112670605505077248 \"Python tip: You can use multi-line strings as multi-line comments\"], 11 September 2011, Guido van Rossum</ref> but is not ignored by the interpreter in the same way that \"#\" comment is. In the examples below, the triple double-quoted strings act in this way as comments, but are also treated as [[docstring]]s:\n\n<syntaxhighlight lang=\"python\">\n\"\"\"\nAssuming this is file mymodule.py, then this string, being the\nfirst statement in the file, will become the \"mymodule\" module's\ndocstring when the file is imported.\n\"\"\"\n\nclass MyClass(object):\n    \"\"\"The class's docstring\"\"\"\n\n    def my_method(self):\n        \"\"\"The method's docstring\"\"\"\n\ndef my_function():\n    \"\"\"The function's docstring\"\"\"\n</syntaxhighlight>\n\n====Ruby====\nComments in [[Ruby (programming language)|Ruby]].\n\nSingle line commenting: (line starts with hash \"#\")\n<syntaxhighlight lang=\"ruby\">\nputs \"This is not a comment\"\n\n# this is a comment\n\nputs \"This is not a comment\"\n</syntaxhighlight>\n\nMulti-line commenting: (comments goes between keywords \"begin\" and \"end\")\n<syntaxhighlight lang=\"Ruby\">\nputs \"This is not a comment\"\n\n=begin\n\nwhatever goes in these lines\n\nis just for the human reader\n\n=end\n\nputs \"This is not a comment\"\n</syntaxhighlight>\n\n==== SQL ====\nStandard comments in SQL are in single-line-only form, using two dashes:\n<syntaxhighlight lang=\"sql\">\n-- This is a single line comment\n-- followed by a second line\nSELECT COUNT(*)\n       FROM Authors\n       WHERE Authors.name = 'Smith'; -- Note: we only want 'smith'\n                                     -- this comment appears after SQL code\n</syntaxhighlight>\nAlternatively, a comment format syntax identical to the \"block comment\" style used in the syntax for C and Java is supported by [[Transact-SQL]], [[MySQL]], [[SQLite]], [[PostgreSQL]], and [[Oracle Database|Oracle]].<ref name=\"MSSQL\">{{cite book\n| title      = Microsoft SQL Server 7\n| first      = Ronald R.\n| last      = Talmage\n| publisher      = Prima Publishing\n| year      = 1999\n| isbn      = 978-0-7615-1389-6\n| url      = https://archive.org/details/microsoftsqlserv00talm\n}}</ref><ref name=\"MySQL\">{{cite web | url=https://dev.mysql.com/doc/refman/8.0/en/comments.html | title=MySQL 8.0 Reference Manual | publisher=Oracle Corporation | accessdate=January 2, 2020}}</ref><ref name=\"SQLite\">{{cite web | url=https://www.sqlite.org/lang_comment.html | title=SQL As Understood By SQLite | publisher=SQLite Consortium | accessdate=January 2, 2020}}</ref><ref name=\"PostgreSQL\">{{cite web | url=https://www.postgresql.org/docs/10/sql-syntax-lexical.html#SQL-SYNTAX-COMMENTS | title=PostgreSQL 10.11 Documentation | publisher=The PostgreSQL Global Development Group | accessdate=January 2, 2020}}</ref><ref name=\"Oracle\">{{cite web | url=https://docs.oracle.com/cd/B13789_01/server.101/b10759/sql_elements006.htm | title=Oracle\u00ae Database SQL Reference | publisher=Oracle Corporation | accessdate=January 2, 2020}}</ref> \n\nMySQL also supports comments from the hash (#) character to the end of the line.\n\n==== Swift ====\nSingle-line comments begin with two forward-slashes (//):<syntaxhighlight lang=\"swift\">\n// This is a comment.\n</syntaxhighlight>Multiline comments start with a forward-slash followed by an asterisk (/*) and end with an asterisk followed by a forward-slash (*/):<syntaxhighlight lang=\"swift\">\n/* This is also a comment\n but is written over multiple lines. */\n</syntaxhighlight>Multiline comments in Swift can be nested inside other multiline comments. You write nested comments by starting a multiline comment block and then starting a second multiline comment within the first block. The second block is then closed, followed by the first block:<syntaxhighlight lang=\"swift\">\n/* This is the start of the first multiline comment.\n /* This is the second, nested multiline comment. */\n This is the end of the first multiline comment. */\n</syntaxhighlight>\n\n====XML====\nComments in [[XML]] (or HTML) are introduced with <syntaxhighlight lang=\"XML\"><!--</syntaxhighlight> and can spread over several lines until the terminator, <syntaxhighlight lang=\"XML\">--></syntaxhighlight>\n\nFor example,\n\n<syntaxhighlight lang=\"xml\">\n<!-- select the context here -->\n<param name=\"context\" value=\"public\" />\n</syntaxhighlight>\n\n==Security issues==\nIn [[interpreted language]]s the comments are viewable to the end user of the program. In some cases, such as sections of code that are \"commented out\", this may present a security [[vulnerability (computing)|vulnerability]].<ref name=\"InsecureComments\">{{cite book\n| last      = Andress\n| first     = Mandy\n| title     = Surviving Security: How to Integrate People, Process, and Technology\n| publisher = CRC Press\n| year      = 2003\n| isbn      = 978-0-8493-2042-2\n}}</ref>\n\n==See also==\n* [[Docstring]], a specific type of comment that is parsed and retained throughout the runtime of the program.\n* [[Shebang (Unix)|Shebang]], the use of ''#!'' as an interpreter directive in scripts on Unix-like systems\n* [[HTML comment tag]]\n* [[Literate programming]], alternative documentation [[programming paradigm|paradigm]]\n* [[Comparison of programming languages (syntax)#Comments|Syntax of comments]] in various programming languages\n\n==Notes and references==\n{{reflist|2}}\n\n== Further reading ==\n* Movshovitz-Attias, Dana and Cohen, William W. (2013) [https://www.cs.cmu.edu/~dmovshov/papers/dma_acl2013.pdf Natural Language Models for Predicting Programming Comments]. In Association for Computational Linguistics (ACL), 2013.\n\n==External links==\n* [https://web.archive.org/web/20110708033309/http://dkrukovsky.blogspot.com/2005/07/how-to-write-comments.html How to Write Comments] by Denis Krukovsky\n* [https://web.archive.org/web/20070722211609/http://www.ptlogica.com/TwinText/resource/liveuser.pdf Source Code Documentation as a Live User Manual] by PTLogica\n* [https://www.oracle.com/technetwork/java/javase/tech/index-137868.html How to Write Comments for the Javadoc Tool]\n* [http://www.stack.nl/~dimitri/doxygen/index.html Doxygen], a documentation system for C, C++, Java, Objective-C, Python, IDL and to some extent PHP, C#, and D\n* [http://blogs.sitepoint.com/2007/10/10/comment-driven-development/ Comment-driven development], a personal presentation of good coding practice\n* [http://www.allthingsoracle.com/how-to-make-comments-the-most-important-code-you-write/ How to make comments the most important 'code' you write] By David Njoku\n\njava online programming help free with experts [https://www.tryexperts.com/java-online-programming-help-free-with-experts Java Experts]\n{{DEFAULTSORT:Comment (Computer Programming)}}\n[[Category:Source code]]\n[[Category:Articles with example code]]\n[[Category:Articles with example C code]]\n[[Category:Articles with example Java code]]\n[[Category:Articles with example Perl code]]\n[[Category:Metadata]]\n", "text_old": "{{selfref|For comments in Wikipedia markup, see [[Help:Wiki markup#Character formatting]] and [[WP:COMMENT]].}}\n[[File:CodeCmmt002.svg|thumb|right|300px|An illustration of [[Java (programming language)|Java]] source code with '''prologue''' comments indicated in <span style=\"color:#f00;\">red</span> and '''inline''' comments in <span style=\"color:#0e850e;\">green</span>. '''Program code''' is in <span style=\"color:#00f;\"> blue</span>.]]\nIn [[computer programming]], a '''comment''' is a programmer-readable explanation or ''[[annotation]]'' in the [[source code]] of a [[computer program]].  They are added with the purpose of making the source code easier for humans to understand, and are generally ignored by [[compiler]]s and [[interpreter (computing)|interpreters]].<ref name=\"PennyGrubb000\">Source code can be divided into ''program code'' (which consists of machine-translatable instructions); and ''comments'' (which include human-readable notes and other kinds of annotations in support of the program code).{{cite book | last = Penny Grubb | first = Armstrong Takang | title = Software Maintenance: Concepts and Practice | publisher = World Scientific | year = 2003 | isbn = 978-981-238-426-3 | pages = 7, plese start120\u2013121}}</ref><ref>For purposes of this article, programming language comments are treated as indistinct from comments that appear in [[markup language]]s, [[configuration file]]s and other similar contexts. Moreover, markup language is often closely integrated with programming language code, especially in the context of [[Automatic programming|code generation]]. See e.g., {{cite book | last = Ganguli | first = Madhushree | title = Making Use of Jsp | publisher = Wiley | location = New York | year = 2002 | isbn = 978-0-471-21974-3 }}, {{cite book | last = Hewitt | first = Eben | title = Java for Coldfusion Developers | publisher = Pearson Education | location = Upper Saddle River | year = 2003 | isbn = 978-0-13-046180-3}}</ref> The [[comparison of programming languages (syntax)#Comments|syntax of comments]] in various programming languages varies considerably.\n\nComments are sometimes processed in various ways to generate documentation external to the source code itself by [[documentation generator]]s, or used for integration with [[Version control|source code management]] systems and other kinds of external [[programming tool]]s.\n\nThe flexibility provided by comments allows for a wide degree of variability, but formal conventions for their use are commonly part of programming style guides.\n\n== Overview ==\n\nComments are generally formatted as either ''block comments'' (also called ''prologue comments'' or ''stream comments'') or ''line comments'' (also called ''inline comments'').<ref name=\"JBDixit000\">{{cite book | last = Dixit | first = J.B. | title = Computer Fundamentals and Programming in C | publisher = Laxmi Publications | year = 2003 | isbn = 978-81-7008-882-0 }}</ref>\n\nBlock comments [[delimiter#Bracket delimiters|delimit]] a region of source code which may span multiple lines or a part of a single line. This region is specified with a ''start'' delimiter and an ''end'' delimiter. Some programming languages (such as [[MATLAB]]) allow block comments to be recursively nested inside one another, but others (such as [[Java (programming language)|Java]]) do not.<ref name=\"Higham000\">{{cite book\n| title     = MATLAB Guide\n| first     = Desmond\n| last      = Higham\n| publisher = SIAM\n| year      = 2005\n| isbn      = 978-0-89871-578-1\n}}</ref><ref name=\"Vermeulen000\">{{cite book\n| title      = The Elements of Java Style\n| first      = Al\n| last      = Vermeulen\n| publisher      = Cambridge University Press\n| year      = 2000\n| isbn      = 978-0-521-77768-1\n| url      = https://archive.org/details/elementsofjavast00verm\n}}</ref><ref name=\"javadude000\">{{cite web\n| title       = Using the right comment in Java\n| url         = http://javadude.com/articles/comments.html\n| accessdate  = 2007-07-24\n| date = 2000-03-04\n}}</ref>\n\nLine comments either start with a comment delimiter and continue until the end of the line, or in some cases, start at a specific column (character line offset) in the source code, and continue until the end of the line.<ref name=\"javadude000\" />\n\nSome programming languages employ both block and line comments with different comment delimiters.  For example, [[C++]] has block comments delimited by <code>/*</code> and <code>*/</code> that can span multiple lines and line comments delimited by <code>//</code>. Other languages support only one type of comment. For example, [[Ada (programming language)|Ada]] comments are line comments: they start with <code>--</code> and continue to the end of the line.<ref name=\"javadude000\" />\n\n==Uses==\n\nHow best to make use of comments is subject to dispute; different commentators have offered varied and sometimes opposing viewpoints.<ref name=\"Dietrich000\">{{cite book\n| last      = W. R.\n| first     = Dietrich\n| title     = Applied Pattern Recognition: Algorithms and Implementation in C++\n| publisher = Springer\n| year      = 2003\n| isbn      = 978-3-528-35558-6\n}} offers viewpoints on proper use of comments in source code. p. 66.</ref><ref name=\"Keyes000\">{{cite book\n| last      = Keyes\n| first     = Jessica\n| title     = Software Engineering Handbook\n| publisher = CRC Press\n| year      = 2003\n| isbn      = 978-0-8493-1479-7\n}} discusses comments and the \"Science of Documentation\" p. 256.</ref>\nThere are many different ways of writing comments and many commentators offer conflicting advice.<ref name=\"Keyes000\" />\n\n=== Planning and reviewing ===\nComments can be used as a form of [[pseudocode]] to outline intention prior to writing the actual code. In this case it should explain the logic behind the code rather than the code itself.\n.\n<syntaxhighlight lang=\"cpp\">/* loop backwards through all elements returned by the server \n(they should be processed chronologically)*/\nfor (i = (numElementsReturned - 1); i >= 0; i--) {\n    /* process each element's data */\n    updatePattern(i, returnedElements[i]);\n}\n</syntaxhighlight>\n\nIf this type of comment is left in, it simplifies the review process by allowing a direct comparison of the code with the intended results. A common logical fallacy is that code that is easy to understand does what it's ''supposed'' to do.\n\n=== Code description ===\nComments can be used to summarize code or to explain the programmer's intent. According to this school of thought, restating the code in plain English is considered superfluous; the need to re-explain code may be a sign that it is too complex and should be rewritten, or that the naming is bad.\n\n:\"Don't document bad code \u2013 rewrite it.\"<ref name=\"BadComment000\">''[[The Elements of Programming Style (book)|The Elements of Programming Style]]'', [[Brian Kernighan|Kernighan]] & [[P. J. Plauger|Plauger]]</ref>\n\n:\"Good comments don't repeat the code or explain it. They clarify its intent. Comments should explain, at a higher level of abstraction than the code, what you're trying to do.\"<ref name=\"GoodComment000\">''[[Code Complete]]'', [[Steve McConnell|McConnell]]</ref>\n\nComments may also be used to explain why a block of code does not seem to fit conventions or best practices.  This is especially true of projects involving very little development time, or in bug fixing.  For example:\n<syntaxhighlight lang=\"vb\">' Second variable dim because of server errors produced when reuse form data. No\n' documentation available on server behavior issue, so just coding around it.\nvtx = server.mappath(\"local settings\")\n</syntaxhighlight>\n\n=== Algorithmic description ===\n\nSometimes source code contains a novel or noteworthy solution to a specific problem. In such cases, comments may contain an explanation of the methodology. Such explanations may include diagrams and formal mathematical proofs. This may constitute explanation of the code, rather than a clarification of its intent; but others tasked with maintaining the code base may find such explanation crucial. This might especially be true in the case of highly specialized problem domains; or rarely used optimizations, constructs or function-calls.<ref name=\"AlgoComments\">{{cite book\n| last      = Spinellis\n| first     = Diomidis\n| title     = Code reading: The Open Source Perspective\n| publisher = Addison-Wesley\n| year      = 2003\n| isbn      = 978-0-201-79940-8\n}}</ref>\n\nFor example, a programmer may add a comment to explain why an [[insertion sort]] was chosen instead of a [[quicksort]], as the former is, in theory, slower than the latter. This could be written as follows:\n<syntaxhighlight lang=\"java\">\n list = [f (b), f (b), f (c), f (d), f (a), ...];\n // Need a stable sort. Besides, the performance really does not matter.\n insertion_sort (list);\n</syntaxhighlight>\n\n=== Resource inclusion ===<!--This header is linked externally, pls. no changey unless you fixy-->\n\n[[Logo]]s, diagrams, and [[flowchart]]s consisting of [[ASCII art]] constructions can be inserted into source code formatted as a comment.<ref name=\"asciiart000\">{{cite web\n| title       = CodePlotter 1.6 \u2013 Add and edit diagrams in your code with this 'Visio-like' tool\n| url       = http://www.codeproject.com/macro/codeplotter.asp\n| accessdate       = 2007-07-24\n| archive-url       = https://web.archive.org/web/20070714092702/http://www.codeproject.com/macro/codeplotter.asp\n| archive-date       = 2007-07-14\n| url-status       = dead\n}}</ref> Further, [[copyright]] notices can be embedded within source code as comments. Binary data may also be encoded in comments through a process known as [[binary-to-text encoding]], although such practice is uncommon and typically relegated to external resource files.\n\nThe following code fragment is a simple ASCII diagram depicting the process flow for a [[system administration]] script contained in a [[Windows Script File]] running under [[Windows Script Host]]. Although a section marking the code appears as a comment, the diagram itself actually appears in an [[XML]] [[CDATA]] section, which is technically considered distinct from comments, but can serve similar purposes.<ref name=\"Niederst000\">{{cite book\n| title     = Web Design in a Nutshell: A Desktop Quick Reference\n| first     = Jennifer\n| last      = Niederst\n| publisher = O'Reilly\n| year      = 2006\n| isbn      = 978-0-596-00987-8\n}}Sometimes the difference between a \"comment\" and other syntax elements of a programming or markup language entails subtle nuances. Niederst indicates one such situation by stating: \"Unfortunately, XML software thinks of comments as unimportant information and may simply remove the comments from a document before processing it. To avoid this problem, use an XML CDATA section instead.\"</ref>\n\n<syntaxhighlight lang=\"xml\">\n<!-- begin: wsf_resource_nodes -->\n<resource id=\"ProcessDiagram000\">\n<![CDATA[\n HostApp (Main_process)\n    |\n    V\nscript.wsf (app_cmd) --> ClientApp (async_run, batch_process)\n                |\n                |\n                V\n         mru.ini (mru_history)  \n]]>\n</resource>\n</syntaxhighlight>\n\nAlthough this identical diagram could easily have been included as a comment, the example illustrates one instance where a programmer may opt not to use comments as a way of including resources in source code.<ref name=\"Niederst000\" />\n\n=== Metadata ===\n{{main | Metadata }}\n\nComments in a computer program often store metadata about a program file.\n\nIn particular, many [[software maintainer]]s put submission guidelines in comments to help people who read the source code of that program to send any improvements they make back to the maintainer.\n\nOther metadata includes:\nthe name of the creator of the original version of the program file and the date when the first version was created,\nthe name of the current maintainer of the program,\nthe names of other people who have edited the program file so far,\nthe URL of documentation about how to use the program,\nthe name of the [[software license]] for this program file,\netc.\n\nWhen an algorithm in some section of the program is based on a description in a book or other reference, comments can be used to give the page number and title of the book or [[Request for Comments]] or other reference.\n\n{{anchor|Comment out}} <!-- [[Comment out]] redirects here -->\n=== Debugging ===\n\nA common developer practice is to ''comment out'' a [[snippet (programming)|code snippet]], meaning to add comment syntax causing that block of code to become a comment, so that it will not be executed in the final program. This may be done to exclude certain pieces of code from the final program, or (more commonly) it can be used to find the source of an error. By systematically commenting out and running parts of the program, the source of an error can be determined, allowing it to be corrected.\n\nAn example of commenting out code for exclusion purposes is below:\n\n<syntaxhighlight lang=\"C\">\n if (opt.equals (\"e\"))\n   opt_enabled = true;\n\n /*\n if (opt.equals (\"d\"))\n   opt_debug = true;\n */\n\n if (opt.equals (\"v\"))\n    opt_verbose = true;\n\n</syntaxhighlight>\nThe above code fragment suggests that the programmer opted to disable the debugging option for some reason.\n\nMany [[Integrated development environment|IDEs]] allow quick adding or removing such comments with single menu options or key combinations. The programmer has only to mark the part of text they want to (un)comment and choose the appropriate option.\n\n===Automatic documentation generation===\n{{main|Documentation generator}}\n[[Programming tool]]s sometimes store documentation and [[metadata]] in comments.<ref>See e.g., {{cite book | last = Wynne-Powell | first = Rod | title = Mac Os X for Photographers: Optimized Image Workflow for the Mac User | publisher = Focal Press | location = Oxford | year = 2008 | isbn = 978-0-240-52027-8 | url = https://archive.org/details/macosxforphotogr0000wynn }} page 243</ref> These may include insert positions for automatic header file inclusion, commands to set the file's [[syntax highlighting]] mode,<ref>{{cite book | last = Lamb | first = Linda | title = Learning the VI Editor | publisher = O'Reilly & Associates | location = Sebastopol | year = 1998 | isbn = 978-1-56592-426-0 | url = https://archive.org/details/learningvieditor00lamb }} describes the use of modeline syntax in Vim configuration files.</ref> or the file's [[revision control|revision number]].<ref>See e.g., {{cite book | last = Berlin | first = Daniel | title = Practical Subversion, Second Edition | publisher = APress | location = Berkeley | year = 2006 | isbn = 978-1-59059-753-8 }} page 168.</ref> These functional control comments are also commonly referred to as [[annotation]]s. Keeping documentation within source code comments is considered as one way to simplify the documentation process, as well as increase the chances that the documentation will be kept up to date with changes in the code.<ref name=\"Ambler000\">{{cite book\n| title     = The Object Primer: Agile Model-Driven Development with UML 2.0\n| first     = Scott\n| last      = Ambler\n| publisher = Cambridge University Press\n| year      = 2004\n| isbn      = 978-1-397-80521-8\n}}</ref>\n\nExamples of documentation generators include the programs [[Javadoc]] for use with [[Java (programming language)|Java]], [[Ddoc]] for [[D (programming language)|D]], [[Doxygen]] for [[C (programming language)|C]], [[C++]], Java, [[interface description language|IDL]], [[Visual Expert]] for [[PL/SQL]], [[Transact-SQL]], [[PowerBuilder]] and [[PHPDoc]] for [[PHP]]. Forms of [[docstring]] are supported by [[Python (programming language)|Python]], [[Lisp (programming language)|Lisp]], [[Elixir (programming language)|Elixir]], and [[Clojure]].<ref>[https://clojure.github.com/clojure/clojure.core-api.html#clojure.core/defn Function definition with docstring in Clojure]</ref>\n\n[[C Sharp (programming language)|C#]], [[F Sharp (programming language)|F#]] and [[Visual Basic .NET]] implement a similar feature called \"XML Comments\" which are read by [[IntelliSense]] from the compiled [[.NET Framework|.NET]] assembly.<ref>{{cite book|last=Murach|title=C# 2005|page=56}}</ref>\n\n=== Syntax extension ===\n\nOccasionally syntax elements that were originally intended to be comments are re-purposed to convey additional information to a program, such as \"[[conditional comment]]s\".\nSuch \"hot comments\" may be the only practical solution that maintains backward-compatibility, but are widely regarded as a [[kludge]].<ref>\n[[c2: HotComments]]\n</ref>\n\n===Directive uses===\nThere are cases where the normal comment characters are co-opted to create a special [[Directive (programming)|directive]] for an editor or interpreter. \n\nTwo examples of this directing an interpreter are:\n\n* The Unix \"[[shebang (Unix)|shebang]]\" \u2013 <code>#!</code> \u2013 used on the first line of a script to point to the interpreter to be used.\n* \"Magic comments\" identifying the encoding a source file is using,<ref>{{cite web |title=class Encoding |url=https://docs.ruby-lang.org/en/2.4.0/Encoding.html |website=Ruby |publisher=ruby-lang.org |accessdate=5 December 2018}}</ref> e.g. Python's PEP 263.<ref>{{cite web |title=PEP 263 \u2013 Defining Python Source Code Encodings |url=https://www.python.org/dev/peps/pep-0263/ |publisher=Python.org |accessdate=5 December 2018}}</ref>\n\nThe script below for a Unix-like system shows both of these uses:\n<syntaxhighlight lang=\"bash\">\n#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\nprint(\"Testing\")\n</syntaxhighlight>\n\nSomewhat similar is the use of comments in C to communicate to a compiler that a default \"fallthough\" in a [[case statement]] has been done deliberately:\n<syntaxhighlight lang=\"c\">\nswitch (command) {\n    case CMD_SHOW_HELP_AND_EXIT:\n      do_show_help();\n      /* Fall thru */\n    case CMD_EXIT:\n      do_exit();\n      break;\n    case CMD_OTHER:\n      do_other();\n      break;\n    /* ... etc. ... */\n  }\n</syntaxhighlight>\nInserting such a <code>/* Fall thru */</code> comment for human readers was a already a common convention, but in 2017 the [[GNU Compiler Collection|gcc]] compiler began looking for these (or other indications of deliberate intent), and, if not found, emitting: \"warning: this statement may fall through\".<ref>{{cite web |last1=Polacek |first1=Marek |title=-Wimplicit-fallthrough in GCC 7 |url=https://developers.redhat.com/blog/2017/03/10/wimplicit-fallthrough-in-gcc-7/ |website=Red Hat Developer |publisher=Red Hat |accessdate=10 February 2019|date=2017-03-10 }}</ref> Compiler-dependent comments which switch off warnings have existed for decades.{{cn|date=February 2019}}\n\n===Stress relief===\nSometimes programmers will add comments as a way to relieve stress by commenting about development tools, competitors, employers, working conditions, or the quality of the code itself.<ref>[http://www.businessinsider.com.au/microsoft-hidden-messages-in-word-and-ms-dos-2014-3?r=US&IR=T \"Microsoft Programmers Hid A Bunch Of Profanity In Early Software Code\"], Lisa Eadicicco, 27 March 2014, businessinsider.com.au</ref> The occurrence of this phenomenon can be easily seen from online resources that track [[profanity]] in source code.<ref name=\"SwearWords\">(see e.g., [http://www.vidarholen.net/contents/wordcount/ Linux Swear Count]).</ref>\n\n==Normative views==\nThere are various normative views and long-standing opinions regarding the proper use of comments in source code.<ref>{{cite book | last = Goodliffe | first = Pete | title = Code Craft | publisher = No Starch Press | location = San Francisco | year = 2006 | isbn = 978-1-59327-119-0 }}</ref><ref>{{cite book | last = Smith | first = T. | title = Intermediate Programming Principles and Techniques Using Pascal | publisher = West Pub. Co | location = Belmont | year = 1991 | isbn = 978-0-314-66314-6 }}</ref> Some of these are informal and based on personal preference, while others are published or promulgated as formal guidelines for a particular community.<ref>See e.g., {{cite book | last = Koletzke | first = Peter | title = Oracle Developer Advanced Forms & Reports | publisher = Osborne/McGraw-Hill | location = Berkeley | year = 2000 | isbn = 978-0-07-212048-6 }} page 65.</ref>\n\n===Need for comments===\nExperts have varying viewpoints on whether, and when, comments are appropriate in source code.<ref name=\"BadComment000\" /><ref name=\"BadComments001\">{{cite web\n| title       = Worst Practice - Bad Comments\n| url         = http://www.sqlservercentral.com/columnists/awarren/worstpracticebadcomments.asp\n| accessdate  = 2007-07-24\n}}</ref> Some assert that source code should be written with few comments, on the basis that the source code should be self-explanatory or [[self-documenting]].<ref name=\"BadComment000\" /> Others suggest code should be extensively commented (it is not uncommon for over 50% of the non-[[whitespace (computer science)|whitespace]] characters in source code to be contained within comments).<ref name=\"Morelli000\">{{cite book\n| title     = Java, Java, Java: object-oriented problem solving\n| first     = Ralph\n| last      = Morelli\n| publisher = Prentice Hall College\n| year      = 2006\n| isbn      = 978-0-13-147434-5\n}}</ref><ref name=\"Javadoc000\">{{cite web\n| title       = How to Write Doc Comments for the Javadoc Tool\n| url         = http://java.sun.com/j2se/javadoc/writingdoccomments/\n| accessdate  = 2007-07-24\n}} Javadoc guidelines specify that comments are crucial to the platform. Further, the appropriate level of detail is fairly well-defined: \"We spend time and effort focused on specifying boundary conditions, argument ranges and corner cases rather than defining common programming terms, writing conceptual overviews, and including examples for developers.\"</ref>\n\nIn between these views is the assertion that comments are neither beneficial nor harmful by themselves, and what matters is that they are correct and kept in sync with the source code, and omitted if they are superfluous, excessive, difficult to maintain or otherwise unhelpful.<ref name=\"techniques001\">{{cite book\n| title     = Techniques of Program Structure and Design\n| first     = Edward\n| last      = Yourdon\n| publisher = University of Michigan\n| year      = 2007\n| id        = 013901702X\n}}Non-existent comments can make it difficult to comprehend code, but comments may be detrimental if they are obsolete, redundant, incorrect or otherwise make it more difficult to comprehend the intended purpose for the source code.</ref><ref name=\"CmmtPhilosophy\">{{cite book\n| last      = Dewhurst \n| first     = Stephen C\n| title     = C++ Gotchas: Avoiding Common Problems in Coding and Design\n| publisher = Addison-Wesley Professional\n| year      = 2002\n| isbn      = 978-0-321-12518-7\n}}</ref>\n\nComments are sometimes used to document contracts in the [[design by contract]] approach to programming.\n\n=== Level of detail ===\nDepending on the intended audience of the code and other considerations, the level of detail and description may vary considerably.\n\nFor example, the following Java comment would be suitable in an introductory text designed to teach beginning programming:\n\n    <syntaxhighlight lang=\"java\">\n    String s = \"Wikipedia\"; /* Assigns the value \"Wikipedia\" to the variable s. */\n    </syntaxhighlight>\n\nThis level of detail, however, would not be appropriate in the context of production code, or other situations involving experienced developers. Such rudimentary descriptions are inconsistent with the guideline: \"Good comments ... clarify intent.\"<ref name=\"GoodComment000\" /> Further, for professional coding environments, the level of detail is ordinarily well-defined to meet a specific performance requirement defined by business operations.<ref name=\"Javadoc000\" />\n\n==Styles==\nThere are many stylistic alternatives available when considering how comments should appear in source code. For larger projects involving a team of developers, comment styles are either agreed upon before a project starts, or evolve as a matter of convention or need as a project grows. Usually programmers prefer styles that are consistent, non-obstructive, easy to modify, and difficult to break.<ref name=\"gnome000\">{{cite web\n| title       = Coding Style\n| url       = http://developer.gnome.org/doc/guides/programming-guidelines/code-style.html\n| accessdate       = 2007-07-24\n| archive-url       = https://web.archive.org/web/20070808173421/http://developer.gnome.org/doc/guides/programming-guidelines/code-style.html\n| archive-date       = 2007-08-08\n| url-status       = dead\n}}</ref>\n\n===Block comment===\nThe following code fragments in C demonstrate just a tiny example of how comments can vary stylistically, while still conveying the same basic information:\n<syntaxhighlight lang=\"c\">\n/*\n     This is the comment body.\n     Variation One.\n*/\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"c\">\n/***************************\\\n*                           *\n* This is the comment body. *\n* Variation Two.            *\n*                           *\n\\***************************/\n</syntaxhighlight>\n\nFactors such as personal preference, flexibility of programming tools, and other considerations tend to influence the stylistic variants used in source code. For example, Variation Two might be disfavored among programmers who do not have [[source code editor]]s that can automate the alignment and visual appearance of text in comments.\n\nSoftware consultant and technology commentator Allen Holub<ref name=\"Holub000\">{{cite web\n| title       = Allen Holub\n| url       = http://www.holub.com/company/allen_holub.html\n| url-status       = dead\n| accessdate       = 2007-07-24\n| archive-url       = https://web.archive.org/web/20070720153845/http://www.holub.com/company/allen_holub.html\n| archive-date       = 2007-07-20\n}}</ref> is one expert who advocates aligning the left edges of comments:<ref name=\"Holub001\">Allen Holub, ''Enough Rope to Shoot Yourself in the Foot'', {{ISBN|0-07-029689-8}}, 1995, McGraw-Hill</ref>\n\n <syntaxhighlight lang=\"c\">\n /* This is the style recommended by Holub for C and C++.\n  * It is demonstrated in ''Enough Rope'', in rule 29.\n  */\n </syntaxhighlight>\n\n <syntaxhighlight lang=\"c\">\n /* This is another way to do it, also in C.\n ** It is easier to do in editors that do not automatically indent the second\n ** through last lines of the comment one space from the first.\n ** It is also used in Holub's book, in rule 31.\n */\n </syntaxhighlight>\n\nThe use of /* and */ as block comment delimiters was inherited from PL/I into the B programming language, the immediate predecessor of the C programming language.<ref name=\"Thompson1972\">\n{{cite web\n| title = Users' Reference to B\n| author = Ken Thompson\n| url = https://www.bell-labs.com/usr/dmr/www/kbman.html\n| accessdate = 2017-07-21\n}}</ref>\n\n===Line comments===\nLine comments generally use an arbitrary [[delimiter]] or sequence of [[token (parser)|tokens]] to indicate the beginning of a comment, and a [[newline]] character to indicate the end of a comment.\n\nIn this example, all the text from the ASCII characters // to the end of the line is ignored.\n<syntaxhighlight lang=\"c\">\n// -------------------------\n// This is the comment body.\n// -------------------------\n</syntaxhighlight>\n\nOften such a comment has to begin at far left and extend to the whole line. However in many languages, it is also possible to put a comment ''inline'' with a command line, to add a comment to it \u2013 as in this Perl example:\n<syntaxhighlight lang=\"Perl\">\nprint $s . \"\\n\";     # Add a newline character after printing\n</syntaxhighlight>\n\nIf a language allows both line comments and block comments, programming teams may decide upon a convention of using them differently: e.g. line comments only for minor comments, and  block comments to describe higher-level abstractions.\n\n==Tags==\nProgrammers may use informal [[tag (metadata)|tags]] in comments to assist in indexing common issues. They may then be able to be searched for with common programming tools, such as the [[Unix]] [[grep]] utility or even [[Syntax highlighting|syntax-highlighted]] within [[text editor]]s. These are sometimes referred to as \"codetags\"<ref>[https://www.python.org/dev/peps/pep-0350/#what-are-codetags \"PEP 0350 \u2013 Codetags\"], Python Software Foundation</ref><ref>[https://medium.com/@eido.askayo/never-forget-anything-before-after-and-while-coding-98d187ae4cf1 \"Never Forget Anything Before, After and While Coding\"], Using \"codetag\" comments as productive remainders</ref> or \"tokens\".<ref>[https://msdn.microsoft.com/en-us/library/txtwdysk.aspx#tokenscomments \"Using the Task List\"], msdn.microsoft.com</ref>\n\nSuch tags differ widely, but might include:\n* BUG \u2013 a known [[software bug|bug]] that should be corrected.\n* FIXME \u2013 should be corrected.\n* HACK \u2013 a workaround.\n* TODO \u2013 something to be done.\n* UNDONE \u2013 a reversal or \"roll back\" of previous code.\n* XXX \u2013 warn other programmers of problematic or misguiding code\n\n==Examples==\n\n===Comparison===\n{{main|Comparison of programming languages (syntax)#Comments}}\n\nTypographic conventions to specify comments vary widely. Further, individual programming languages sometimes provide unique variants. For a detailed review, please consult the [[comparison of programming languages (syntax)#Comments|programming language comparison]] article.\n\n====Ada====\n\nThe [[Ada (programming language)|Ada]] programming language uses '--' to indicate a comment up to the end of the line.\n\nFor example:\n<syntaxhighlight lang=\"ada\">\n  -- the air traffic controller task takes requests for takeoff and landing\n   task type Controller (My_Runway: Runway_Access) is\n      -- task entries for synchronous message passing\n      entry Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access);\n      entry Request_Approach(ID: in Airplane_ID; Approach: out Runway_Access);\n   end Controller;\n</syntaxhighlight>\n====APL====\n\n[[APL (programming language)|APL]] uses <code>\u235d</code> to indicate a comment up to the end of the line.\n\nFor example:\n<syntaxhighlight lang=\"apl\">\n\u235d Now add the numbers:\nc\u2190a+b \u235d addition\n</syntaxhighlight>\n\nIn dialects that have the <code>\u22a3</code> (\"left\") and <code>\u22a2</code> (\"right\") primitives, comments can often be ''inside'' or separate statements, in the form of ignored strings:\n<syntaxhighlight lang=\"apl\">\nd\u21902\u00d7c \u22a3'where'\u22a2 c\u2190a+ 'bound'\u22a2 b\n</syntaxhighlight>\n\n====AppleScript====\nThis section of [[AppleScript]] code shows the two styles of comments used in that language.\n<syntaxhighlight lang=\"AppleScript\">\n(*\nThis program displays a greeting.\n*)\non greet(myGreeting)\n     display dialog myGreeting & \" world!\"\nend greet\n\n-- Show the greeting\ngreet(\"Hello\")\n</syntaxhighlight>\n\n====BASIC====\nIn this classic early [[BASIC]] code fragment the REM (''\"Remark\"'') keyword is used to add comments.\n<syntaxhighlight lang=\"basic\">\n10 REM This BASIC program shows the use of the PRINT and GOTO Statements.\n15 REM It fills the screen with the phrase \"HELLO\"\n20 PRINT \"HELLO\"\n30 GOTO 20\n</syntaxhighlight>\n\nIn later [[Microsoft]] BASICs, including [[Quick Basic]], [[Q Basic]], [[Visual Basic]], [[Visual Basic .NET]], and [[VB Script]]; and in descendants such as [[Free BASIC]] and [[Gam bas]] any text on a line after an ' (apostrophe) character is also treated as a comment.\n\nAn example in Visual Basic .NET:\n<syntaxhighlight lang=\"vbnet\">\nPublic Class Form1\n    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click\n        ' The following code is executed when the user\n        ' clicks the button in the program's window.\n        rem comments still exist.\n\n        MessageBox.Show(\"Hello, World\") 'Show a pop-up window with a greeting\n    End Sub\nEnd Class\n</syntaxhighlight>\n\n====C====\nThis [[C (programming language)|C]] code fragment demonstrates the use of a prologue comment or \"block comment\" to describe the purpose of a [[conditional (programming)|conditional statement]]. The comment explains key terms and concepts, and includes a short signature by the programmer who authored the code.\n<syntaxhighlight lang=\"c\">\n /*\n  * Check if we are over our maximum process limit, but be sure to\n  * exclude root. This is needed to make it possible for login and\n  * friends to set the per-user process limit to something lower\n  * than the amount of processes root is running. -- Rik\n  */\n if (atomic_read(&p->user->processes) >= p->rlim[RLIMIT_NPROC].rlim_cur\n     && !capable(CAP_SYS_ADMIN) && !capable(CAP_SYS_RESOURCE))\n     goto bad_fork_free;\n</syntaxhighlight>\n\nSince C99, it has also been possible to use the // syntax from C++, indicating a single-line comment.\n\n====Cisco IOS and IOS-XE configuration====\nThe [[exclamation point]] ('''!''') may be used to mark comments in a Cisco router's configuration mode, however such comments are ''not'' saved to [[non-volatile memory]] (which contains the startup-config), nor are they displayed by the \"show run\" command.<ref>{{cite web|url=https://learningnetwork.cisco.com/thread/71302|title=Leave a comment in running-config|work=Cisco Learning Network (discussion forum)}}</ref><ref>{{cite web|url =http://www.cisco.com/c/en/us/td/docs/ios-xml/ios/config-mgmt/configuration/xe-3s/asr903/config-mgmt-xe-3s-asr903-book/cm-config-files.html|ref=GUID-657D5FD4-32C5-444C-BCE0-BC2CC1069005|title=Managing Configuration Files Configuration Guide, Cisco IOS XE Release 3S (ASR 900 Series)}}</ref>\n\nIt is possible to insert [[human-readable]] content that is actually part of the configuration, and may be saved to the [[NVRAM]] startup-config via:\n*  The \"description\" command, used to add a description to the configuration of an interface or of a [[BGP]] neighbor\n* The \"name\" parameter, to add a remark to a static route\n* The \"remark\" command in access lists\n\n<syntaxhighlight lang=\"text\">\n! Paste the text below to reroute traffic manually\nconfig t\nint gi0/2\nno shut\nip route 0.0.0.0 0.0.0.0 gi0/2 name ISP2\nno ip route 0.0.0.0 0.0.0.0 gi0/1 name ISP1\nint gi0/1\nshut\nexit\n</syntaxhighlight>\n\n====ColdFusion====\n[[ColdFusion]] uses comments similar to [[HTML comment]]s, but instead of two dashes, it uses three. These comments are caught by the ColdFusion engine and not printed to the browser.\n\n<syntaxhighlight lang=\"cfm\">\n <!--- This prints \"Hello World\" to the browser. --->\n <cfoutput>\n   Hello World<br />\n </cfoutput>\n</syntaxhighlight>\n\n====Fortran IV====\nThis [[Fortran IV]] code fragment demonstrates how comments are used in that language, which is very column-oriented. A letter \"C\" in column 1 causes the entire line to be treated as a comment.\n\n<syntaxhighlight lang=\"fortranfixed\">\nC\nC Lines that begin with 'C' (in the first or 'comment' column) are comments\nC\n      WRITE (6,610)\n  610 FORMAT(12H HELLO WORLD)\n      END\n</syntaxhighlight>\n\nNote that the columns of a line are otherwise treated as four fields: 1 to 5 is the label field, 6 causes the line to be taken as a continuation of the previous statement; and declarations and statements go in 7 to 72.\n\n====Fortran 90====\nThis [[Fortran]] code fragment demonstrates how comments are used in that language, with the comments themselves describing the basic formatting rules.\n<syntaxhighlight lang=\"Fortran\">\n!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n!* All characters after an exclamation mark are considered as comments *\n!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nprogram comment_test\n    print '(A)', 'Hello world' ! Fortran 90 introduced the option for inline comments.\nend program\n</syntaxhighlight>\n\n====Haskell====\nLine comments in Haskell start with '--' (two hyphens) until the end of line, and multiple line comments start with '{-' and end with '-}'.\n<syntaxhighlight lang=\"Haskell\">\n{- this is a comment\non more lines -}\n-- and this is a comment on one line\nputStrLn \"Wikipedia\"  -- this is another comment\n</syntaxhighlight>\n\nHaskell also provides a [[literate programming]] method of commenting known as \"Bird Style\".<ref>{{cite web |url=http://www.haskell.org/haskellwiki/Literate_programming#Bird_Style |title=Literate programming |website=haskell.org}}</ref> In this all lines starting with > are interpreted as code, everything else is considered a comment. One additional requirement is that you always leave a blank line before and after the code block:\n\n<syntaxhighlight lang=\"lHaskell\">\nIn Bird-style you have to leave a blank before the code.\n\n> fact :: Integer -> Integer\n> fact 0 = 1\n> fact (n+1) = (n+1) * fact n\n\nAnd you have to leave a blank line after the code as well.\n</syntaxhighlight>\nLiterate programming can also be done in Haskell, using [[LaTeX]].  The code environment can be used instead of the Richard Bird's style:\nIn [[LaTeX]] style this is equivalent to the above example, the code environment could be defined in the LaTeX preamble. Here is a simple definition:\n<syntaxhighlight lang=\"lHaskell\">\n\\usepackage{verbatim}\n\\newenvironment{code}{\\verbatim}{\\endverbatim}\n</syntaxhighlight>\nlater in\n<syntaxhighlight lang=\"lhaskell\">\n% the LaTeX source file\nThe \\verb|fact n| function call computes $n!$ if $n\\ge 0$, here is a definition:\\\\\n\\begin{code}\nfact :: Integer -> Integer\nfact 0 = 1\nfact (n+1) = (n+1) * fact n\n\\end{code}\nHere more explanation using \\LaTeX{} markup\n</syntaxhighlight>\n\n====Java====\nThis [[Java (programming language)|Java]] code fragment shows a block comment used to describe the <code>setToolTipText</code> method. The formatting is consistent with [[Sun Microsystems]] [[Javadoc]] standards. The comment is designed to be read by the Javadoc processor.\n<syntaxhighlight lang=\"java\">\n/**\n * This is a block comment in Java.\n * The setToolTipText method registers the text to display in a tool tip.\n * The text is displayed when the cursor lingers over the component.\n *\n * @param text  The string to be displayed.  If 'text' is null,\n *              the tool tip is turned off for this component.\n */\npublic void setToolTipText(String text) {\n    // This is an inline comment in Java. TODO: Write code for this method.\n}\n</syntaxhighlight>\n\n====JavaScript====\n[[JavaScript (programming language)|JavaScript]] uses // to precede comments and /* */ for multi-line comments.\n\n<syntaxhighlight lang=\"javascript\">\n// A single line JavaScript comment\nvar iNum = 100;\nvar iTwo = 2; // A comment at the end of line\n/*\nmulti-line\nJavaScript comment\n*/\n</syntaxhighlight>\n\n====Lua====\nThe [[Lua (programming language)|Lua]] programming language uses double-hyphens, <code>--</code>, for single line comments in a similar way to [[Ada (programming language)|Ada]], [[Eiffel (programming language)|Eiffel]], [[Haskell (programming language)|Haskell]], [[SQL]] and [[VHDL]] languages. Lua also has block comments, which start with <code>--[[</code> and run until a closing <code>]]</code>\n\nFor example:\n\n<syntaxhighlight lang=\"lua\">\n--[[A multi-line\nlong comment\n]]\nprint(20)   -- print the result\n</syntaxhighlight>\n\nA common technique to comment out a piece of code,<ref>{{Cite web|url=http://www.lua.org/pil/1.3.html|title=Programming in Lua 1.3|website=www.Lua.org|access-date=2017-11-08}}</ref> is to enclose the code between <code>--[[</code> and\n<code>--]]</code>, as below:\n\n<syntaxhighlight lang=\"lua\">\n--[[\nprint(10)\n--]]\n-- no action (commented out)\n</syntaxhighlight>\n\nIn this case, it's possible to reactivate the code by adding a single hyphen to the first line:\n\n<syntaxhighlight lang=\"lua\">\n---[[\nprint(10)\n--]]\n--> 10\n</syntaxhighlight>\n\nIn the first example, the <code>--[[</code> in the first line starts a long comment, and the two hyphens in the last line\nare still inside that comment. In the second example, the sequence <code>---[[</code> starts an ordinary, single-line\ncomment, so that the first and the last lines become independent comments. In this case, the <code>print</code> is\noutside comments. In this case, the last line becomes an independent comment, as it starts with <code>--</code>.\n\nLong comments in Lua can be more complex than these, as you can read in the section called \"Long strings\" c.f. ''Programming in Lua''.\n\n====MATLAB====\nIn [[MATLAB]]'s programming language, the '%' character indicates a single-line comment.  Multi line comments are also available via %{ and %} brackets and can be nested, e.g.\n\n<syntaxhighlight lang=\"matlab\">\n% These are the derivatives for each term\nd = [0 -1 0];\n\n%{\n  %{\n    (Example of a nested comment, indentation is for cosmetics (and ignored).)\n  %}\n  We form the sequence, following the Taylor formula.\n  Note that we're operating on a vector.\n%}\nseq = d .* (x - c).^n ./(factorial(n))\n\n% We add-up to get the Taylor approximation\napprox = sum(seq)\n</syntaxhighlight>\n\n====OCaml====\n[[OCaml]] uses nestable comments, which is useful when commenting a code block.\n<syntaxhighlight lang=\"ocaml\">\ncodeLine(* comment level 1(*comment level 2*)*)\n</syntaxhighlight>\n\n====Pascal====\n\nIn Niklaus Wirth's [[Pascal (programming language)|pascal]] family of languages (including [[Modula-2]] and [[Oberon (programming language)|Oberon]]), comments are opened with '(*' and completed with '*)'.\n\nfor example:\n<syntaxhighlight lang=\"pascal\">\n(* test diagonals *)\ncolumnDifference := testColumn - column;\nif (row + columnDifference = testRow) or\n    .......\n</syntaxhighlight>In modern dialects of Pascal, '{' and '}' are used instead.<ref>{{Cite web|url=https://www.freepascal.org/docs-html/3.0.0/ref/refse2.html|title=Comments|website=www.freepascal.org|access-date=2017-09-20}}</ref>\n\n====Perl====\nLine comments in [[Perl]], and many other [[scripting language]]s, begin with a hash (#) symbol. \n<syntaxhighlight lang=\"perl\">\n# A simple example\n# \nmy $s = \"Wikipedia\"; # Sets the variable s to \"Wikipedia\".\nprint $s . \"\\n\";     # Add a newline character after printing\n</syntaxhighlight>\n\nInstead of a regular block commenting construct, Perl uses [[Plain Old Documentation]], a markup language for [[literate programming]],<ref>\n{{cite web\n| title = perlpod \u2013 the Plain Old Documentation format\n| url = http://perldoc.perl.org/perlpod.html|accessdate=2011-09-12\n}}\n</ref> for instance:<ref>\n{{cite web\n| title = Pod::ParseUtils \u2013 helpers for POD parsing and conversion\n| url = http://search.cpan.org/~bradapp/PodParser-1.20/lib/Pod/ParseUtils.pm|accessdate=2011-09-12\n}}</ref>\n<syntaxhighlight lang=\"perl\">\n=item Pod::List-E<gt>new()\n\nCreate a new list object. Properties may be specified through a hash\nreference like this:\n\n  my $list = Pod::List->new({ -start => $., -indent => 4 });\n\nSee the individual methods/properties for details.\n\n=cut\n\nsub new {\n    my $this = shift;\n    my $class = ref($this) || $this;\n    my %params = @_;\n    my $self = {%params};\n    bless $self, $class;\n    $self->initialize();\n    return $self;\n}\n</syntaxhighlight>\n\n====Raku====\n[[Raku (programming language)|Raku]] (previously called Perl 6) uses the same line comments and POD Documentation comments as regular [[Perl]] (see Perl section above), but adds a configurable block comment type: \"multi-line / embedded comments\".<ref name=perl6>\n{{cite web\n| title = Perl 6 Documentation \u2013 Syntax (Comments)\n| url = https://docs.perl6.org/language/syntax#Comments|accessdate=2017-04-06\n}}\n</ref>\n\nThese start with a hash character, followed by a backtick, and then some opening bracketing character, and end with the matching closing bracketing character.<ref name=perl6 /> The content can not only span multiple lines, but can also be embedded inline.\n<syntaxhighlight lang=\"perl6\">\n#`{{ \"commenting out\" this version \ntoggle-case(Str:D $s)\n\nToggles the case of each character in a string:\n\n  my Str $toggled-string = toggle-case(\"mY NAME IS mICHAEL!\");\n\n}}\n\nsub toggle-case(Str:D $s) #`( this version of parens is used now ){\n    ...\n}\n</syntaxhighlight>\n\n====PHP====\nComments in [[PHP]] can be either in C++ style (both inline and block), or use hashes.  [[PHPDoc]] is a style adapted from Javadoc and is a common standard for documenting PHP code.\n\n====PowerShell====\nComments in [[Windows PowerShell]]\n\n<syntaxhighlight lang=\"powershell\">\n# Single line comment\nWrite-Host \"Hello, World!\"\n\n<# Multi\n   Line\n   Comment #>\n\nWrite-Host \"Goodbye, world!\"\n</syntaxhighlight>\n\n====Python====\nInline comments in [[Python (programming language)|Python]] use the hash (#) character, as in the two examples in this code: \n\n<syntaxhighlight lang=\"python\">\n# This program prints \"Hello World\" to the screen\nprint(\"Hello World!\")  # Note the new syntax\n</syntaxhighlight>\n\nBlock comments, as defined in this article, don't technically exist in Python.<ref>{{cite web |url=https://www.tutorialdocs.com/tutorial/python3/python3-basic-syntax.html |title=Python 3 Basic Syntax |accessdate=25 February 2019 |quote=Triple quotes are treated as regular strings with the exception that they can span multiple lines. By regular strings I mean that if they are not assigned to a variable they will be immediately garbage collected as soon as that code executes. hence are not ignored by the interpreter in the same way that #a comment is.}}</ref> A bare [[string literal]] represented by a triple-quoted string can be used<ref>[https://twitter.com/gvanrossum/status/112670605505077248 \"Python tip: You can use multi-line strings as multi-line comments\"], 11 September 2011, Guido van Rossum</ref> but is not ignored by the interpreter in the same way that \"#\" comment is. In the examples below, the triple double-quoted strings act in this way as comments, but are also treated as [[docstring]]s:\n\n<syntaxhighlight lang=\"python\">\n\"\"\"\nAssuming this is file mymodule.py, then this string, being the\nfirst statement in the file, will become the \"mymodule\" module's\ndocstring when the file is imported.\n\"\"\"\n\nclass MyClass(object):\n    \"\"\"The class's docstring\"\"\"\n\n    def my_method(self):\n        \"\"\"The method's docstring\"\"\"\n\ndef my_function():\n    \"\"\"The function's docstring\"\"\"\n</syntaxhighlight>\n\n====Ruby====\nComments in [[Ruby (programming language)|Ruby]].\n\nSingle line commenting: (line starts with hash \"#\")\n<syntaxhighlight lang=\"ruby\">\nputs \"This is not a comment\"\n\n# this is a comment\n\nputs \"This is not a comment\"\n</syntaxhighlight>\n\nMulti-line commenting: (comments goes between keywords \"begin\" and \"end\")\n<syntaxhighlight lang=\"Ruby\">\nputs \"This is not a comment\"\n\n=begin\n\nwhatever goes in these lines\n\nis just for the human reader\n\n=end\n\nputs \"This is not a comment\"\n</syntaxhighlight>\n\n==== SQL ====\nStandard comments in SQL are in single-line-only form, using two dashes:\n<syntaxhighlight lang=\"sql\">\n-- This is a single line comment\n-- followed by a second line\nSELECT COUNT(*)\n       FROM Authors\n       WHERE Authors.name = 'Smith'; -- Note: we only want 'smith'\n                                     -- this comment appears after SQL code\n</syntaxhighlight>\nAlternatively, a comment format syntax identical to the \"block comment\" style used in the syntax for C and Java is supported by [[Transact-SQL]], [[MySQL]], [[SQLite]], [[PostgreSQL]], and [[Oracle Database|Oracle]].<ref name=\"MSSQL\">{{cite book\n| title      = Microsoft SQL Server 7\n| first      = Ronald R.\n| last      = Talmage\n| publisher      = Prima Publishing\n| year      = 1999\n| isbn      = 978-0-7615-1389-6\n| url      = https://archive.org/details/microsoftsqlserv00talm\n}}</ref><ref name=\"MySQL\">{{cite web | url=https://dev.mysql.com/doc/refman/8.0/en/comments.html | title=MySQL 8.0 Reference Manual | publisher=Oracle Corporation | accessdate=January 2, 2020}}</ref><ref name=\"SQLite\">{{cite web | url=https://www.sqlite.org/lang_comment.html | title=SQL As Understood By SQLite | publisher=SQLite Consortium | accessdate=January 2, 2020}}</ref><ref name=\"PostgreSQL\">{{cite web | url=https://www.postgresql.org/docs/10/sql-syntax-lexical.html#SQL-SYNTAX-COMMENTS | title=PostgreSQL 10.11 Documentation | publisher=The PostgreSQL Global Development Group | accessdate=January 2, 2020}}</ref><ref name=\"Oracle\">{{cite web | url=https://docs.oracle.com/cd/B13789_01/server.101/b10759/sql_elements006.htm | title=Oracle\u00ae Database SQL Reference | publisher=Oracle Corporation | accessdate=January 2, 2020}}</ref> \n\nMySQL also supports comments from the hash (#) character to the end of the line.\n\n==== Swift ====\nSingle-line comments begin with two forward-slashes (//):<syntaxhighlight lang=\"swift\">\n// This is a comment.\n</syntaxhighlight>Multiline comments start with a forward-slash followed by an asterisk (/*) and end with an asterisk followed by a forward-slash (*/):<syntaxhighlight lang=\"swift\">\n/* This is also a comment\n but is written over multiple lines. */\n</syntaxhighlight>Multiline comments in Swift can be nested inside other multiline comments. You write nested comments by starting a multiline comment block and then starting a second multiline comment within the first block. The second block is then closed, followed by the first block:<syntaxhighlight lang=\"swift\">\n/* This is the start of the first multiline comment.\n /* This is the second, nested multiline comment. */\n This is the end of the first multiline comment. */\n</syntaxhighlight>\n\n====XML====\nComments in [[XML]] (or HTML) are introduced with <syntaxhighlight lang=\"XML\"><!--</syntaxhighlight> and can spread over several lines until the terminator, <syntaxhighlight lang=\"XML\">--></syntaxhighlight>\n\nFor example,\n\n<syntaxhighlight lang=\"xml\">\n<!-- select the context here -->\n<param name=\"context\" value=\"public\" />\n</syntaxhighlight>\n\n==Security issues==\nIn [[interpreted language]]s the comments are viewable to the end user of the program. In some cases, such as sections of code that are \"commented out\", this may present a security [[vulnerability (computing)|vulnerability]].<ref name=\"InsecureComments\">{{cite book\n| last      = Andress\n| first     = Mandy\n| title     = Surviving Security: How to Integrate People, Process, and Technology\n| publisher = CRC Press\n| year      = 2003\n| isbn      = 978-0-8493-2042-2\n}}</ref>\n\n==See also==\n* [[Docstring]], a specific type of comment that is parsed and retained throughout the runtime of the program.\n* [[Shebang (Unix)|Shebang]], the use of ''#!'' as an interpreter directive in scripts on Unix-like systems\n* [[HTML comment tag]]\n* [[Literate programming]], alternative documentation [[programming paradigm|paradigm]]\n* [[Comparison of programming languages (syntax)#Comments|Syntax of comments]] in various programming languages\n\n==Notes and references==\n{{reflist|2}}\n\n== Further reading ==\n* Movshovitz-Attias, Dana and Cohen, William W. (2013) [https://www.cs.cmu.edu/~dmovshov/papers/dma_acl2013.pdf Natural Language Models for Predicting Programming Comments]. In Association for Computational Linguistics (ACL), 2013.\n\n==External links==\n* [https://web.archive.org/web/20110708033309/http://dkrukovsky.blogspot.com/2005/07/how-to-write-comments.html How to Write Comments] by Denis Krukovsky\n* [https://web.archive.org/web/20070722211609/http://www.ptlogica.com/TwinText/resource/liveuser.pdf Source Code Documentation as a Live User Manual] by PTLogica\n* [https://www.oracle.com/technetwork/java/javase/tech/index-137868.html How to Write Comments for the Javadoc Tool]\n* [http://www.stack.nl/~dimitri/doxygen/index.html Doxygen], a documentation system for C, C++, Java, Objective-C, Python, IDL and to some extent PHP, C#, and D\n* [http://blogs.sitepoint.com/2007/10/10/comment-driven-development/ Comment-driven development], a personal presentation of good coding practice\n* [http://www.allthingsoracle.com/how-to-make-comments-the-most-important-code-you-write/ How to make comments the most important 'code' you write] By David Njoku\n\n{{DEFAULTSORT:Comment (Computer Programming)}}\n[[Category:Source code]]\n[[Category:Articles with example code]]\n[[Category:Articles with example C code]]\n[[Category:Articles with example Java code]]\n[[Category:Articles with example Perl code]]\n[[Category:Metadata]]\n", "name_user": "122.169.45.124", "label": "unsafe", "comment": "(\u2192\u200eExternal links)", "url_page": "//en.wikipedia.org/wiki/Comment_(computer_programming)"}
