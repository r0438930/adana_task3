{"title_page": "Von Neumann universal constructor", "text_new": "[[Image:Nobili Pesavento 2reps.png|right|thumb|400px|The first implementation of von Neumann's self-reproducing universal constructor.<ref name=Pesavento1995>{{Citation|journal=Artificial Life| title=An implementation of von Neumann's self-reproducing machine| year=1995| first=Umberto| last=Pesavento|volume=2|issue=4|pages=337\u2013354|publisher=MIT Press|url=http://dragonfly.tam.cornell.edu/~pesavent/pesavento_self_reproducing_machine.pdf|archiveurl=https://web.archive.org/web/20070621164824/http://dragonfly.tam.cornell.edu/~pesavent/pesavento_self_reproducing_machine.pdf |archivedate=June 21, 2007 |format=PDF|doi=10.1162/artl.1995.2.337|pmid=8942052}}</ref> Three generations of machine are shown: the second has nearly finished constructing the third. The lines running to the right are the tapes of genetic instructions, which are copied along with the body of the machines. The machine shown runs in a 32-state version of von Neumann's cellular automata environment, not his original 29-state specification.]]\n\n[[John von Neumann]]'s '''universal constructor''' is a [[self-replicating machine]] in a [[cellular automata]] (CA) environment. It was designed in the 1940s, without the use of a computer. The fundamental details of the machine were published in von Neumann's book ''Theory of Self-Reproducing Automata'', completed in 1966 by [[Arthur Burks|Arthur W. Burks]] after von Neumann's death.<ref name=TSRA>{{Citation| url=https://archive.org/details/theoryofselfrepr00vonn_0| title=''Theory of Self-Reproducing Automata.''| author1=von Neumann, John| author2=Burks, Arthur W.| year=1966| publisher=University of Illinois Press| format=Scanned book online| archivedate=2015-06-24| accessdate=2017-02-28}}</ref>\n\nVon Neumann's goal was to specify an abstract machine which, when run, would replicate itself. In his design, the machine consists of three parts: a 'blueprint' for itself, a mechanism that can read any blueprint and construct the machine (sans blueprint) specified by that blueprint, and a 'copy machine' that can make copies of any blueprint. After the mechanism has been used to construct the machine specified by the blueprint, the copy machine is used to create a copy of that blueprint, and this copy is placed into the new machine, resulting in a working replication of the original machine. Some machines will do this backwards, copying the blueprint and then building a machine.\n\nTo define his machine in more detail, von Neumann invented the concept of a cellular automaton. The [[Von Neumann cellular automaton|one he used]] consists of a two-dimensional grid of cells, each of which can be in one of 29 states at any point in time. At each timestep, each cell updates its state depending on the states of the surrounding cells at the prior timestep. The rules governing these updates are identical for all cells.\n\nThe universal constructor is a certain pattern of cell states in this cellular automaton. It contains one line of cells that serve as a 'tape', encoding a sequence of instructions that serve as a 'blueprint' for the machine. The machine reads these instructions one by one and performs the corresponding actions. The instructions direct the machine to use its 'construction arm' to build a copy of the machine, without tape, at some other location in the cell grid. The tape can't contain instructions to build an equally long tape, just as a container can't contain a container of the same size. Therefore, the machine contains a separate 'copy machine' which reads the tape and places a copy into the newly constructed machine. The resulting new machine and tape is identical to the old one, and it proceeds to replicate again.\n\n== Purpose ==\n\nVon Neumann's design has traditionally been understood to be a demonstration of the logical requirements for machine self-replication.<ref name=McMullin2000>{{Citation|journal=Artificial Life|last=McMullin|first=B.|year=2000|title=John von Neumann and the Evolutionary Growth of Complexity: Looking Backwards, Looking Forwards...|volume=6|issue=4|pages=347\u2013361|url=http://www.eeng.dcu.ie/~alife/bmcm-alj-2000/|doi=10.1162/106454600300103674|pmid=11348586}}</ref> However, it is clear that far simpler machines can achieve self-replication. Examples include trivial [[Crystal growth|crystal-like growth]], [[template replication]], and [[Langton's loops]]. But von Neumann was interested in something more profound: construction, universality, and evolution.<ref name=\"walenz.org\">[http://www.walenz.org/vonNeumann/page0110.html] {{webarchive |url=https://web.archive.org/web/20080613231149/http://www.walenz.org/vonNeumann/page0110.html |date=June 13, 2008 }}</ref>\n\nThis universal constructor can be seen as an abstract [[simulation]] of a physical [[universal assembler]].\n\nNote that the simpler self-replicating CA structures (especially, [[Byl's loop]] and the [[Chou\u2013Reggia loop]]) cannot exist in a wide variety of forms and thus have very limited [[evolvability]]. Other CA structures such as the [[Evoloop]] are somewhat evolvable but still don't support open-ended evolution. Commonly, simple replicators do not fully contain the machinery of construction, there being a degree to which the replicator is information copied by its surrounding environment. Although the Von Neumann design is a logical construction, it is in principle a design that could be instantiated as a physical machine. The issue of the environmental contribution to replication is somewhat open, since there are different conceptions of raw material and its availability.\n\nThe concept of a ''universal constructor'' is non-trivial because of the existence of [[Garden of Eden (cellular automaton)|Garden of Eden patterns]]. But a simple definition is that a universal constructor is able to construct any finite pattern of non-excited (quiescent) cells.\n\nVon Neumann's crucial insight is that part of the replicator has a double use; being both an active component of the construction mechanism, and being the target of a passive copying process. This part is played by the tape of instructions in Von Neumann's combination of universal constructor plus instruction tape.\n\nThe combination of a universal constructor and a tape of instructions would i) allow self-replication, and also ii) guarantee that the open-ended complexity growth observed in biological organisms was possible.<ref name=McMullin2000/> The image below illustrates this possibility.\n\nThis insight is all the more remarkable because it preceded the discovery of the structure of the DNA molecule by [[James Watson|Watson]] and [[Francis Crick|Crick]], though it followed the [[Avery\u2013MacLeod\u2013McCarty experiment]] which identified [[DNA]] as the molecular carrier of genetic information in living organisms.<ref name=Rocha_lec_notes>{{citation |last=Rocha|first=Luis M.|title=Lecture Notes of I-585-Biologically Inspired Computing Course, Indiana University|contribution=Von Neumann and Natural Selection.|url=http://informatics.indiana.edu/rocha/i-bic/pdfs/ibic_lecnotes_c6.pdf}}</ref> The DNA molecule is processed by separate mechanisms that carry out its instructions and copy the DNA for insertion for the newly constructed cell. The ability to achieve open-ended evolution lies in the fact that, just as in nature, errors ([[mutation]]s) in the copying of the genetic tape can lead to viable variants of the automaton, which can then evolve via [[Natural Selection|natural selection]].\n\n[[Image:Pesavento replicator inherited mutations.png|thumb|center|700px|A demonstration of the ability of von Neumann's machine to support inheritable mutations. (1) At an earlier timestep, a mutation was manually added to the second generation machine's tape. (2) Later generations both display the [[phenotype]] of the mutation (a drawing of a flower) and pass the mutation on to their children, since the tape is copied each time. This example illustrates how von Neumann's design allows for complexity growth (in theory) since the tape could specify a machine that is more complex than the one making it.]]\n\n== Implementations ==\n\n[[Arthur Burks]] and others extended the work of von Neumann, giving a much clearer and complete set of details regarding the design and operation of von Neumann's self-replicator. The work of J. W. Thatcher is particularly noteworthy, for he greatly simplified the design. Still, their work did not yield a complete design, cell by cell, of a configuration capable of demonstrating self-replication.\n\n[[Renato Nobili]] and Umberto Pesavento published the first fully implemented self-reproducing cellular automaton in 1995, nearly fifty years after von Neumann's work.<ref name=Pesavento1995/><ref name=NobiliPesavento1996>{{Citation|last=Nobili|first=Renato|last2=Pesavento|first2=Umberto|contribution=Generalised von Neumann's Automata|title=Proc. Artificial Worlds and Urban Studies, Conference 1|year=1996|editor-last=Besussi|editor-first=E.|editor2-last=Cecchini|editor2-first=A.|location=Venice|publisher=DAEST|url=http://www.pd.infn.it/%7Ernobili/pdf_files/jvnconstr.pdf|format=PDF}}</ref> They used a 32-state cellular automaton instead of von Neumann's original [[Von Neumann cellular automaton|29-state specification]], extending it to allow for easier signal-crossing, explicit memory function and a more compact design. They also published an implementation of a general constructor within the original 29-state CA but not one capable of complete replication - the configuration cannot duplicate its tape, nor can it trigger its offspring; the configuration can only construct.<ref name=NobiliPesavento1996/><ref name=Automata2008/>\n\nIn 2004, D. Mange et al. reported an implementation of a self-replicator that is consistent with the designs of von Neumann.<ref>{{Citation|journal=Proceedings of the IEEE| title=A Macroscopic View of Self-replication| volume=92| issue=12| first=Daniel| last=Mange|last2=Stauffer|first2=A.|last3=Peparaolo|first3=L.|last4=Tempesti|first4=G.| pages=1929\u20131945| year=2004|doi=10.1109/JPROC.2004.837631}}</ref>\n\nIn 2007, Nobili published a 32-state implementation that uses [[run-length encoding]] to greatly reduce the size of the tape.<ref>{{cite web|url=http://www.pd.infn.it/~rnobili/wjvn/index.htm |title=Archived copy |accessdate=January 29, 2011 |url-status=dead |archiveurl=https://web.archive.org/web/20110129003524/http://www.pd.infn.it/~rnobili/wjvn/index.htm |archivedate=January 29, 2011 }}</ref>\n\nIn 2008, William R. Buckley published two configurations which are self-replicators within the original 29-state CA of von Neumann.<ref name=Automata2008>{{Citation|title=Proc. Automata 2008|contribution=Signal Crossing Solutions in von Neumann Self-replicating Cellular Automata| year=2008| first=William R.| last=Buckley|editor=[[Andrew Adamatzky]] |editor2=Ramon Alonso-Sanz |editor3=Anna Lawniczak |editor4=Genaro Juarez Martinez |editor5=Kenichi Morita |editor6=Thomas Worsch |pages=453\u2013503|publisher=Luniver Press|url=http://uncomp.uwe.ac.uk/free-books/automata2008reducedsize.pdf}}</ref> Buckley claims that the crossing of signal within von Neumann 29-state cellular automata is not necessary to the construction of self-replicators.<ref name=Automata2008/> Buckley also points out that for the purposes of evolution, each replicator should return to its original configuration after replicating, in order to be capable (in theory) of making more than one copy. As published, the 1995 design of Nobili-Pesavento does not fulfill this requirement but the 2007 design of Nobili does; the same is true of Buckley's configurations.\n\nIn 2009, Buckley published with [[Golly (program)|Golly]] a third configuration for von Neumann 29-state cellular automata, which can perform either holistic self-replication, or self-replication by partial construction.  This configuration also demonstrates that signal crossing is not necessary to the construction of self-replicators within von Neumann 29-state cellular automata.\n\nC. L. Nehaniv in 2002, and also Y. Takada et al. in 2004, proposed a universal constructor directly implemented upon an asynchronous cellular automaton, rather than upon a synchronous cellular automaton.\n<ref>{{Citation|last=Nehaniv|first=Chrystopher L.|year=2002|contribution=Self-Reproduction in Asynchronous Cellular Automata|title=2002 NASA/DoD Conference on Evolvable Hardware (15-18 July 2002, Alexandria, Virginia, USA)|publisher=IEEE Computer Society Press|pages=201\u2013209}}</ref>\n<ref>{{Citation|last=Takada|first=Yousuke|last2=Isokawa|first2=Teijiro|last3=Peper|first3=Ferdinand|\nlast4=Matsui|first4=Nobuyuki|year=2004|contribution=Universal Construction on Self-Timed Cellular Automata|editor-last=Sloot|editor-first=P.M.A.|title=ACRI 2004, LNCS 3305|pages=21\u201330}}</ref>\n\n=== Comparison of implementations ===\n\n{| class=\"wikitable sortable\" style=\"text-align:center\"\n|-\n! Implementation !! Source !! Ruleset !! Rectangular area !! Number of cells !! Length of tape !! Ratio !! Period !! Tape code compression !! Tape code length !! Tape code type !! Replication mechanism !! Replication type !! Growth rate\n|-\n! Nobili-Pesavento, 1995 <ref name=Pesavento1995/>\n| <ref>{{cite web|url=http://www.sq3.org.uk/wiki.pl?Von_Neumann%27s_Self-Reproducing_Universal_Constructor|title=Von Neumann's Self-Reproducing Universal Constructor|publisher=}}</ref> || Nobili 32-state || 97&nbsp;\u00d7&nbsp;170 || 6,329 || 145,315 || 22.96 || 6.34\u2009\u00d7\u200910<sup>10</sup> || none || 5 bits || binary || holistic constructor || non-repeatable || linear\n|-\n! Nobili, 2007\n| SR_CCN_AP.EVN <ref>[https://web.archive.org/web/20110129003524/http://www.pd.infn.it/~rnobili/wjvn/index.htm The Cellular Automata of John von Neumann][http://sourceforge.net/mailarchive/forum.php?thread_name=aac498730807310217udbc6fd8y809c16003ceb3782%40mail.gmail.com&forum_name=golly-test]</ref> || Nobili 32-state || 97&nbsp;\u00d7&nbsp;100 || 5,313 || 56,325 || 10.60 || 9.59\u2009\u00d7\u200910<sup>9</sup> || run-length limited encoding || 5 bits || binary || holistic constructor || repeatable || super-linear\n|-\n! Buckley, 2008\n| codon5.rle <ref name=\"sourceforge.net\">{{cite web|url=http://www.sourceforge.net/projects/golly|title=Golly, a Game of Life simulator|author=andykt|work=SourceForge}}</ref> || Nobili 32-state || 112&nbsp;\u00d7&nbsp;50 || 3,343 || 44,155 || 13.21 || 5.87 x 10<sup>9</sup> || auto-retraction || 5 bits || binary || holistic constructor || repeatable || linear\n|-\n! Buckley, 2008<ref name=Automata2008/>\n| replicator.mc <ref>[http://tomas.rokicki.com/golly-1.5a-win.zip]</ref> || von Neumann 29-state || 312&nbsp;\u00d7&nbsp;132 || 18,589 || 294,844 || 15.86 || 2.61\u2009\u00d7\u200910<sup>11</sup> || auto-retraction || 5 bits || binary || holistic constructor || repeatable || linear\n|-\n! Buckley, 2008\n| codon4.rle <ref name=\"sourceforge.net\"/> || Nobili 32-state || 109&nbsp;\u00d7&nbsp;59 || 3,574 || 37,780 || 10.57 || 4.31 x 10<sup>9</sup> || auto-retraction/bit generation || 4 bits || binary || holistic constructor || repeatable || linear\n|-\n! Buckley, 2009\n| codon3.rle || Nobili 32-state || 116&nbsp;\u00d7&nbsp;95 || 4,855 || 23,577 || 4.86 || 1.63 x 10<sup>9</sup> || auto-retraction/bit generation/code overlay || 3 bits || binary || holistic constructor || repeatable || super-linear\n|-\n! Buckley, 2009\n| PartialReplicator.mc <ref name=\"sourceforge.net\"/> || von Neumann 29-state || 2063&nbsp;\u00d7&nbsp;377 || 264,321 || NA || - || \u22481.12 x 10<sup>14</sup> || none  || 4 bits || binary || partial constructor || repeatable || linear\n|-\n! Goucher & Buckley, 2012\n| phi9.rle <ref>{{cite web|url=http://cp4space.wordpress.com/2012/11/12/self-replication/|title=Self-replication|work=Complex Projective 4-Space}}</ref> || Nobili 32-state || 122&nbsp;\u00d7&nbsp;60 || 3957 || 8920 || 2.25 || - ||  auto-retraction/bit generation/code overlay/run length limited  || 3+ bits || ternary || holistic constructor || repeatable || super-linear\n|}\n\nAs defined by von Neumann, universal construction entails the construction of passive configurations, only. As such, the concept of universal construction constituted nothing more than a literary (or, in this case, mathematical) device. It facilitated other proof, such as that a machine well constructed may engage in self-replication, while universal construction itself was simply assumed over a most minimal case. Universal construction under this standard is trivial. Hence, while all the configurations given here can construct any passive configuration, none can construct the real-time crossing organ devised by Gorman.<ref name=\"Automata2008\"/>\n\n== Practicality ==\n\n=== Computational cost ===\n\nAll the implementations of von Neumann's self-reproducing machine require considerable resources to run on computer. For example, in the Nobili-Pesavento 32-state implementation shown above, while the body of the machine is just 6,329 non-empty cells (within a rectangle of size 97x170), it requires a tape that is 145,315 cells long, and takes 63 billion timesteps to replicate. A simulator running at 1,000 timesteps per second would take over 2 years to make the first copy. In 1995, when the first implementation was published, the authors had not seen their own machine replicate. However, in 2008, the [[hashlife]] algorithm was extended to support the 29-state and 32-state rulesets in [[Golly (program)|Golly]]. On a modern desktop PC, replication now takes only a few minutes, although a significant amount of memory is required.\n\n=== Evolvability ===\n\nIt has been argued that the problem Von Neumann was trying to address was not self-reproduction ''per se'', but the evolutionary growth of complexity.<ref name=McMullin2000/> His \u201cproof-of-principle\u201d designs showed how it is logically possible, by using a general purpose programmable (\u201cuniversal\u201d) constructor, to exhibit an indefinitely large class of self-reproducing machines, spanning a wide range of \u201ccomplexity\u201d (in von Neumann's sense of \u201cthe ability to do complicated things\u201d), interconnected by a network of potential mutational pathways, including pathways from the most simple to the most complex. This is an important result, as prior to that, it might have been conjectured that there is a fundamental logical barrier to the existence of such pathways; in which case, biological organisms, which do support such pathways, could not be \u201cmachines\u201d, as conventionally understood. But the result does not show what ''other'' conditions are necessary, in practice, for evolution along such pathways from simple to complex to be spontaneously realised or followed. In his unfinished work, he briefly considers conflict and interactions between his self-reproducing machines;<ref name=\"TSRA\"/>{{rp|147}} but in practice, his particular model cannot yield evolutionary dynamics because the machines are too fragile - the vast majority of perturbations cause them effectively to disintegrate.<ref name=McMullin2000/>\n\n== Animation gallery ==\n<gallery>\nImage:320 jump read arm.gif|Example of a 29-state read arm.\n</gallery>\n\n== See also ==\n*[[Codd's cellular automaton]]\n*[[Langton's loops]]\n*[[Nobili cellular automata]]\n*[[Quine (computing)|Quine]], a program that produces itself as output\n*[[Santa Claus machine]]\n*[[Wireworld]]\n\n== References ==\n{{reflist}}\n\n== External links ==\n*[http://golly.sourceforge.net/ Golly - the Cellular Automata Simulation Accelerator] Very fast implementation of state transition and support for JvN, GoL, Wolfram, and other systems.\n*[http://www.sq3.org.uk/Evolution/JvN/ von Neumann's Self-Reproducing Universal Constructor] The original Nobili-Pesavento source code, animations and Golly files of the replicators.\n*[http://www.donhopkins.com/drupal/node/41 John von Neumann's 29 state Cellular Automata Implemented in OpenLaszlo] by [[Don Hopkins]]\n*[http://uncomp.uwe.ac.uk/automata2008/buckley/buckley.pdf A Catalogue of Self-Replicating Cellular Automata.]  This catalogue complements the ''Proc. Automata 2008'' volume.\n\n[[Category:Artificial life]]\n[[Category:Cellular automaton patterns]]\n[[Category:Self-replicating machines]]\n[[Category:3D printing]]\n", "text_old": "[[Image:Nobili Pesavento 2reps.png|right|thumb|400px|The first implementation of von Neumann's self-reproducing universal constructor.<ref name=Pesavento1995>{{Citation|journal=Artificial Life| title=An implementation of von Neumann's self-reproducing machine| year=1995| first=Umberto| last=Pesavento|volume=2|issue=4|pages=337\u2013354|publisher=MIT Press|url=http://dragonfly.tam.cornell.edu/~pesavent/pesavento_self_reproducing_machine.pdf|archiveurl=https://web.archive.org/web/20070621164824/http://dragonfly.tam.cornell.edu/~pesavent/pesavento_self_reproducing_machine.pdf |archivedate=June 21, 2007 |format=PDF|doi=10.1162/artl.1995.2.337|pmid=8942052}}</ref> Three generations of machine are shown: the second has nearly finished constructing the third. The lines running to the right are the tapes of genetic instructions, which are copied along with the body of the machines. The machine shown runs in a 32-state version of von Neumann's cellular automata environment, not his original 29-state specification.]]\n\n[[John von Neumann]]'s '''universal constructor''' is a [[self-replicating machine]] in a [[cellular automata]] (CA) environment. It was designed in the 1940s, without the use of a computer. The fundamental details of the machine were published in von Neumann's book ''Theory of Self-Reproducing Automata'', completed in 1966 by [[Arthur Burks|Arthur W. Burks]] after von Neumann's death.<ref name=TSRA>{{Citation| url=https://archive.org/details/theoryofselfrepr00vonn_0| title=''Theory of Self-Reproducing Automata.''| author1=von Neumann, John| author2=Burks, Arthur W.| year=1966| publisher=University of Illinois Press| format=Scanned book online| archivedate=2015-06-24| accessdate=2017-02-28}}</ref>\n\nVon Neumann's goal was to specify an abstract machine which, when run, would replicate itself. In his design, the machine consists of three parts: a 'blueprint' for itself, a mechanism that can read any blueprint and construct the machine (sans blueprint) specified by that blueprint, and a 'copy machine' that can make copies of any blueprint. After the mechanism has been used to construct the machine specified by the blueprint, the copy machine is used to create a copy of that blueprint, and this copy is placed into the new machine, resulting in a working replication of the original machine. Some machines will do this backwards, copying the blueprint and then building a machine.\n\nTo define his machine in more detail, von Neumann invented the concept of a cellular automaton. The [[Von Neumann cellular automaton|one he used]] consists of a two-dimensional grid of cells, each of which can be in one of 29 states at any point in time. At each timestep, each cell updates its state depending on the states of the surrounding cells at the prior timestep. The rules governing these updates are identical for all cells.\n\nThe universal constructor is a certain pattern of cell states in this cellular automaton. It contains one line of cells that serve as a 'tape', encoding a sequence of instructions that serve as a 'blueprint' for the machine. The machine reads these instructions one by one and performs the corresponding actions. The instructions direct the machine to use its 'construction arm' to build a copy of the machine, without tape, at some other location in the cell grid. The tape can't contain instructions to build an equally long tape, just as a container can't contain a container of the same size. Therefore, the machine contains a separate 'copy machine' which reads the tape and places a copy into the newly constructed machine. The resulting new machine and tape is identical to the old one, and it proceeds to replicate again.\n\n== Purpose ==\n\nVon Neumann's design has traditionally been understood to be a demonstration of the logical requirements for machine self-replication.<ref name=McMullin2000>{{Citation|journal=Artificial Life|last=McMullin|first=B.|year=2000|title=John von Neumann and the Evolutionary Growth of Complexity: Looking Backwards, Looking Forwards...|volume=6|issue=4|pages=347\u2013361|url=http://www.eeng.dcu.ie/~alife/bmcm-alj-2000/|doi=10.1162/106454600300103674|pmid=11348586}}</ref> However, it is clear that far simpler machines can achieve self-replication. Examples include trivial [[Crystal growth|crystal-like growth]], [[template replication]], and [[Langton's loops]]. But von Neumann was interested in something more profound: construction, universality, and evolution.<ref name=\"walenz.org\">[http://www.walenz.org/vonNeumann/page0110.html] {{webarchive |url=https://web.archive.org/web/20080613231149/http://www.walenz.org/vonNeumann/page0110.html |date=June 13, 2008 }}</ref>\n\nThis universal constructor can be seen as an abstract [[simulation]] of a physical [[universal assembler]].\n\nNote that the simpler self-replicating CA structures (especially, [[Byl's loop]] and the [[Chou\u2013Reggia loop]]) cannot exist in a wide variety of forms and thus have very limited [[evolvability]]. Other CA structures such as the [[Evoloop]] are somewhat evolvable but still don't support open-ended evolution. Commonly, simple replicators do not fully contain the machinery of construction, there being a degree to which the replicator is information copied by its surrounding environment. Although the Von Neumann design is a logical construction, it is in principle a design that could be instantiated as a physical machine. The issue of the environmental contribution to replication is somewhat open, since there are different conceptions of raw material and its availability.\n\nThe concept of a ''universal constructor'' is non-trivial because of the existence of [[Garden of Eden (cellular automaton)|Garden of Eden patterns]]. But a simple definition is that a universal constructor is able to construct any finite pattern of non-excited (quiescent) cells.\n\nVon Neumann's crucial insight is that part of the replicator has a double use; being both an active component of the construction mechanism, and being the target of a passive copying process. This part is played by the tape of instructions in Von Neumann's combination of universal constructor plus instruction tape.\n\nThe combination of a universal constructor and a tape of instructions would i) allow self-replication, and also ii) guarantee that the open-ended complexity growth observed in biological organisms was possible.<ref name=McMullin2000/> The image below illustrates this possibility.\n\nThis insight is all the more remarkable because it preceded the discovery of the structure of the DNA molecule by [[James Watson|Watson]] and [[Francis Crick|Crick]], though it followed the [[Avery\u2013MacLeod\u2013McCarty experiment]] which identified [[DNA]] as the molecular carrier of genetic information in living organisms.<ref name=Rocha_lec_notes>{{citation |last=Rocha|first=Luis M.|title=Lecture Notes of I-585-Biologically Inspired Computing Course, Indiana University|contribution=Von Neumann and Natural Selection.|url=http://informatics.indiana.edu/rocha/i-bic/pdfs/ibic_lecnotes_c6.pdf}}</ref> The DNA molecule is processed by separate mechanisms that carry out its instructions and copy the DNA for insertion for the newly constructed cell. The ability to achieve open-ended evolution lies in the fact that, just as in nature, errors ([[mutation]]s) in the copying of the genetic tape can lead to viable variants of the automaton, which can then evolve via [[Natural Selection|natural selection]].\n\n[[Image:Pesavento replicator inherited mutations.png|thumb|center|700px|A demonstration of the ability of von Neumann's machine to support inheritable mutations. (1) At an earlier timestep, a mutation was manually added to the second generation machine's tape. (2) Later generations both display the [[phenotype]] of the mutation (a drawing of a flower) and pass the mutation on to their children, since the tape is copied each time. This example illustrates how von Neumann's design allows for complexity growth (in theory) since the tape could specify a machine that is more complex than the one making it.]]\n\n== Implementations ==\n\n[[Arthur Burks]] and others extended the work of von Neumann, giving a much clearer and complete set of details regarding the design and operation of von Neumann's self-replicator. The work of J. W. Thatcher is particularly noteworthy, for he greatly simplified the design. Still, their work did not yield a complete design, cell by cell, of a configuration capable of demonstrating self-replication.\n\n[[Renato Nobili]] and Umberto Pesavento published the first fully implemented self-reproducing cellular automaton in 1995, nearly fifty years after von Neumann's work.<ref name=Pesavento1995/><ref name=NobiliPesavento1996>{{Citation|last=Nobili|first=Renato|last2=Pesavento|first2=Umberto|contribution=Generalised von Neumann's Automata|title=Proc. Artificial Worlds and Urban Studies, Conference 1|year=1996|editor-last=Besussi|editor-first=E.|editor2-last=Cecchini|editor2-first=A.|location=Venice|publisher=DAEST|url=http://www.pd.infn.it/%7Ernobili/pdf_files/jvnconstr.pdf|format=PDF}}</ref> They used a 32-state cellular automaton instead of von Neumann's original [[Von Neumann cellular automaton|29-state specification]], extending it to allow for easier signal-crossing, explicit memory function and a more compact design. They also published an implementation of a general constructor within the original 29-state CA but not one capable of complete replication - the configuration cannot duplicate its tape, nor can it trigger its offspring; the configuration can only construct.<ref name=NobiliPesavento1996/><ref name=Automata2008/>\n\nIn 2004, D. Mange et al. reported an implementation of a self-replicator that is consistent with the designs of von Neumann.<ref>{{Citation|journal=Proceedings of the IEEE| title=A Macroscopic View of Self-replication| volume=92| issue=12| first=Daniel| last=Mange|last2=Stauffer|first2=A.|last3=Peparaolo|first3=L.|last4=Tempesti|first4=G.| pages=1929\u20131945| year=2004|doi=10.1109/JPROC.2004.837631}}</ref>\n\nIn 2007, Nobili published a 32-state implementation that uses [[run-length encoding]] to greatly reduce the size of the tape.<ref>{{cite web|url=http://www.pd.infn.it/~rnobili/wjvn/index.htm |title=Archived copy |accessdate=January 29, 2011 |url-status=dead |archiveurl=https://web.archive.org/web/20110129003524/http://www.pd.infn.it/~rnobili/wjvn/index.htm |archivedate=January 29, 2011 }}</ref>\n\nIn 2008, William R. Buckley published two configurations which are self-replicators within the original 29-state CA of von Neumann.<ref name=Automata2008>{{Citation|title=Proc. Automata 2008|contribution=Signal Crossing Solutions in von Neumann Self-replicating Cellular Automata| year=2008| first=William R.| last=Buckley|editor=[[Andrew Adamatzky]] |editor2=Ramon Alonso-Sanz |editor3=Anna Lawniczak |editor4=Genaro Juarez Martinez |editor5=Kenichi Morita |editor6=Thomas Worsch |pages=453\u2013503|publisher=Luniver Press|url=http://uncomp.uwe.ac.uk/free-books/automata2008reducedsize.pdf}}</ref> Buckley claims that the crossing of signal within von Neumann 29-state cellular automata is not necessary to the construction of self-replicators.<ref name=Automata2008/> Buckley also points out that for the purposes of evolution, each replicator should return to its original configuration after replicating, in order to be capable (in theory) of making more than one copy. As published, the 1995 design of Nobili-Pesavento does not fulfill this requirement but the 2007 design of Nobili does; the same is true of Buckley's configurations.\n\nIn 2009, Buckley published with [[Golly (program)|Golly]] a third configuration for von Neumann 29-state cellular automata, which can perform either holistic self-replication, or self-replication by partial construction.  This configuration also demonstrates that signal crossing is not necessary to the construction of self-replicators within von Neumann 29-state cellular automata.\n\nC. L. Nehaniv in 2002, and also Y. Takada et al. in 2004, proposed a universal constructor directly implemented upon an asynchronous cellular automaton, rather than upon a synchronous cellular automaton.\n<ref>{{Citation|last=Nehaniv|first=Chrystopher L.|year=2002|contribution=Self-Reproduction in Asynchronous Cellular Automata|title=2002 NASA/DoD Conference on Evolvable Hardware (15-18 July 2002, Alexandria, Virginia, USA)|publisher=IEEE Computer Society Press|pages=201\u2013209}}</ref>\n<ref>{{Citation|last=Takada|first=Yousuke|last2=Isokawa|first2=Teijiro|last3=Peper|first3=Ferdinand|\nlast4=Matsui|first4=Nobuyuki|year=2004|contribution=Universal Construction on Self-Timed Cellular Automata|editor-last=Sloot|editor-first=P.M.A.|title=ACRI 2004, LNCS 3305|pages=21\u201330}}</ref>\n\n=== Comparison of implementations ===\n\n{| class=\"wikitable sortable\" style=\"text-align:center\"\n|-\n! Implementation !! Source !! Ruleset !! Rectangular area !! Number of cells !! Length of tape !! Ratio !! Period !! Tape code compression !! Tape code length !! Tape code type !! Replication mechanism !! Replication type !! Growth rate\n|-\n! Nobili-Pesavento, 1995 <ref name=Pesavento1995/>\n| <ref>{{cite web|url=http://www.sq3.org.uk/wiki.pl?Von_Neumann%27s_Self-Reproducing_Universal_Constructor|title=Von Neumann's Self-Reproducing Universal Constructor|publisher=}}</ref> || Nobili 32-state || 97&nbsp;\u00d7&nbsp;170 || 6,329 || 145,315 || 22.96 || 6.34\u2009\u00d7\u200910<sup>10</sup> || none || 5 bits || binary || holistic constructor || non-repeatable || linear\n|-\n! Nobili, 2007\n| SR_CCN_AP.EVN <ref>[https://web.archive.org/web/20110129003524/http://www.pd.infn.it/~rnobili/wjvn/index.htm The Cellular Automata of John von Neumann][http://sourceforge.net/mailarchive/forum.php?thread_name=aac498730807310217udbc6fd8y809c16003ceb3782%40mail.gmail.com&forum_name=golly-test]</ref> || Nobili 32-state || 97&nbsp;\u00d7&nbsp;100 || 5,313 || 56,325 || 10.60 || 9.59\u2009\u00d7\u200910<sup>9</sup> || run-length limited encoding || 5 bits || binary || holistic constructor || repeatable || super-linear\n|-\n! Buckley, 2008\n| codon5.rle <ref name=\"sourceforge.net\">{{cite web|url=http://www.sourceforge.net/projects/golly|title=Golly, a Game of Life simulator|author=andykt|work=SourceForge}}</ref> || Nobili 32-state || 112&nbsp;\u00d7&nbsp;50 || 3,343 || 44,155 || 13.21 || 5.87 x 10<sup>9</sup> || auto-retraction || 5 bits || binary || holistic constructor || repeatable || linear\n|-\n! Buckley, 2008<ref name=Automata2008/>\n| replicator.mc <ref>[http://tomas.rokicki.com/golly-1.5a-win.zip]</ref> || von Neumann 29-state || 312&nbsp;\u00d7&nbsp;132 || 18,589 || 294,844 || 15.86 || 2.61\u2009\u00d7\u200910<sup>11</sup> || auto-retraction || 5 bits || binary || holistic constructor || repeatable || linear\n|-\n! Buckley, 2008\n| codon4.rle <ref name=\"sourceforge.net\"/> || Nobili 32-state || 109&nbsp;\u00d7&nbsp;59 || 3,574 || 37,780 || 10.57 || 4.31 x 10<sup>9</sup> || auto-retraction/bit generation || 4 bits || binary || holistic constructor || repeatable || linear\n|-\n! Buckley, 2009\n| codon3.rle || Nobili 32-state || 116&nbsp;\u00d7&nbsp;95 || 4,855 || 23,577 || 4.86 || 1.63 x 10<sup>9</sup> || auto-retraction/bit generation/code overlay || 3 bits || binary || holistic constructor || repeatable || super-linear\n|-\n! Buckley, 2009\n| PartialReplicator.mc <ref name=\"sourceforge.net\"/> || von Neumann 29-state || 2063&nbsp;\u00d7&nbsp;377 || 264,321 || NA || - || \u22481.12 x 10<sup>14</sup> || none  || 4 bits || binary || partial constructor || repeatable || linear\n|-\n! Goucher & Buckley, 2012\n| phi9.rle <ref>{{cite web|url=http://cp4space.wordpress.com/2012/11/12/self-replication/|title=Self-replication|work=Complex Projective 4-Space}}</ref> || Nobili 32-state || 122&nbsp;\u00d7&nbsp;60 || 3957 || 8920 || 2.25 || - ||  auto-retraction/bit generation/code overlay/run length limited  || 3+ bits || ternary || holistic constructor || repeatable || super-linear\n|}\n\nAs defined by von Neumann, universal construction entails the construction of passive configurations, only. As such, the concept of universal construction constituted nothing more than a literary (or, in this case, mathematical) device. It facilitated other proof, such as that a machine well constructed may engage in self-replication, while universal construction itself was simply assumed over a most minimal case. Universal construction under this standard is trivial. Hence, while all the configurations given here can construct any passive configuration, none can construct the real-time crossing organ devised by Gorman.<ref name=\"Automata2008\"/>\n\n== Practicality ==\n\n=== Computational cost ===\n\nAll the implementations of von Neumann's self-reproducing machine require considerable resources to run on computer. For example, in the Nobili-Pesavento 32-state implementation shown above, while the body of the machine is just 6,329 non-empty cells (within a rectangle of size 97x170), it requires a tape that is 145,315 cells long, and takes 63 billion timesteps to replicate. A simulator running at 1,000 timesteps per second would take over 2 years to make the first copy. In 1995, when the first implementation was published, the authors had not seen their own machine replicate. However, in 2008, the [[hashlife]] algorithm was extended to support the 29-state and 32-state rulesets in [[Golly (program)|Golly]]. On a modern desktop PC, replication now takes only a few minutes, although a significant amount of memory is required.\n\n=== Evolvability ===\n\nIt has been argued that the problem Von Neumann was trying to address was not self-reproduction ''per se'', but the evolutionary growth of complexity.<ref name=McMullin2000/> His \u201cproof-of-principle\u201d designs showed how it is logically possible, by using a general purpose programmable (\u201cuniversal\u201d) constructor, to exhibit an indefinitely large class of self-reproducing machines, spanning a wide range of \u201ccomplexity\u201d (in von Neumann's sense of \u201cthe ability to do complicated things\u201d), interconnected by a network of potential mutational pathways, including pathways from the most simple to the most complex. This is an important result, as prior to that, it might have been conjectured that there is a fundamental logical barrier to the existence of such pathways; in which case, biological organisms, which do support such pathways, could not be \u201cmachines\u201d, as conventionally understood. But the result does not show what ''other'' conditions are necessary, in practice, for evolution along such pathways from simple to complex to be spontaneously realised or followed. In his unfinished work he briefly considers conflict and interactions between his self-reproducing machines;<ref name=\"TSRA\"/>{{rp|147}} but in practice, his particular model cannot yield evolutionary dynamics because the machines are too fragile - the vast majority of perturbations cause them effectively to disintegrate.<ref name=McMullin2000/>\n\n== Animation gallery ==\n<gallery>\nImage:320 jump read arm.gif|Example of a 29-state read arm.\n</gallery>\n\n== See also ==\n*[[Codd's cellular automaton]]\n*[[Langton's loops]]\n*[[Nobili cellular automata]]\n*[[Quine (computing)|Quine]], a program that produces itself as output\n*[[Santa Claus machine]]\n*[[Wireworld]]\n\n== References ==\n{{reflist}}\n\n== External links ==\n*[http://golly.sourceforge.net/ Golly - the Cellular Automata Simulation Accelerator] Very fast implementation of state transition and support for JvN, GoL, Wolfram, and other systems.\n*[http://www.sq3.org.uk/Evolution/JvN/ von Neumann's Self-Reproducing Universal Constructor] The original Nobili-Pesavento source code, animations and Golly files of the replicators.\n*[http://www.donhopkins.com/drupal/node/41 John von Neumann's 29 state Cellular Automata Implemented in OpenLaszlo] by [[Don Hopkins]]\n*[http://uncomp.uwe.ac.uk/automata2008/buckley/buckley.pdf A Catalogue of Self-Replicating Cellular Automata.]  This catalogue complements the ''Proc. Automata 2008'' volume.\n\n[[Category:Artificial life]]\n[[Category:Cellular automaton patterns]]\n[[Category:Self-replicating machines]]\n[[Category:3D printing]]\n", "name_user": "Bumm13", "label": "safe", "comment": "\u2192\u200eEvolvability:punctuation fix", "url_page": "//en.wikipedia.org/wiki/Von_Neumann_universal_constructor"}
