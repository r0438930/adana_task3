{"title_page": "VGA-compatible text mode", "text_new": "<noinclude>{{User:RMCD bot/subject notice|1=VGA text mode|2=Talk:VGA-compatible text mode#Requested move 13 April 2020 }}\n</noinclude>'''VGA text mode''' was introduced in 1987 by IBM as part of the [[Video Graphics Array|VGA]] standard for its [[IBM PS/2]] computers.<ref name=\"pcmag\">{{Cite magazine|last=Petzold|first=Charles|date=July 1987|title=Triple standard: three new video modes from IBM|url=https://books.google.com/books?id=LRBokcwLB70C&pg=PA131|magazine=PC Magazine|publisher=Ziff Davis|accessdate=2020-04-13|url-status=live}}</ref> Its use on [[IBM PC compatible]]s was widespread through the 1990s and persists today for some applications on modern computers.<ref name=\"solaris\">{{Cite web|url=https://docs.oracle.com/cd/E19253-01/816-4854/euazz/index.html|title=Appendix D: Console Frame Buffer Drivers|publisher=Oracle|year=2010|quote=On x86 platforms, the Solaris kernel terminal emulator module (tem) uses VGA text mode exclusively to interact with the vgatext module. The vgatext module uses industry standard VGA text mode to interact with x86 compatible frame buffer devices.}}</ref> The main features of VGA text mode are colored (programmable 16 color [[palette (computing)|palette]]) characters and their background, blinking, various shapes of the [[cursor (computers)|cursor]] (block/underline/hidden static/blinking),<ref>{{Cite web|url=https://web.stanford.edu/class/cs140/projects/pintos/specs/freevga/vga/vgatext.htm|title=Hardware Level VGA and SVGA Video Programming Information Page|author=J. D. Neal|year=1997|quote=The corresponding byte in plane 1 is used to specify the attributes of the character possibly including color, font select, blink, underline and reverse.|accessdate=2020-04-13}}</ref> and loadable fonts (with various glyph sizes).<ref name=\"pcmag tutor\">{{Cite magazine|last=Prosise|first=Jeff|date=30 January 1990|title=Tutor: modifying character sets|url=https://books.google.com/books?id=ySO4VbD0-mcC&pg=PT324|magazine=PC Magazine|publisher=Ziff Davis|accessdate=2020-04-13|url-status=live|quote=Unlike IBM's original video adapters, the CGA and the MDA, which store character bitmaps in ROM where they can't be altered, the EGA and the VGA store them in RAM.}}</ref> The [[Linux console]] traditionally uses hardware VGA text modes,<ref name=\"fbcon.txt\">{{cite web|url=https://www.kernel.org/doc/Documentation/fb/fbcon.txt|title=The Framebuffer Console|publisher=[[kernel.org]]|quote=If fbcon is detached from the console layer, your boot console driver (which is usually VGA text mode) will take over.}}</ref> and the [[Win32 console]] environment has an ability to switch the screen to text mode for some text window sizes.\n\n{| border=\"0\" style=\"float:right; background:#005; color:white; font-size:small; width:50%;\"\n |-\n | colspan=3 |\n\n&nbsp; Distinctive features of VGA text as it commonly used:\n\n&nbsp; Light gray background (normally not white).\n |-\n | align=right |Box drawing.\nVarious<br>back-/foreground<br>combinations.\n |[[Image:VGA text sample animation.gif|144px]]\n |CGA\u2013EGA-style 16&nbsp;color palette for foreground.<br>Blinking text.\n |-\n |&nbsp;\n | align=center |Cursor.<br>&nbsp;\n |&nbsp;\n |}\n\n==Data arrangement==\n===Text buffer===\nEach screen character is represented by two [[octet (computing)|bytes]] aligned as a 16-bit word accessible by the CPU in a single operation. The lower, or character, byte is the actual code point for the current character set, and the higher, or attribute, byte is a [[bit field]] used to select various video attributes such as color, blinking, character set, and so forth.<ref name=\"vgatext\">{{cite web|url=http://www.osdever.net/FreeVGA/vga/vgatext.htm |title=VGA/SVGA Video Programming-VGA Text Mode Operation |website=Osdever.net |date= |accessdate=2016-11-07}}</ref> This byte-pair scheme is among the features that the VGA inherited from the [[Enhanced Graphics Adapter|EGA]], [[Color Graphics Adapter|CGA]], and ultimately from the [[Monochrome Display Adapter|MDA]].\n{| class=\"wikitable\"\n ! colspan=8 | Attribute\n ! colspan=8 | Character\n |-\n | width=48 align=center | 7\n | width=48 align=center | 6\n | width=48 align=center | 5\n | width=48 align=center | 4\n | width=48 align=center | 3\n | width=48 align=center | 2\n | width=48 align=center | 1\n | width=48 align=center | 0\n | width=48 align=center | 7\n | width=48 align=center | 6\n | width=48 align=center | 5\n | width=48 align=center | 4\n | width=48 align=center | 3\n | width=48 align=center | 2\n | width=48 align=center | 1\n | width=48 align=center | 0\n |-\n | align=\"center\" | Blink{{ref label|text_buffer_1|n 1}}\n | colspan=3 align=\"center\" | Background color\n | colspan=4 align=\"center\" | Foreground color{{ref label|text_buffer_2|n. 2}}{{ref label|text_buffer_3|n. 3}}\n | colspan=8 align=\"center\" | Code point\n |}\n#{{note|text_buffer_1}} Depending on the mode setup, attribute bit 7 may be either the blink bit or the fourth background color bit (which allows all 16 colors to be used as background colours).\n#{{note|text_buffer_2}} Attribute bit 3 (foreground intensity) also selects between fonts A and B (see [[#Fonts|below]]). Therefore, if these fonts are not the same, this bit is simultaneously an additional code point bit.\n#{{note|text_buffer_3}} Attribute bit 0 also enables underline, if certain other attribute bits are set to zero (see [[#Underline|below]]).\n\nColors are assigned in the same way as in 4-bit indexed color graphic modes (see [[Video Graphics Array#Color palette|VGA color palette]]).\n{{anchor|MDA features}}VGA modes have no need for the MDA's reverse and bright attributes because foreground and background colors can be set explicitly.\n\n=== Underline ===\nThe VGA hardware has the ability to enable an [[underline]] on any character that has attribute bit 0 set. However, since this is an MDA-compatible feature,<ref name=\"mda\">{{cite web|url=http://www.seasip.info/VintagePC/mda.html |title=Monochrome Display Adapter Notes |website=Seasip.info |date=2005-11-06 |accessdate=2016-11-07}}</ref> the attribute bits not used by the MDA must be set to zero or the underline will not be shown.<ref name=\"vgatext\"/> This means that only bits 3 (intensity) and 7 (blink) can be set concurrently with bit 0 (underline). With the default VGA palette, setting bit 0 to enable underline will also change the text colour to blue. This means text in only two colors can be underlined (5555FF and 0000AA with the default palette).\n\nDespite all this, the underline is not normally visible in color modes, as the location of the underline defaults to a scanline below the character glyph, rendering it invisible.<ref name=\"vgatext\"/> If the underline location is set to a visible scanline (as it is by default when switching to an MDA-compatible monochrome text mode), then the underline will appear.\n\n=== Fonts ===\n[[Image:Norton Utilities 6.01 UI.png|thumb|360px|[[Norton Utilities]] 6.01, an example of advanced [[text user interface|TUI]] which redefines the character set to show tiny graphical [[GUI widget|widget]]s, [[icon (computer)|icon]]s and an arrow pointer in text mode.]]\n[[Image:Codepage-737.png|296px|thumb|right|VGA shows us the [[code page 737]] with Greek letters]]\nScreen fonts used in EGA and VGA are [[monospace font|monospace]] [[raster font]]s containing 256 glyphs. All glyphs in a font are the same size, but this size can be changed. Typically, glyphs are 8 dots wide and 8\u201316 dots high, however the height can be any value up to a maximum of 32. Each row of a glyph is coded in an [[octet (computing)|8 bit byte]], with high bits to the left of the glyph and low bits to the right. Along with several hardware-dependent fonts stored in the adapter's [[Read-only memory|ROM]], the text mode offers 8<ref name=\"vgatext\"/> loadable fonts. Two active font pointers (font&nbsp;A and font&nbsp;B) select two of the available fonts, although they usually point to the same font. When they each point to different fonts, attribute bit 3 (see [[#Text buffer|above]]) acts as a font selection bit instead of as a foreground color bit. On real VGA hardware, this overrides the bit's use for color selection, but on many clones and emulators, the color selection remains&nbsp;\u2014 meaning one font is displayed as normal intensity, and the other as high-intensity. This error can be overcome by changing the palette registers to contain two copies of an 8-color palette.\n\nThere are modes with a character box width of 9 dots (e.g. the default 80\u00d725 mode), however the 9th column is used for spacing between characters, so the content cannot be changed. It is always blank, and drawn with the current background colour.<ref name=\"vgatext\"/> An exception to this is in ''Line Graphics Enable'' mode, which causes code points [[Hexadecimal|0x]]C0 to 0xDF inclusive<ref name=\"vgatext\"/> to have the 8th column repeated as the 9th. These code points cover those [[box drawing characters]] which must extend all the way to the right side of the glyph box. For this reason, placing letter-like characters in code points 0xC0\u20130xDF should be avoided. The box drawing characters from 0xB0 to 0xBF are not extended, as they do not point to the right and so do not require extending.\n\n=== Cursor ===\n[[Image:itmouse.png|thumb|320px|Mouse cursor in [[Impulse Tracker]]]]\nThe shape of the cursor is restricted to a [[rectangle]] the full width of the character box, and [[flood fill|filled]] with the foreground color of the character at the cursor's current location. Its height and position may be arbitrary within a character box;.<ref name=\"textcur\">{{cite web|url=http://www.osdever.net/FreeVGA/vga/textcur.htm |title=VGA/SVGA Video Programming-Manipulating the Text-mode Cursor |website=Osdever.net |date= |accessdate=2016-11-07}}</ref> The EGA and many VGA clones allowed a split-box cursor (appearing as two rectangles, one at the top of the character box and one at the bottom), by setting the end of the cursor before the start, however if this is done on the original VGA, the cursor is completely hidden instead.<ref name=\"textcur\"/> The VGA standard does not provide a way to alter the blink rate,<ref name=\"textcur\"/> although common workarounds involve hiding the cursor and using a normal character glyph to provide a so-called software cursor.\n\nA [[computer mouse|mouse]] cursor in TUI (when implemented) is not usually the same thing as a hardware cursor, but a moving rectangle with altered background or a special glyph.\n\nSome text-based interfaces, such as that of [[Impulse Tracker]], went to even greater lengths to provide a smoother and more graphic-looking mouse cursor. This was done by constantly re-generating character glyphs in real-time according to the cursor's on-screen position and the underlying characters.{{citation needed|date=September 2011}}\n\n== Access methods ==\n{{Original research|section|date=November 2019}}\n\nThere are generally two ways to access VGA text-mode for an application: through the [[Video BIOS]] interface or by directly accessing video [[random access memory|RAM]]<ref name=\"pcmag tutor\" /> and I/O ports. The latter method is considerably faster, and allows quick reading of the text buffer, for which reason it is preferred for advanced TUI programs.\n\nThe VGA text buffer is located at physical memory address 0xB8000.<ref name=\"cyrix\">{{Cite web|url=http://www.eyetap.org/cyborgs/manuals/soft_vga.pdf|archive-url=https://web.archive.org/web/20150816220334/http://www.eyetap.org/cyborgs/manuals/soft_vga.pdf|archive-date=2015-08-16|author=Cyrix|title=VGA Function Specification GXm/MXi Processors|date=1998-01-16}}</ref> Since this is usually used by [[16-bit]] [[x86]] processes operating in real-mode, it is the first half of memory [[x86 memory segmentation|segment]] 0xB800. The text buffer data can be read and written, and [[bitwise operation]]s can be applied. A part of text buffer memory above the scope of the current mode is accessible, but is not shown.\n\nThe same physical addresses are used in [[protected mode]]. Applications may either have this part of memory mapped to their [[address space]] or access it via the [[operating system]]. When an application (on a modern [[computer multitasking|multitasking]] OS) does not have control over the [[system console|console]], it accesses a part of system RAM instead of the actual text buffer.\n\nFor computers in the 1980s, very fast manipulation <!-- there were some difficulties when same memory was accessed simultaneously by CPU and character generator, but I can\u2019t remember details --> of the text buffer, with the hardware generating the individual pixels as fast as they could be displayed, was extremely useful for a fast UI. Even on relatively modern hardware, the [[computational overhead|overhead]] of text mode emulation via hardware [[All Points Addressable|APA]] (graphics) modes (in which the program generates individual pixels and stores them into the video buffer) may be noticeable.\n\n== Modes and timings ==\n\n=== Video signal ===\nFrom the monitor's side, there is no difference in input signal in a text mode and an [[All Points Addressable|APA]] mode of the same size. A text mode signal may have the same [[video signal timing|timings]] as [[VESA]] standard modes. The same registers are used on adapter's side to set up these parameters in a text mode as in APA modes. The text mode output signal is essentially the same as in graphic modes, but its source is a text buffer and character generator, not a [[framebuffer]] as in APA.\n\n=== PC common text modes ===\nDepending on the graphics adapter used, a variety of text modes are available on [[IBM PC compatible]] computers. They are listed on the table below:<ref name=\"PC Mag\">{{cite book|last=Roschi|first=Winn L.|title=VGA Compatibles: Gaining on the New Standard|journal=PC Mag|url=https://books.google.com/books?id=LeosrkjnlM8C&pg=PA177|date=16 February 1988|publisher=Ziff Davis, Inc.|page=177|issn=0888-8507}}</ref>\n\n{| class=\"wikitable\"\n|-\n! Text res.\n! Char. size\n! Graphics res.\n! Colors\n! Adapters\n|-\n| 80\u00d725\n| 9\u00d714\n| 720\u00d7350\n| B&W Text\n| [[IBM Monochrome Display Adapter|MDA]], [[Hercules Graphics Card|Hercules]]\n|-\n| 40\u00d725\n| 8\u00d78\n| 320\u00d7200\n| 16 colors\n| [[Color Graphics Adapter|CGA]], EGA\n|-\n| 80\u00d725\n| 8\u00d78\n| 640\u00d7200\n| 16 colors\n| CGA, EGA\n|-\n| 80\u00d725\n| 8\u00d714\n| 640\u00d7350\n| 16 colors\n| [[Enhanced Graphics Adapter|EGA]]\n|-\n| 80\u00d743\n| 8\u00d78\n| 640\u00d7350\n| 16 colors\n| EGA\n|-\n| 80\u00d725\n| 9\u00d716\n| 720\u00d7400\n| 16 colors\n| [[Video Graphics Array|VGA]]\n|-\n| 80\u00d750\n| 9\u00d78\n| 720\u00d7400\n| 16 colors\n| VGA\n|-\n| 80\u00d760\n|\n|\n| 16 colors\n| [[VESA BIOS Extensions|VESA]]-compatible [[Super VGA]]\n|-\n| 132\u00d725\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|-\n| 132\u00d743\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|-\n| 132\u00d750\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|-\n| 132\u00d760\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|}\n\nVGA and compatible cards support MDA, CGA and EGA modes. All colored modes have the same design of text attributes. MDA modes have some specific features (see [[#MDA features|above]])&nbsp;\u2014 a text could be emphasized with bright, underline, reverse and blinking attributes.\n\nThe most common text mode used in DOS environments and initial Windows consoles is the default 80 columns by 25 rows, or 80\u00d725, with 16 colors and 8\u00d716 pixels large characters. VGA cards always have a built-in font of this size whereas other sizes may require downloading a differently sized font.<ref name=\"openbsd\">{{Cite web|url=https://man.openbsd.org/OpenBSD-3.9/vga.4|date=1999-03-20|title=OpenBSD Programmer's Manual, vga|quote=16 different colors can be displayed at the same time. Characters are 8\u00d716 pixels large, and a font consists of 256 characters. A built-in font of this size is always present on a VGA card.}}</ref> This mode was available on practically all [[IBM]] and compatible personal computers.\n\nTwo other VGA text modes, 80\u00d740 and 80\u00d750, exist but are less common. [[Windows NT 4.0]] displayed its system messages during the boot process in 80\u00d750 text mode.<ref>{{Cite book|url=https://books.google.com/books?id=ApzVAwAAQBAJ&pg=PA223|author=Olga Kokoreva|title=Windows XP Registry: A Complete Guide to Customizing and Optimizing Windows XP|quote=On obvious difference between Windows 2000/XP and Windows NT 4.0 is the fact that all system messages that appear during the Windows NT 4.0 boot process are displayed in 80\u00d750 text mode, while Windows 2000 and Windows XP display these messages in VGA mode.}}</ref>\n\nCharacter sizes and graphical resolutions for the extended [[VESA BIOS Extensions|VESA]]-compatible [[Super VGA]] text modes are manufacturer's dependent. Some cards (e.g. [[S3 Graphics|S3]]) supported custom very large text modes, like 132\u00d743 and 132\u00d725.<ref name=\"S3 manual\">{{Cite web|url=https://web.aub.edu.lb/pub/os/drivers/VGA/S3VIRGE1/375/VC963-3D.TXT|archive-url=https://web.archive.org/web/20200413190535/https://web.aub.edu.lb/pub/os/drivers/VGA/S3VIRGE1/375/VC963-3D.TXT|archive-date=2020-04-13|author=S3 Graphics|title=VC963-3D (S3 ViRGE/DX) User Manual|quote=The S3 ViRGE supports 132\u00d743 and 132\u00d725 extended text modes for text applications. This also allows you to emulate terminals requiring 132 columns of text.}}</ref> Like as in graphic modes, graphic adapters of 2000s commonly are capable to set up an arbitrarily-sized text mode (in reasonable limits) instead of choosing its parameters from some list.\n\n=== SVGATextMode ===\nOn [[Linux]] and DOS systems with so named SVGA cards, a program called SVGATextMode<ref>{{Cite web|url=http://freshmeat.net/projects/svgatextmode|url-status=dead|archive-date=2001-02-03|archive-url=https://web.archive.org/web/20010203143900/http://freshmeat.net/projects/svgatextmode|title=Project details for SVGATextMode|date=2000-03-19|quote=SVGATextMode uses extra features on SVGA cards to enhance Linux textmodes. It allows setting of the pixel clock, H/V timings, font size, cursor size, etc, and lets you use your video card and monitor to their full potential in textmode.}}</ref> can be used to set up better looking text modes than EGA and VGA standard ones. This is particularly useful for [[Computer monitor#Screen size|large]] (\u2265&nbsp;17\") monitors, where the normal 80&times;25 VGA text mode's 720&times;400 pixel resolution is far lower than a typical graphics mode would be. SVGATextMode allows setting of the [[pixel clock]] and higher [[refresh rate]], larger font size, cursor size, etc., and allows a better use of the potential of a video card and monitor. In non-Windows systems, the use of SVGATextMode (or alternative options such as the [[Linux framebuffer]]) to obtain a sharp text is critical for [[LCD monitor]]s of [[1280\u00d71024]] (or higher resolution) because none of so named standard text modes fits to this matrix size. SVGATextMode also allows a fine tuning of video signal timings.\n\nDespite the name of this program, only a few of its supported modes conform to SVGA (i.e. VESA) standards.\n\n== General restrictions ==\nVGA text mode has some hardware-imposed limitations. Because these are too restrictive for modern (post 2000) applications, the hardware text mode on VGA compatible video adapters only has a limited use.\n{| class=\"wikitable\"\n ! Parameter\n ! Original VGA\n ! Modern video adapters\n ! Remarks\n |-\n | Character cell <br />(glyph) width\n | ''8'' or ''9'' dots<ref name=\"vgatext\"/>\n | \u2264&nbsp;''9'' dots\n | rowspan=2 | Not all hardware support glyphs narrower than 8 dots.\n |-\n |Character cell <br />(glyph) height\n | colspan=2 align=center | \u2264&nbsp;''32'' dots\n |-\n | Number of character cells\n | At least <br />''4,000'' <br /><small>(reached at 80\u00d750)</small><!-- it is unclear which were _physical_ limits of a VGA card proper (not software, display system etc.)-->\n | \u2264&nbsp;''16,384'' = 2<sup>14</sup> <br /><small>(memory addressing limitations)</small>\n | rowspan=3 | A modern adapter, if it supports non-standard modes, may produce a reasonably dense text screen even on a large monitor.\n |-\n | Width in character cells<br>([[characters per line]])\n | At least <br />''80''\n | rowspan=2 | \u2264 256(?)\n |-\n | Height in character cells<br />(number of lines)\n | At least <br />''50'' <br /><small>(reached at 80\u00d750)</small>\n |-\n | rowspan=2 | Code page size <br /><small>(number of different glyphs displayed simultaneously)</small>\n | colspan=2 | \u2264&nbsp;''512''&nbsp;=&nbsp;2<sup>9</sup> <br /><small>(if font&nbsp;A \u2260 font&nbsp;B)</small>\n | rowspan=2 | Even 512 is insufficient for [[WGL4|comprehensive Unicode support]].\n |-\n | colspan=2 | \u2264&nbsp;''256''&nbsp;=&nbsp;2<sup>8</sup> <br /><small>(if font&nbsp;A = font&nbsp;B)</small>\n |-\n | Number of colors\n | colspan=2 | <small>foreground:</small> ''16''<sup>*</sup> <br />\n<small>background:</small> ''8'' or ''16''<sup>**</sup>\n | 16 of ''arbitrarily chosen'' colors, not fixed.\n|}\n<sup>*</sup> 8 colors may be used by font&nbsp;A and other 8 colors by font&nbsp;B; so, if font&nbsp;A \u2260 font&nbsp;B (512 characters mode), then the palette should be halved and a text may effectively use only '''8''' colors.<br>\n<sup>**</sup> Normally, first 8 colors of the same palette. If blink is disabled, then all 16 colors are available for background.\n\n==References==\n{{Reflist}}\n\n==External links==\n<!--* [http://www.digitalhermit.com/linux/hiresconsole.html High-Resolution console on Linux]-->\n\n{{Use dmy dates|date=February 2012}}\n\n{{DEFAULTSORT:Vga Compatible Text Mode}}\n[[Category:Text user interface]]\n[[Category:IBM PC compatibles]]\n[[Category:DOS on IBM PC compatibles]]\n", "text_old": "<noinclude>{{User:RMCD bot/subject notice|1=VGA text mode|2=Talk:VGA-compatible text mode#Requested move 13 April 2020 }}\n</noinclude>'''VGA text mode''' was introduced in 1987 by IBM as part of the [[Video Graphics Array|VGA]] standard for its [[IBM PS/2]] computers.<ref name=\"pcmag\">{{Cite magazine|last=Petzold|first=Charles|date=July 1987|title=Triple standard: three new video modes from IBM|url=https://books.google.com/books?id=LRBokcwLB70C&pg=PA131|magazine=PC Magazine|publisher=Ziff Davis|accessdate=2020-04-13|url-status=live}}</ref> Its use on [[IBM PC compatible]]s was widespread through the 1990s and persists today for some applications on modern computers.<ref name=\"solaris\">{{Cite web|url=https://docs.oracle.com/cd/E19253-01/816-4854/euazz/index.html|title=Appendix D: Console Frame Buffer Drivers|publisher=Oracle|year=2010|quote=On x86 platforms, the Solaris kernel terminal emulator module (tem) uses VGA text mode exclusively to interact with the vgatext module. The vgatext module uses industry standard VGA text mode to interact with x86 compatible frame buffer devices.}}</ref> The main features of VGA text mode are colored (programmable 16 color [[palette (computing)|palette]]) characters and their background, blinking, various shapes of the [[cursor (computers)|cursor]] (block/underline/hidden static/blinking),<ref>{{Cite web|url=https://web.stanford.edu/class/cs140/projects/pintos/specs/freevga/vga/vgatext.htm|title=Hardware Level VGA and SVGA Video Programming Information Page|author=J. D. Neal|year=1997|quote=The corresponding byte in plane 1 is used to specify the attributes of the character possibly including color, font select, blink, underline and reverse.|accessdate=2020-04-13}}</ref> and loadable fonts (with various glyph sizes).<ref name=\"pcmag tutor\">{{Cite magazine|last=Prosise|first=Jeff|date=30 January 1990|title=Tutor: modifying character sets|url=https://books.google.com/books?id=ySO4VbD0-mcC&pg=PT324|magazine=PC Magazine|publisher=Ziff Davis|accessdate=2020-04-13|url-status=live|quote=Unlike IBM's original video adapters, the CGA and the MDA, which store character bitmaps in ROM where they can't be altered, the EGA and the VGA store them in RAM.}}</ref> The [[Linux console]] traditionally uses hardware VGA-compatible text modes,<ref name=\"fbcon.txt\">{{cite web|url=https://www.kernel.org/doc/Documentation/fb/fbcon.txt|title=The Framebuffer Console|publisher=[[kernel.org]]|quote=If fbcon is detached from the console layer, your boot console driver (which is usually VGA text mode) will take over.}}</ref> and the [[Win32 console]] environment has an ability to switch the screen to text mode for some text window sizes.\n\n{| border=\"0\" style=\"float:right; background:#005; color:white; font-size:small; width:50%;\"\n |-\n | colspan=3 |\n\n&nbsp; Distinctive features of VGA text as it commonly used:\n\n&nbsp; Light gray background (normally not white).\n |-\n | align=right |Box drawing.\nVarious<br>back-/foreground<br>combinations.\n |[[Image:VGA text sample animation.gif|144px]]\n |CGA\u2013EGA-style 16&nbsp;color palette for foreground.<br>Blinking text.\n |-\n |&nbsp;\n | align=center |Cursor.<br>&nbsp;\n |&nbsp;\n |}\n\n==Data arrangement==\n===Text buffer===\nEach screen character is represented by two [[octet (computing)|bytes]] aligned as a 16-bit word accessible by the CPU in a single operation. The lower, or character, byte is the actual code point for the current character set, and the higher, or attribute, byte is a [[bit field]] used to select various video attributes such as color, blinking, character set, and so forth.<ref name=\"vgatext\">{{cite web|url=http://www.osdever.net/FreeVGA/vga/vgatext.htm |title=VGA/SVGA Video Programming-VGA Text Mode Operation |website=Osdever.net |date= |accessdate=2016-11-07}}</ref> This byte-pair scheme is among the features that the VGA inherited from the [[Enhanced Graphics Adapter|EGA]], [[Color Graphics Adapter|CGA]], and ultimately from the [[Monochrome Display Adapter|MDA]].\n{| class=\"wikitable\"\n ! colspan=8 | Attribute\n ! colspan=8 | Character\n |-\n | width=48 align=center | 7\n | width=48 align=center | 6\n | width=48 align=center | 5\n | width=48 align=center | 4\n | width=48 align=center | 3\n | width=48 align=center | 2\n | width=48 align=center | 1\n | width=48 align=center | 0\n | width=48 align=center | 7\n | width=48 align=center | 6\n | width=48 align=center | 5\n | width=48 align=center | 4\n | width=48 align=center | 3\n | width=48 align=center | 2\n | width=48 align=center | 1\n | width=48 align=center | 0\n |-\n | align=\"center\" | Blink{{ref label|text_buffer_1|n 1}}\n | colspan=3 align=\"center\" | Background color\n | colspan=4 align=\"center\" | Foreground color{{ref label|text_buffer_2|n. 2}}{{ref label|text_buffer_3|n. 3}}\n | colspan=8 align=\"center\" | Code point\n |}\n#{{note|text_buffer_1}} Depending on the mode setup, attribute bit 7 may be either the blink bit or the fourth background color bit (which allows all 16 colors to be used as background colours).\n#{{note|text_buffer_2}} Attribute bit 3 (foreground intensity) also selects between fonts A and B (see [[#Fonts|below]]). Therefore, if these fonts are not the same, this bit is simultaneously an additional code point bit.\n#{{note|text_buffer_3}} Attribute bit 0 also enables underline, if certain other attribute bits are set to zero (see [[#Underline|below]]).\n\nColors are assigned in the same way as in 4-bit indexed color graphic modes (see [[Video Graphics Array#Color palette|VGA color palette]]).\n{{anchor|MDA features}}VGA modes have no need for the MDA's reverse and bright attributes because foreground and background colors can be set explicitly.\n\n=== Underline ===\nThe VGA hardware has the ability to enable an [[underline]] on any character that has attribute bit 0 set. However, since this is an MDA-compatible feature,<ref name=\"mda\">{{cite web|url=http://www.seasip.info/VintagePC/mda.html |title=Monochrome Display Adapter Notes |website=Seasip.info |date=2005-11-06 |accessdate=2016-11-07}}</ref> the attribute bits not used by the MDA must be set to zero or the underline will not be shown.<ref name=\"vgatext\"/> This means that only bits 3 (intensity) and 7 (blink) can be set concurrently with bit 0 (underline). With the default VGA palette, setting bit 0 to enable underline will also change the text colour to blue. This means text in only two colors can be underlined (5555FF and 0000AA with the default palette).\n\nDespite all this, the underline is not normally visible in color modes, as the location of the underline defaults to a scanline below the character glyph, rendering it invisible.<ref name=\"vgatext\"/> If the underline location is set to a visible scanline (as it is by default when switching to an MDA-compatible monochrome text mode), then the underline will appear.\n\n=== Fonts ===\n[[Image:Norton Utilities 6.01 UI.png|thumb|360px|[[Norton Utilities]] 6.01, an example of advanced [[text user interface|TUI]] which redefines the character set to show tiny graphical [[GUI widget|widget]]s, [[icon (computer)|icon]]s and an arrow pointer in text mode.]]\n[[Image:Codepage-737.png|296px|thumb|right|VGA shows us the [[code page 737]] with Greek letters]]\nScreen fonts used in EGA and VGA are [[monospace font|monospace]] [[raster font]]s containing 256 glyphs. All glyphs in a font are the same size, but this size can be changed. Typically, glyphs are 8 dots wide and 8\u201316 dots high, however the height can be any value up to a maximum of 32. Each row of a glyph is coded in an [[octet (computing)|8 bit byte]], with high bits to the left of the glyph and low bits to the right. Along with several hardware-dependent fonts stored in the adapter's [[Read-only memory|ROM]], the text mode offers 8<ref name=\"vgatext\"/> loadable fonts. Two active font pointers (font&nbsp;A and font&nbsp;B) select two of the available fonts, although they usually point to the same font. When they each point to different fonts, attribute bit 3 (see [[#Text buffer|above]]) acts as a font selection bit instead of as a foreground color bit. On real VGA hardware, this overrides the bit's use for color selection, but on many clones and emulators, the color selection remains&nbsp;\u2014 meaning one font is displayed as normal intensity, and the other as high-intensity. This error can be overcome by changing the palette registers to contain two copies of an 8-color palette.\n\nThere are modes with a character box width of 9 dots (e.g. the default 80\u00d725 mode), however the 9th column is used for spacing between characters, so the content cannot be changed. It is always blank, and drawn with the current background colour.<ref name=\"vgatext\"/> An exception to this is in ''Line Graphics Enable'' mode, which causes code points [[Hexadecimal|0x]]C0 to 0xDF inclusive<ref name=\"vgatext\"/> to have the 8th column repeated as the 9th. These code points cover those [[box drawing characters]] which must extend all the way to the right side of the glyph box. For this reason, placing letter-like characters in code points 0xC0\u20130xDF should be avoided. The box drawing characters from 0xB0 to 0xBF are not extended, as they do not point to the right and so do not require extending.\n\n=== Cursor ===\n[[Image:itmouse.png|thumb|320px|Mouse cursor in [[Impulse Tracker]]]]\nThe shape of the cursor is restricted to a [[rectangle]] the full width of the character box, and [[flood fill|filled]] with the foreground color of the character at the cursor's current location. Its height and position may be arbitrary within a character box;.<ref name=\"textcur\">{{cite web|url=http://www.osdever.net/FreeVGA/vga/textcur.htm |title=VGA/SVGA Video Programming-Manipulating the Text-mode Cursor |website=Osdever.net |date= |accessdate=2016-11-07}}</ref> The EGA and many VGA clones allowed a split-box cursor (appearing as two rectangles, one at the top of the character box and one at the bottom), by setting the end of the cursor before the start, however if this is done on the original VGA, the cursor is completely hidden instead.<ref name=\"textcur\"/> The VGA standard does not provide a way to alter the blink rate,<ref name=\"textcur\"/> although common workarounds involve hiding the cursor and using a normal character glyph to provide a so-called software cursor.\n\nA [[computer mouse|mouse]] cursor in TUI (when implemented) is not usually the same thing as a hardware cursor, but a moving rectangle with altered background or a special glyph.\n\nSome text-based interfaces, such as that of [[Impulse Tracker]], went to even greater lengths to provide a smoother and more graphic-looking mouse cursor. This was done by constantly re-generating character glyphs in real-time according to the cursor's on-screen position and the underlying characters.{{citation needed|date=September 2011}}\n\n== Access methods ==\n{{Original research|section|date=November 2019}}\n\nThere are generally two ways to access VGA text-mode for an application: through the [[Video BIOS]] interface or by directly accessing video [[random access memory|RAM]]<ref name=\"pcmag tutor\" /> and I/O ports. The latter method is considerably faster, and allows quick reading of the text buffer, for which reason it is preferred for advanced TUI programs.\n\nThe VGA text buffer is located at physical memory address 0xB8000.<ref name=\"cyrix\">{{Cite web|url=http://www.eyetap.org/cyborgs/manuals/soft_vga.pdf|archive-url=https://web.archive.org/web/20150816220334/http://www.eyetap.org/cyborgs/manuals/soft_vga.pdf|archive-date=2015-08-16|author=Cyrix|title=VGA Function Specification GXm/MXi Processors|date=1998-01-16}}</ref> Since this is usually used by [[16-bit]] [[x86]] processes operating in real-mode, it is the first half of memory [[x86 memory segmentation|segment]] 0xB800. The text buffer data can be read and written, and [[bitwise operation]]s can be applied. A part of text buffer memory above the scope of the current mode is accessible, but is not shown.\n\nThe same physical addresses are used in [[protected mode]]. Applications may either have this part of memory mapped to their [[address space]] or access it via the [[operating system]]. When an application (on a modern [[computer multitasking|multitasking]] OS) does not have control over the [[system console|console]], it accesses a part of system RAM instead of the actual text buffer.\n\nFor computers in the 1980s, very fast manipulation <!-- there were some difficulties when same memory was accessed simultaneously by CPU and character generator, but I can\u2019t remember details --> of the text buffer, with the hardware generating the individual pixels as fast as they could be displayed, was extremely useful for a fast UI. Even on relatively modern hardware, the [[computational overhead|overhead]] of text mode emulation via hardware [[All Points Addressable|APA]] (graphics) modes (in which the program generates individual pixels and stores them into the video buffer) may be noticeable.\n\n== Modes and timings ==\n\n=== Video signal ===\nFrom the monitor's side, there is no difference in input signal in a text mode and an [[All Points Addressable|APA]] mode of the same size. A text mode signal may have the same [[video signal timing|timings]] as [[VESA]] standard modes. The same registers are used on adapter's side to set up these parameters in a text mode as in APA modes. The text mode output signal is essentially the same as in graphic modes, but its source is a text buffer and character generator, not a [[framebuffer]] as in APA.\n\n=== PC common text modes ===\nDepending on the graphics adapter used, a variety of text modes are available on [[IBM PC compatible]] computers. They are listed on the table below:<ref name=\"PC Mag\">{{cite book|last=Roschi|first=Winn L.|title=VGA Compatibles: Gaining on the New Standard|journal=PC Mag|url=https://books.google.com/books?id=LeosrkjnlM8C&pg=PA177|date=16 February 1988|publisher=Ziff Davis, Inc.|page=177|issn=0888-8507}}</ref>\n\n{| class=\"wikitable\"\n|-\n! Text res.\n! Char. size\n! Graphics res.\n! Colors\n! Adapters\n|-\n| 80\u00d725\n| 9\u00d714\n| 720\u00d7350\n| B&W Text\n| [[IBM Monochrome Display Adapter|MDA]], [[Hercules Graphics Card|Hercules]]\n|-\n| 40\u00d725\n| 8\u00d78\n| 320\u00d7200\n| 16 colors\n| [[Color Graphics Adapter|CGA]], EGA\n|-\n| 80\u00d725\n| 8\u00d78\n| 640\u00d7200\n| 16 colors\n| CGA, EGA\n|-\n| 80\u00d725\n| 8\u00d714\n| 640\u00d7350\n| 16 colors\n| [[Enhanced Graphics Adapter|EGA]]\n|-\n| 80\u00d743\n| 8\u00d78\n| 640\u00d7350\n| 16 colors\n| EGA\n|-\n| 80\u00d725\n| 9\u00d716\n| 720\u00d7400\n| 16 colors\n| [[Video Graphics Array|VGA]]\n|-\n| 80\u00d750\n| 9\u00d78\n| 720\u00d7400\n| 16 colors\n| VGA\n|-\n| 80\u00d760\n|\n|\n| 16 colors\n| [[VESA BIOS Extensions|VESA]]-compatible [[Super VGA]]\n|-\n| 132\u00d725\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|-\n| 132\u00d743\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|-\n| 132\u00d750\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|-\n| 132\u00d760\n|\n|\n| 16 colors\n| VESA-compatible Super VGA\n|}\n\nVGA and compatible cards support MDA, CGA and EGA modes. All colored modes have the same design of text attributes. MDA modes have some specific features (see [[#MDA features|above]])&nbsp;\u2014 a text could be emphasized with bright, underline, reverse and blinking attributes.\n\nThe most common text mode used in DOS environments and initial Windows consoles is the default 80 columns by 25 rows, or 80\u00d725, with 16 colors and 8\u00d716 pixels large characters. VGA cards always have a built-in font of this size whereas other sizes may require downloading a differently sized font.<ref name=\"openbsd\">{{Cite web|url=https://man.openbsd.org/OpenBSD-3.9/vga.4|date=1999-03-20|title=OpenBSD Programmer's Manual, vga|quote=16 different colors can be displayed at the same time. Characters are 8\u00d716 pixels large, and a font consists of 256 characters. A built-in font of this size is always present on a VGA card.}}</ref> This mode was available on practically all [[IBM]] and compatible personal computers.\n\nTwo other VGA text modes, 80\u00d740 and 80\u00d750, exist but are less common. [[Windows NT 4.0]] displayed its system messages during the boot process in 80\u00d750 text mode.<ref>{{Cite book|url=https://books.google.com/books?id=ApzVAwAAQBAJ&pg=PA223|author=Olga Kokoreva|title=Windows XP Registry: A Complete Guide to Customizing and Optimizing Windows XP|quote=On obvious difference between Windows 2000/XP and Windows NT 4.0 is the fact that all system messages that appear during the Windows NT 4.0 boot process are displayed in 80\u00d750 text mode, while Windows 2000 and Windows XP display these messages in VGA mode.}}</ref>\n\nCharacter sizes and graphical resolutions for the extended [[VESA BIOS Extensions|VESA]]-compatible [[Super VGA]] text modes are manufacturer's dependent. Some cards (e.g. [[S3 Graphics|S3]]) supported custom very large text modes, like 132\u00d743 and 132\u00d725.<ref name=\"S3 manual\">{{Cite web|url=https://web.aub.edu.lb/pub/os/drivers/VGA/S3VIRGE1/375/VC963-3D.TXT|archive-url=https://web.archive.org/web/20200413190535/https://web.aub.edu.lb/pub/os/drivers/VGA/S3VIRGE1/375/VC963-3D.TXT|archive-date=2020-04-13|author=S3 Graphics|title=VC963-3D (S3 ViRGE/DX) User Manual|quote=The S3 ViRGE supports 132\u00d743 and 132\u00d725 extended text modes for text applications. This also allows you to emulate terminals requiring 132 columns of text.}}</ref> Like as in graphic modes, graphic adapters of 2000s commonly are capable to set up an arbitrarily-sized text mode (in reasonable limits) instead of choosing its parameters from some list.\n\n=== SVGATextMode ===\nOn [[Linux]] and DOS systems with so named SVGA cards, a program called SVGATextMode<ref>{{Cite web|url=http://freshmeat.net/projects/svgatextmode|url-status=dead|archive-date=2001-02-03|archive-url=https://web.archive.org/web/20010203143900/http://freshmeat.net/projects/svgatextmode|title=Project details for SVGATextMode|date=2000-03-19|quote=SVGATextMode uses extra features on SVGA cards to enhance Linux textmodes. It allows setting of the pixel clock, H/V timings, font size, cursor size, etc, and lets you use your video card and monitor to their full potential in textmode.}}</ref> can be used to set up better looking text modes than EGA and VGA standard ones. This is particularly useful for [[Computer monitor#Screen size|large]] (\u2265&nbsp;17\") monitors, where the normal 80&times;25 VGA text mode's 720&times;400 pixel resolution is far lower than a typical graphics mode would be. SVGATextMode allows setting of the [[pixel clock]] and higher [[refresh rate]], larger font size, cursor size, etc., and allows a better use of the potential of a video card and monitor. In non-Windows systems, the use of SVGATextMode (or alternative options such as the [[Linux framebuffer]]) to obtain a sharp text is critical for [[LCD monitor]]s of [[1280\u00d71024]] (or higher resolution) because none of so named standard text modes fits to this matrix size. SVGATextMode also allows a fine tuning of video signal timings.\n\nDespite the name of this program, only a few of its supported modes conform to SVGA (i.e. VESA) standards.\n\n== General restrictions ==\nVGA text mode has some hardware-imposed limitations. Because these are too restrictive for modern (post 2000) applications, the hardware text mode on VGA compatible video adapters only has a limited use.\n{| class=\"wikitable\"\n ! Parameter\n ! Original VGA\n ! Modern video adapters\n ! Remarks\n |-\n | Character cell <br />(glyph) width\n | ''8'' or ''9'' dots<ref name=\"vgatext\"/>\n | \u2264&nbsp;''9'' dots\n | rowspan=2 | Not all hardware support glyphs narrower than 8 dots.\n |-\n |Character cell <br />(glyph) height\n | colspan=2 align=center | \u2264&nbsp;''32'' dots\n |-\n | Number of character cells\n | At least <br />''4,000'' <br /><small>(reached at 80\u00d750)</small><!-- it is unclear which were _physical_ limits of a VGA card proper (not software, display system etc.)-->\n | \u2264&nbsp;''16,384'' = 2<sup>14</sup> <br /><small>(memory addressing limitations)</small>\n | rowspan=3 | A modern adapter, if it supports non-standard modes, may produce a reasonably dense text screen even on a large monitor.\n |-\n | Width in character cells<br>([[characters per line]])\n | At least <br />''80''\n | rowspan=2 | \u2264 256(?)\n |-\n | Height in character cells<br />(number of lines)\n | At least <br />''50'' <br /><small>(reached at 80\u00d750)</small>\n |-\n | rowspan=2 | Code page size <br /><small>(number of different glyphs displayed simultaneously)</small>\n | colspan=2 | \u2264&nbsp;''512''&nbsp;=&nbsp;2<sup>9</sup> <br /><small>(if font&nbsp;A \u2260 font&nbsp;B)</small>\n | rowspan=2 | Even 512 is insufficient for [[WGL4|comprehensive Unicode support]].\n |-\n | colspan=2 | \u2264&nbsp;''256''&nbsp;=&nbsp;2<sup>8</sup> <br /><small>(if font&nbsp;A = font&nbsp;B)</small>\n |-\n | Number of colors\n | colspan=2 | <small>foreground:</small> ''16''<sup>*</sup> <br />\n<small>background:</small> ''8'' or ''16''<sup>**</sup>\n | 16 of ''arbitrarily chosen'' colors, not fixed.\n|}\n<sup>*</sup> 8 colors may be used by font&nbsp;A and other 8 colors by font&nbsp;B; so, if font&nbsp;A \u2260 font&nbsp;B (512 characters mode), then the palette should be halved and a text may effectively use only '''8''' colors.<br>\n<sup>**</sup> Normally, first 8 colors of the same palette. If blink is disabled, then all 16 colors are available for background.\n\n==References==\n{{Reflist}}\n\n==External links==\n<!--* [http://www.digitalhermit.com/linux/hiresconsole.html High-Resolution console on Linux]-->\n\n{{Use dmy dates|date=February 2012}}\n\n{{DEFAULTSORT:Vga Compatible Text Mode}}\n[[Category:Text user interface]]\n[[Category:IBM PC compatibles]]\n[[Category:DOS on IBM PC compatibles]]\n", "name_user": "Alexis Jazz", "label": "safe", "comment": "consistency", "url_page": "//en.wikipedia.org/wiki/VGA-compatible_text_mode"}
