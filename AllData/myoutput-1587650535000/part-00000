{"title_page": "Input/output", "text_new": "{{redirect|I/O}}\n{{about||uses of the term input-output in economics|Input-output model}}\n{{Refimprove|date=November 2019}}\nIn [[computing]], '''input/output''' or '''I/O''' (or, informally, '''io''' or '''IO''') is the communication between an information processing system, such as a [[computer]], and the outside world, possibly a human or another information processing system. [[Information|Inputs]] are the signals or data received by the system and outputs are the signals or [[Data (computing)|data]] sent from it. The term can also be used as part of an action; to \"perform I/O\" is to perform an [[I/O scheduling|input or output operation]]. \n\n'''{{vanchor|I/O devices|IO_DEVICE}}''' are the pieces of [[hardware (computing)|hardware]] used by a human (or other system) to communicate with a computer. For instance, a [[computer keyboard|keyboard]] or [[computer mouse]] is an input device for a computer, while [[computer monitor|monitor]]s and [[computer printer|printer]]s are output devices. Devices for communication between computers, such as [[modem]]s and [[network card]]s, typically perform both input and output operations.\n\nThe designation of a device as either input or output depends on perspective. Mouse and keyboards take physical movements that the human user outputs and convert them into input signals that a computer can understand; the output from these devices is the computer's input. Similarly, printers and monitors take signals that a computer outputs as input, and they convert these signals into a representation that human users can understand. From the human [[user (computing)|user]]'s perspective, the process of reading or seeing these representations is receiving output; this type of interaction between computers and humans is studied in the field of [[human\u2013computer interaction]].\n\nIn computer architecture, the combination of the [[Central processing unit|CPU]] and [[main memory]], to which the CPU can read or write directly using individual [[instruction (computer science)|instructions]], is aconsidered the brain of a computer.  Any transfer of information to or from the CPU/memory combo, for example by reading data from a [[disk drive]], is considered I/O.<ref name=\"teco\">{{cite book |title=The Essentials of Computer Organization and Architecture |last=Null |first=Linda |author2=Julia Lobur |year=2006 |publisher=Jones & Bartlett Learning |isbn=0763737690 |page=185 |url=https://books.google.com.au/books?id=QGPHAl9GE-IC |accessdate=11 December 2016 |url-status=live |archiveurl=https://web.archive.org/web/20161220112332/https://books.google.com.au/books?id=QGPHAl9GE-IC |archivedate=20 December 2016 }}</ref>  The CPU and its supporting circuitry may provide [[memory-mapped I/O]] that is used in low-level [[computer programming]], such as in the implementation of [[device driver]]s, or may provide access to [[Channel I/O|I/O channels]].  An [[External memory algorithm|I/O algorithm]] is one designed to exploit locality and perform efficiently when exchanging data with a secondary storage device, such as a disk drive.\n\n==Interface==\nAn I/O interface is required whenever the I/O device is driven by a processor.  Typically a CPU communicates with devices via a [[bus (computing)|bus]]. The interface must have necessary logic to interpret the device address generated by the processor. [[Handshaking]] should be implemented by the interface using appropriate commands (like BUSY, READY, and WAIT), and the processor can communicate with an I/O device through the interface. If different data formats are being exchanged, the interface must be able to convert serial data to parallel form and vice versa.  Because it would be a waste for a processor to be idle while it waits for data from an input device there must be provision for generating [[interrupt]]s<ref name=\"fcoa\"/> and the corresponding type numbers for further processing by the processor if required.{{Clarify|reason=meaning unclear|date=December 2016}}\n\nA computer that uses [[memory-mapped I/O]] accesses hardware by reading and writing to specific memory locations, using the same assembly language instructions that computer would normally use to access memory.  An alternative method is via instruction-based I/O which requires that a CPU have specialised instructions for I/O.<ref name=\"teco\"/>  Both input and output devices have a [[data processing]] rate that can vary greatly.<ref name=\"fcoa\">{{cite book |title=Fundamentals of Computer Organization and Architecture |last=Abd-El-Barr |first=Mostafa |author2=Hesham El-Rewini |year=2005 |publisher=John Wiley & Sons |isbn=9780471478331 |page=161-162 |url=https://play.google.com/store/books/details?id=m6uFlL41TlIC |accessdate=11 December 2016 |url-status=live |archiveurl=https://web.archive.org/web/20161221033042/https://play.google.com/store/books/details?id=m6uFlL41TlIC |archivedate=21 December 2016 }}</ref>  With some devices able to exchange data at very high speeds [[Direct memory access|direct access]] to memory (DMA) without the continuous aid of a CPU is required.<ref name=\"fcoa\"/>\n\n=== Higher-level implementation ===\nHigher-level [[operating system]] and programming facilities employ separate, more abstract I/O concepts and [[primitive (computer science)|primitive]]s. For example, most operating systems provide application programs with the concept of [[computer file|file]]s. The [[C (programming language)|C]] and [[C++]] programming languages, and operating systems in the [[Unix]] family, traditionally abstract files and devices as [[Stream (computing)|streams]], which can be read or written, or sometimes both. The [[C standard library]] provides [[C file input/output|functions for manipulating streams]] for input and output.\n\nIn the context of the [[ALGOL 68]] programming language, the ''input'' and ''output'' facilities are collectively referred to as ''transput''.  The ''ALGOL 68'' transput library recognizes the following standard files/devices: <code>stand in</code>, <code>stand out</code>, <code>stand errors</code> and <code>stand back</code>.\n\nAn alternative to special primitive functions is the [[I/O monad]], which permits programs to just describe I/O, and the actions are carried out outside the program. This is notable because the {{nowrap|I/O}} functions would introduce [[side-effect (computer science)|side-effect]]s to any programming language, but this allows [[purely functional programming]] to be practical.\n\n== Channel I/O ==\n[[Channel I/O]] requires the use of instructions that are specifically designed to perform I/O operations. The I/O instructions address the channel or the channel and device; the channel asynchronously accesses all other required addressing and control information. This is similar to DMA, but more flexible.\n\n== Port-mapped I/O ==\n[[Memory-mapped I/O|Port-mapped I/O]] also requires the use of special I/O instructions. Typically one or more ports are assigned to the device, each with a special purpose. The port numbers are in a separate address space from that used by normal instructions.\n\n==Direct memory access==\n[[Direct memory access]] (DMA) is a means for devices to transfer large chunks of data to and from memory independently of the CPU.\n\n==See also==\n* [[Asynchronous I/O]]\n* [[I/O bound]]\n\n==References==\n{{Reflist}}\n\n{{DEFAULTSORT:Input output}}\n[[Category:Input/output]]\n", "text_old": "{{redirect|I/O}}\n{{about||uses of the term input-output in economics|Input-output model}}\n{{Refimprove|date=November 2019}}\nIn [[computing]], '''input/output''' or '''I/O''' (or, informally, '''io''' or '''IO''') is the communication between an information processing system, such as a [[computer]], and the outside world, possibly a human or another information processing system. [[Information|Inputs]] are the signals or data received by the system and outputs are the signals or [[Data (computing)|data]] sent from it. The term can also be used as part of an action; to \"perform I/O\" is to perform an [[I/O scheduling|input or output operation]]. \n\n'''{{vanchor|I/O devices|IO_DEVICE}}''' are the pieces of [[hardware (computing)|hardware]] used by a human (or other system) to communicate with a computer. For instance, a [[computer keyboard|keyboard]] or [[computer mouse]] is an input device for a computer, while [[computer monitor|monitor]]s and [[computer printer|printer]]s are output devices. Devices for communication between computers, such as [[modem]]s and [[network card]]s, typically perform both input and output operations.\n\nThe designation of a device as either input or output depends on perspective. Mouse and keyboards take physical movements that the human user outputs and convert them into input signals that a computer can understand; the output from these devices is the computer's input. Similarly, printers and monitors take signals that a computer outputs as input, and they convert these signals into a representation that human users can understand. From the human [[user (computing)|user]]'s perspective, the process of reading or seeing these representations is receiving output; this type of interaction between computers and humans is studied in the field of [[human\u2013computer interaction]].\n\nIn computer architecture, the combination of the [[Central processing unit|CPU]] and [[main memory]], to which the CPU can read or write directly using individual [[instruction (computer science)|instructions]], is considered the brain of a computer.  Any transfer of information to or from the CPU/memory combo, for example by reading data from a [[disk drive]], is considered I/O.<ref name=\"teco\">{{cite book |title=The Essentials of Computer Organization and Architecture |last=Null |first=Linda |author2=Julia Lobur |year=2006 |publisher=Jones & Bartlett Learning |isbn=0763737690 |page=185 |url=https://books.google.com.au/books?id=QGPHAl9GE-IC |accessdate=11 December 2016 |url-status=live |archiveurl=https://web.archive.org/web/20161220112332/https://books.google.com.au/books?id=QGPHAl9GE-IC |archivedate=20 December 2016 }}</ref>  The CPU and its supporting circuitry may provide [[memory-mapped I/O]] that is used in low-level [[computer programming]], such as in the implementation of [[device driver]]s, or may provide access to [[Channel I/O|I/O channels]].  An [[External memory algorithm|I/O algorithm]] is one designed to exploit locality and perform efficiently when exchanging data with a secondary storage device, such as a disk drive.\n\n==Interface==\nAn I/O interface is required whenever the I/O device is driven by a processor.  Typically a CPU communicates with devices via a [[bus (computing)|bus]]. The interface must have necessary logic to interpret the device address generated by the processor. [[Handshaking]] should be implemented by the interface using appropriate commands (like BUSY, READY, and WAIT), and the processor can communicate with an I/O device through the interface. If different data formats are being exchanged, the interface must be able to convert serial data to parallel form and vice versa.  Because it would be a waste for a processor to be idle while it waits for data from an input device there must be provision for generating [[interrupt]]s<ref name=\"fcoa\"/> and the corresponding type numbers for further processing by the processor if required.{{Clarify|reason=meaning unclear|date=December 2016}}\n\nA computer that uses [[memory-mapped I/O]] accesses hardware by reading and writing to specific memory locations, using the same assembly language instructions that computer would normally use to access memory.  An alternative method is via instruction-based I/O which requires that a CPU have specialised instructions for I/O.<ref name=\"teco\"/>  Both input and output devices have a [[data processing]] rate that can vary greatly.<ref name=\"fcoa\">{{cite book |title=Fundamentals of Computer Organization and Architecture |last=Abd-El-Barr |first=Mostafa |author2=Hesham El-Rewini |year=2005 |publisher=John Wiley & Sons |isbn=9780471478331 |page=161-162 |url=https://play.google.com/store/books/details?id=m6uFlL41TlIC |accessdate=11 December 2016 |url-status=live |archiveurl=https://web.archive.org/web/20161221033042/https://play.google.com/store/books/details?id=m6uFlL41TlIC |archivedate=21 December 2016 }}</ref>  With some devices able to exchange data at very high speeds [[Direct memory access|direct access]] to memory (DMA) without the continuous aid of a CPU is required.<ref name=\"fcoa\"/>\n\n=== Higher-level implementation ===\nHigher-level [[operating system]] and programming facilities employ separate, more abstract I/O concepts and [[primitive (computer science)|primitive]]s. For example, most operating systems provide application programs with the concept of [[computer file|file]]s. The [[C (programming language)|C]] and [[C++]] programming languages, and operating systems in the [[Unix]] family, traditionally abstract files and devices as [[Stream (computing)|streams]], which can be read or written, or sometimes both. The [[C standard library]] provides [[C file input/output|functions for manipulating streams]] for input and output.\n\nIn the context of the [[ALGOL 68]] programming language, the ''input'' and ''output'' facilities are collectively referred to as ''transput''.  The ''ALGOL 68'' transput library recognizes the following standard files/devices: <code>stand in</code>, <code>stand out</code>, <code>stand errors</code> and <code>stand back</code>.\n\nAn alternative to special primitive functions is the [[I/O monad]], which permits programs to just describe I/O, and the actions are carried out outside the program. This is notable because the {{nowrap|I/O}} functions would introduce [[side-effect (computer science)|side-effect]]s to any programming language, but this allows [[purely functional programming]] to be practical.\n\n== Channel I/O ==\n[[Channel I/O]] requires the use of instructions that are specifically designed to perform I/O operations. The I/O instructions address the channel or the channel and device; the channel asynchronously accesses all other required addressing and control information. This is similar to DMA, but more flexible.\n\n== Port-mapped I/O ==\n[[Memory-mapped I/O|Port-mapped I/O]] also requires the use of special I/O instructions. Typically one or more ports are assigned to the device, each with a special purpose. The port numbers are in a separate address space from that used by normal instructions.\n\n==Direct memory access==\n[[Direct memory access]] (DMA) is a means for devices to transfer large chunks of data to and from memory independently of the CPU.\n\n==See also==\n* [[Asynchronous I/O]]\n* [[I/O bound]]\n\n==References==\n{{Reflist}}\n\n{{DEFAULTSORT:Input output}}\n[[Category:Input/output]]\n", "name_user": "2409:4055:593:71d:aebb:d0e1:163c:3c86", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Input/output"}
