{"title_page": "Scrypt", "text_new": "{{short description|Password-based key derivation function created in 2009}}\n{{distinguish|Script (disambiguation)}}\n{{lowercase}}\n{{Infobox cryptographic hash function\n| name = scrypt\n| image =\n| caption =\n<!-- General -->\n| designers = Colin Percival\n| publish date = 2009\n| series =\n| derived from =\n| derived to =\n| related to =\n| certification =\n<!-- Detail -->\n| digest size = variable\n| block size = variable\n| structure =\n| rounds = variable\n| cryptanalysis =\n}}\n\nIn [[cryptography]], '''scrypt''' (pronounced \"ess crypt\"<ref>{{cite web|title=Colin Percival on Twitter|url=https://twitter.com/cperciva/status/734613598383841281}}</ref>) is a password-based [[key derivation function]] created by Colin Percival, originally for the [[Tarsnap]] online backup service.<ref>{{cite web|title=scrypt page on the Tarsnap website|url=http://www.tarsnap.com/scrypt.html|accessdate=21 January 2014}}</ref>  The algorithm was specifically designed to make it costly to perform large-scale [[custom hardware attack]]s by requiring large amounts of memory. In 2016, the scrypt algorithm was published by [[Internet Engineering Task Force|IETF]] as RFC 7914. A simplified version of scrypt is used as a [[proof-of-work]] scheme by a number of [[Cryptocurrency|cryptocurrencies]], first implemented by an anonymous programmer called ArtForz in Tenebrix and followed by Fairbrix and [[Litecoin]] soon after.<ref>{{cite web|url=https://motherboard.vice.com/en_us/article/4x3ywn/beyond-bitcoin-a-guide-to-the-most-promising-cryptocurrencies|title=Beyond Bitcoin: A Guide to the Most Promising Cryptocurrencies|first=|date=|website=|access-date=|author=Alec Liu}}</ref>\n\n== Introduction ==\n\nA password-based [[key derivation function]] (password-based KDF) is generally designed to be computationally intensive, so that it takes a relatively long time to compute (say on the order of several hundred milliseconds). Legitimate users only need to perform the function once per operation (e.g., authentication), and so the time required is negligible. However, a brute-force attack would likely need to perform the operation billions of times, at which point the time requirements become significant and, ideally, prohibitive.\n\nPrevious password-based KDFs (such as the popular [[PBKDF2]] from [[RSA Laboratories]]) have relatively low resource demands, meaning they do not require elaborate hardware or very much memory to perform. They are therefore easily and cheaply implemented in hardware (for instance on an [[Application-specific integrated circuit|ASIC]] or even an [[Field-programmable gate array|FPGA]]). This allows an attacker with sufficient resources to launch a large-scale parallel attack by building hundreds or even thousands of implementations of the algorithm in hardware and having each search a different subset of the key space. This divides the amount of time needed to complete a brute-force attack by the number of implementations available, very possibly bringing it down to a reasonable time frame.\n\nThe scrypt function is designed to hinder such attempts by raising the resource demands of the algorithm. Specifically, the algorithm is designed to use a large amount of memory compared to other password-based KDFs,<ref>[http://www.tarsnap.com/scrypt/scrypt.pdf Stronger Key Derivation Via Sequential Memory-Hard Functions], \nColin Percival</ref> \nmaking the size and the cost of a hardware implementation much more expensive, and therefore limiting the amount of parallelism an attacker can use, for a given amount of financial resources.\n\n== Overview ==\nThe large memory requirements of scrypt come from a large vector of [[pseudorandom]] bit strings that are generated as part of the algorithm. Once the vector is generated, the elements of it are accessed in a pseudo-random order and combined to produce the derived key. A straightforward implementation would need to keep the entire vector in RAM so that it can be accessed as needed.\n\nBecause the elements of the vector are generated algorithmically, each element could be generated ''on the fly'' as needed, only storing one element in memory at a time and therefore cutting the memory requirements significantly. However, the generation of each element is intended to be computationally expensive, and the elements are expected to be accessed many times throughout the execution of the function. Thus there is a significant trade-off in speed in order to get rid of the large memory requirements.\n\nThis sort of [[Space\u2013time tradeoff|time\u2013memory trade-off]] often exists in computer algorithms: speed can be increased at the cost of using more memory, or memory requirements decreased at the cost of performing more operations and taking longer. The idea behind scrypt is to deliberately make this trade-off costly in either direction. Thus an attacker could use an implementation that doesn't require many resources (and can therefore be massively parallelized with limited expense) but runs very slowly, or use an implementation that runs more quickly but has very large memory requirements and is therefore more expensive to parallelize.\n\n== Algorithm ==\n\nThe algorithm includes the following parameters:\n\n* Passphrase - The string of characters to be hashed.\n* [[Salt (cryptography)|Salt]] - A string of characters that modifies the hash to protect against [[Rainbow table]] attacks\n* N - CPU/memory cost parameter.\n* p - Parallelization parameter; a positive integer satisfying p \u2264 (2<sup>32</sup>\u2212 1) * hLen / MFLen.\n* dkLen - Intended output length in octets of the derived key; a positive integer satisfying dkLen \u2264 (2<sup>32</sup>\u2212 1) * hLen.\n* r - The blocksize parameter, which fine-tunes sequential memory read size and performance. 8 is commonly used.\n* hLen - The length in octets of the hash function (32 for SHA256).\n* MFlen - The length in octets of the output of the mixing function (''SMix'' below). Defined as r * 128 in RFC7914.\n\n <span style=\"color:blue;\">'''Function'''</span> scrypt\n    <span style=\"color:blue;\">'''Inputs:'''</span>\n       Passphrase:                Bytes    <span style=\"color:green;\">string of characters to be hashed</span>\n       Salt:                      Bytes    <span style=\"color:green;\">random [[Salt (cryptography)|salt]]</span>\n       CostFactor (N):            Integer  <span style=\"color:green;\">CPU/memory cost parameter - Must be a power of 2 (e.g. 1024)</span>\n       BlockSizeFactor (r):       Integer  <span style=\"color:green;\">blocksize parameter (8 is commonly used)</span>\n       ParallelizationFactor (p): Integer  <span style=\"color:green;\">''Parallelization parameter. (1..2<sup>32</sup>-1 * hLen/MFlen)''</span>\n       DesiredKeyLen:             Integer  <span style=\"color:green;\">Desired key length in bytes</span>\n    <span style=\"color:blue;\">'''Output:'''</span>\n       DerivedKey:                Bytes    <span style=\"color:green;\">array of bytes, DesiredKeyLen long</span>\n \n    <span style=\"color:green;\">''Step 1. Generate expensive salt''</span>\n    blockSize \u2190 128*BlockSizeFactor  <span style=\"color:green;\">//Length (in bytes) of the SMix mixing function output (e.g. 128*8 = 1024 bytes)</span>\n \n    <span style=\"color:green;\">Use PBKDF2 to generate initial 128*BlockSizeFactor*p bytes of data (e.g. 128*8*3 = 3072 bytes)</span>\n    <span style=\"color:green;\">Treat the result as an array of ''p'' elements, each entry being ''blocksize'' bytes (e.g. 3 elements, each 1024 bytes)</span>\n    [B<sub>0</sub>...B<sub>p\u22121</sub>] \u2190 [[PBKDF2]]<sub>HMAC-SHA256</sub>(''Passphrase'', ''Salt'', 1, blockSize*ParallelizationFactor)\n \n    <span style=\"color:green;\">Mix each block in '''B''' Costfactor times using '''ROMix''' function (each block can be mixed in parallel)</span>\n    <span style=\"color:blue;\">'''for'''</span> i \u2190 0 <span style=\"color:blue;\">'''to'''</span> p-1 <span style=\"color:blue;\">'''do'''</span>\n       B<sub>i</sub> \u2190 ROMix(B<sub>i</sub>, CostFactor)\n \n    <span style=\"color:green;\">All the elements of B is our new \"expensive\" salt</span>\n    expensiveSalt \u2190 B<sub>0</sub>\u2225B<sub>1</sub>\u2225B<sub>2</sub>\u2225 ... \u2225B<sub>p-1</sub>  <span style=\"color:green;\">''//where \u2225 is concatenation</span>\n  \n    <span style=\"color:green;\">''Step 2. Use PBKDF2 to generate the desired number of bytes, but using the expensive salt we just generated''</span>\n    <span style=\"color:blue;\">'''return'''</span> PBKDF2<sub>HMAC-SHA256</sub>(Passphrase, expensiveSalt, 1, DesiredKeyLen);\n\nWhere ''PBKDF2(P, S, c, dkLen)'' notation is defined in RFC 2898, where c is an iteration count.\n\nThis notation is used by RFC 7914 for specifying a usage of PBKDF2 with c = 1.\n '''Function''' ROMix(Block, Iterations)\n \n    <span style=\"color:green;\">Create ''Iterations'' copies of ''X''</span>\n    X \u2190 Block\n    '''for''' i \u2190 0 '''to''' Iterations\u22121 '''do'''\n       V<sub>i</sub> \u2190 X\n       X \u2190 BlockMix(X)\n \n    '''for''' i \u2190 0 '''to''' Iterations\u22121 '''do'''\n       j \u2190 Integerify(X) mod Iterations \n       X \u2190 BlockMix(X '''xor''' V<sub>j</sub>)\n \n    '''return''' X\n\nWhere RFC 7914 defines ''Integerify(X)'' as the result of interpreting the last 64 bytes of X as a ''little-endian'' integer A<sub>1</sub>.\n\nSince Iterations equals 2 to the power of N, only the ''first'' Ceiling(N / 8) bytes among the ''last'' 64 bytes of X, interpreted as a ''little-endian'' integer A<sub>2</sub>, are actually needed to compute ''Integerify(X) mod Iterations = A<sub>1</sub> mod Iterations = A<sub>2</sub> mod Iterations''.\n\n '''Function''' BlockMix(B):\n \n     <span style=\"color:green;\">''The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)''</span>\n     r \u2190 Length(B) / 128;\n \n     <span style=\"color:green;\">''Treat B as an array of 2r 64-byte chunks''</span>\n     [B<sub>0</sub>...B<sub>2r-1</sub>] \u2190 B\n \n     X \u2190 B<sub>2r\u22121</sub>\n     '''for''' i \u2190 0 '''to''' 2r\u22121 '''do'''\n         X \u2190 Salsa20/8(X xor B<sub>i</sub>)  <span style=\"color:green;\">'''//Salsa20/8 hashes from 64-bytes to 64-bytes'''</span>\n         Y<sub>i</sub> \u2190 X\n \n     '''return''' \u2190 Y<sub>0</sub>\u2225Y<sub>2</sub>\u2225...\u2225Y<sub>2r\u22122</sub> \u2225 Y<sub>1</sub>\u2225Y<sub>3</sub>\u2225...\u2225Y<sub>2r\u22121</sub>\n\nWhere ''Salsa20/8'' is the 8-round version of [[Salsa20]].\n\n== Cryptocurrency uses ==\nScrypt is used in many cryptocurrencies as a [[proof-of-work]] algorithm. It was first implemented for Tenebrix (released in September 2011) and served as the basis for [[Litecoin]] and [[Dogecoin]], which also adopted its scrypt algorithm.<ref>{{cite book |url=https://books.google.com/books?id=IXmrBQAAQBAJ&pg=PA221 |title=Mastering Bitcoin: Unlocking Digital Cryptocurrencies |pages=221, 223 |author=Andreas M. Antonopoulos |date=3 December 2014 |publisher=O'Reilly Media |isbn=9781491902646 }}</ref><ref>{{cite web | url=https://litecoin.info/History_of_cryptocurrency | title=History of cryptocurrency | accessdate=27 June 2014 | archive-url=https://web.archive.org/web/20160611133738/https://litecoin.info/History_of_cryptocurrency | archive-date=11 June 2016 | url-status=dead }}</ref> Mining of [[cryptocurrencies]] that use scrypt is often performed on graphics processing units ([[GPUs]]) since GPUs tend to have significantly more processing power (for some algorithms) compared to the CPU.<ref>{{cite book|url=https://www.amazon.com/Litecoin-Scrypt-Mining-Configurations-Radeon-ebook/dp/B00E2RT1I4|title=Litecoin Scrypt Mining Configurations for Radeon 7950|author=Roman Guelfi-Gibbs|publisher=Amazon Digital Services}}</ref>  This led to shortages of high end GPUs due to the rising price of these currencies in the months of November and December 2013.<ref>{{cite web|url=http://www.extremetech.com/computing/172381-massive-surge-in-litecoin-mining-leads-to-radeon-shortage|author=Joel Hruska|title=Massive surge in Litecoin mining leads to graphics card shortage|date=10 December 2013|publisher=ExtremeTech}}</ref>\n\nAs of May 2014, specialized [[Application-specific integrated circuit|ASIC]] mining hardware is available for scrypt-based cryptocurrencies{{cn|date=May 2019}}, as a result, [[Argon2]] (winner of the [[Password Hashing Competition]] in 2015) should be preferred when choosing a password hashing algorithm<ref>{{Cite web|url=https://medium.com/analytics-vidhya/password-hashing-pbkdf2-scrypt-bcrypt-and-argon2-e25aaf41598e|title=Password Hashing: PBKDF2, Scrypt, Bcrypt and ARGON2|last=Preziuso|first=Michele|date=2020-04-23|website=Medium|language=en|access-date=2020-04-25}}</ref>.\n== See also ==\n* [[Key derivation function]]\n* [[Argon2]], winner of the Password Hashing Competition\n* [[Crypt (C)|crypt]], password storage and verification scheme\n* [[PBKDF2]], a widely used standard password-based key derivation function\n* [[bcrypt]], password hashing function using [[Blowfish (cipher)|Blowfish]]\n* [[Space\u2013time tradeoff]]\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [http://www.tarsnap.com/scrypt.html The scrypt page on the Tarsnap website.]\n* [http://www.tarsnap.com/scrypt/scrypt.pdf The original scrypt paper.]\n\n{{Cryptography navbox|hash}}\n\n{{Cryptocurrencies}}\n\n[[Category:Cryptographic algorithms]]\n[[Category:Key derivation functions]]\n[[Category:Articles with example pseudocode]]\n", "text_old": "{{short description|Password-based key derivation function created in 2009}}\n{{distinguish|Script (disambiguation)}}\n{{lowercase}}\n{{Infobox cryptographic hash function\n| name = scrypt\n| image =\n| caption =\n<!-- General -->\n| designers = Colin Percival\n| publish date = 2009\n| series =\n| derived from =\n| derived to =\n| related to =\n| certification =\n<!-- Detail -->\n| digest size = variable\n| block size = variable\n| structure =\n| rounds = variable\n| cryptanalysis =\n}}\n\nIn [[cryptography]], '''scrypt''' (pronounced \"ess crypt\"<ref>{{cite web|title=Colin Percival on Twitter|url=https://twitter.com/cperciva/status/734613598383841281}}</ref>) is a password-based [[key derivation function]] created by Colin Percival, originally for the [[Tarsnap]] online backup service.<ref>{{cite web|title=scrypt page on the Tarsnap website|url=http://www.tarsnap.com/scrypt.html|accessdate=21 January 2014}}</ref>  The algorithm was specifically designed to make it costly to perform large-scale [[custom hardware attack]]s by requiring large amounts of memory. In 2016, the scrypt algorithm was published by [[Internet Engineering Task Force|IETF]] as RFC 7914. A simplified version of scrypt is used as a [[proof-of-work]] scheme by a number of [[Cryptocurrency|cryptocurrencies]], first implemented by an anonymous programmer called ArtForz in Tenebrix and followed by Fairbrix and [[Litecoin]] soon after.<ref>{{cite web|url=https://motherboard.vice.com/en_us/article/4x3ywn/beyond-bitcoin-a-guide-to-the-most-promising-cryptocurrencies|title=Beyond Bitcoin: A Guide to the Most Promising Cryptocurrencies|first=|date=|website=|access-date=|author=Alec Liu}}</ref>\n\n== Introduction ==\n\nA password-based [[key derivation function]] (password-based KDF) is generally designed to be computationally intensive, so that it takes a relatively long time to compute (say on the order of several hundred milliseconds). Legitimate users only need to perform the function once per operation (e.g., authentication), and so the time required is negligible. However, a brute-force attack would likely need to perform the operation billions of times, at which point the time requirements become significant and, ideally, prohibitive.\n\nPrevious password-based KDFs (such as the popular [[PBKDF2]] from [[RSA Laboratories]]) have relatively low resource demands, meaning they do not require elaborate hardware or very much memory to perform. They are therefore easily and cheaply implemented in hardware (for instance on an [[Application-specific integrated circuit|ASIC]] or even an [[Field-programmable gate array|FPGA]]). This allows an attacker with sufficient resources to launch a large-scale parallel attack by building hundreds or even thousands of implementations of the algorithm in hardware and having each search a different subset of the key space. This divides the amount of time needed to complete a brute-force attack by the number of implementations available, very possibly bringing it down to a reasonable time frame.\n\nThe scrypt function is designed to hinder such attempts by raising the resource demands of the algorithm. Specifically, the algorithm is designed to use a large amount of memory compared to other password-based KDFs,<ref>[http://www.tarsnap.com/scrypt/scrypt.pdf Stronger Key Derivation Via Sequential Memory-Hard Functions], \nColin Percival</ref> \nmaking the size and the cost of a hardware implementation much more expensive, and therefore limiting the amount of parallelism an attacker can use, for a given amount of financial resources.\n\n== Overview ==\nThe large memory requirements of scrypt come from a large vector of [[pseudorandom]] bit strings that are generated as part of the algorithm. Once the vector is generated, the elements of it are accessed in a pseudo-random order and combined to produce the derived key. A straightforward implementation would need to keep the entire vector in RAM so that it can be accessed as needed.\n\nBecause the elements of the vector are generated algorithmically, each element could be generated ''on the fly'' as needed, only storing one element in memory at a time and therefore cutting the memory requirements significantly. However, the generation of each element is intended to be computationally expensive, and the elements are expected to be accessed many times throughout the execution of the function. Thus there is a significant trade-off in speed in order to get rid of the large memory requirements.\n\nThis sort of [[Space\u2013time tradeoff|time\u2013memory trade-off]] often exists in computer algorithms: speed can be increased at the cost of using more memory, or memory requirements decreased at the cost of performing more operations and taking longer. The idea behind scrypt is to deliberately make this trade-off costly in either direction. Thus an attacker could use an implementation that doesn't require many resources (and can therefore be massively parallelized with limited expense) but runs very slowly, or use an implementation that runs more quickly but has very large memory requirements and is therefore more expensive to parallelize.\n\n== Algorithm ==\n\nThe algorithm includes the following parameters:\n\n* Passphrase - The string of characters to be hashed.\n* [[Salt (cryptography)|Salt]] - A string of characters that modifies the hash to protect against [[Rainbow table]] attacks\n* N - CPU/memory cost parameter.\n* p - Parallelization parameter; a positive integer satisfying p \u2264 (2<sup>32</sup>\u2212 1) * hLen / MFLen.\n* dkLen - Intended output length in octets of the derived key; a positive integer satisfying dkLen \u2264 (2<sup>32</sup>\u2212 1) * hLen.\n* r - The blocksize parameter, which fine-tunes sequential memory read size and performance. 8 is commonly used.\n* hLen - The length in octets of the hash function (32 for SHA256).\n* MFlen - The length in octets of the output of the mixing function (''SMix'' below). Defined as r * 128 in RFC7914.\n\n <span style=\"color:blue;\">'''Function'''</span> scrypt\n    <span style=\"color:blue;\">'''Inputs:'''</span>\n       Passphrase:                Bytes    <span style=\"color:green;\">string of characters to be hashed</span>\n       Salt:                      Bytes    <span style=\"color:green;\">random [[Salt (cryptography)|salt]]</span>\n       CostFactor (N):            Integer  <span style=\"color:green;\">CPU/memory cost parameter - Must be a power of 2 (e.g. 1024)</span>\n       BlockSizeFactor (r):       Integer  <span style=\"color:green;\">blocksize parameter (8 is commonly used)</span>\n       ParallelizationFactor (p): Integer  <span style=\"color:green;\">''Parallelization parameter. (1..2<sup>32</sup>-1 * hLen/MFlen)''</span>\n       DesiredKeyLen:             Integer  <span style=\"color:green;\">Desired key length in bytes</span>\n    <span style=\"color:blue;\">'''Output:'''</span>\n       DerivedKey:                Bytes    <span style=\"color:green;\">array of bytes, DesiredKeyLen long</span>\n \n    <span style=\"color:green;\">''Step 1. Generate expensive salt''</span>\n    blockSize \u2190 128*BlockSizeFactor  <span style=\"color:green;\">//Length (in bytes) of the SMix mixing function output (e.g. 128*8 = 1024 bytes)</span>\n \n    <span style=\"color:green;\">Use PBKDF2 to generate initial 128*BlockSizeFactor*p bytes of data (e.g. 128*8*3 = 3072 bytes)</span>\n    <span style=\"color:green;\">Treat the result as an array of ''p'' elements, each entry being ''blocksize'' bytes (e.g. 3 elements, each 1024 bytes)</span>\n    [B<sub>0</sub>...B<sub>p\u22121</sub>] \u2190 [[PBKDF2]]<sub>HMAC-SHA256</sub>(''Passphrase'', ''Salt'', 1, blockSize*ParallelizationFactor)\n \n    <span style=\"color:green;\">Mix each block in '''B''' Costfactor times using '''ROMix''' function (each block can be mixed in parallel)</span>\n    <span style=\"color:blue;\">'''for'''</span> i \u2190 0 <span style=\"color:blue;\">'''to'''</span> p-1 <span style=\"color:blue;\">'''do'''</span>\n       B<sub>i</sub> \u2190 ROMix(B<sub>i</sub>, CostFactor)\n \n    <span style=\"color:green;\">All the elements of B is our new \"expensive\" salt</span>\n    expensiveSalt \u2190 B<sub>0</sub>\u2225B<sub>1</sub>\u2225B<sub>2</sub>\u2225 ... \u2225B<sub>p-1</sub>  <span style=\"color:green;\">''//where \u2225 is concatenation</span>\n  \n    <span style=\"color:green;\">''Step 2. Use PBKDF2 to generate the desired number of bytes, but using the expensive salt we just generated''</span>\n    <span style=\"color:blue;\">'''return'''</span> PBKDF2<sub>HMAC-SHA256</sub>(Passphrase, expensiveSalt, 1, DesiredKeyLen);\n\nWhere ''PBKDF2(P, S, c, dkLen)'' notation is defined in RFC 2898, where c is an iteration count.\n\nThis notation is used by RFC 7914 for specifying a usage of PBKDF2 with c = 1.\n '''Function''' ROMix(Block, Iterations)\n \n    <span style=\"color:green;\">Create ''Iterations'' copies of ''X''</span>\n    X \u2190 Block\n    '''for''' i \u2190 0 '''to''' Iterations\u22121 '''do'''\n       V<sub>i</sub> \u2190 X\n       X \u2190 BlockMix(X)\n \n    '''for''' i \u2190 0 '''to''' Iterations\u22121 '''do'''\n       j \u2190 Integerify(X) mod Iterations \n       X \u2190 BlockMix(X '''xor''' V<sub>j</sub>)\n \n    '''return''' X\n\nWhere RFC 7914 defines ''Integerify(X)'' as the result of interpreting the last 64 bytes of X as a ''little-endian'' integer A<sub>1</sub>.\n\nSince Iterations equals 2 to the power of N, only the ''first'' Ceiling(N / 8) bytes among the ''last'' 64 bytes of X, interpreted as a ''little-endian'' integer A<sub>2</sub>, are actually needed to compute ''Integerify(X) mod Iterations = A<sub>1</sub> mod Iterations = A<sub>2</sub> mod Iterations''.\n\n '''Function''' BlockMix(B):\n \n     <span style=\"color:green;\">''The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)''</span>\n     r \u2190 Length(B) / 128;\n \n     <span style=\"color:green;\">''Treat B as an array of 2r 64-byte chunks''</span>\n     [B<sub>0</sub>...B<sub>2r-1</sub>] \u2190 B\n \n     X \u2190 B<sub>2r\u22121</sub>\n     '''for''' i \u2190 0 '''to''' 2r\u22121 '''do'''\n         X \u2190 Salsa20/8(X xor B<sub>i</sub>)  <span style=\"color:green;\">'''//Salsa20/8 hashes from 64-bytes to 64-bytes'''</span>\n         Y<sub>i</sub> \u2190 X\n \n     '''return''' \u2190 Y<sub>0</sub>\u2225Y<sub>2</sub>\u2225...\u2225Y<sub>2r\u22122</sub> \u2225 Y<sub>1</sub>\u2225Y<sub>3</sub>\u2225...\u2225Y<sub>2r\u22121</sub>\n\nWhere ''Salsa20/8'' is the 8-round version of [[Salsa20]].\n\n== Cryptocurrency uses ==\nScrypt is used in many cryptocurrencies as a [[proof-of-work]] algorithm. It was first implemented for Tenebrix (released in September 2011) and served as the basis for [[Litecoin]] and [[Dogecoin]], which also adopted its scrypt algorithm.<ref>{{cite book |url=https://books.google.com/books?id=IXmrBQAAQBAJ&pg=PA221 |title=Mastering Bitcoin: Unlocking Digital Cryptocurrencies |pages=221, 223 |author=Andreas M. Antonopoulos |date=3 December 2014 |publisher=O'Reilly Media |isbn=9781491902646 }}</ref><ref>{{cite web | url=https://litecoin.info/History_of_cryptocurrency | title=History of cryptocurrency | accessdate=27 June 2014 | archive-url=https://web.archive.org/web/20160611133738/https://litecoin.info/History_of_cryptocurrency | archive-date=11 June 2016 | url-status=dead }}</ref> Mining of [[cryptocurrencies]] that use scrypt is often performed on graphics processing units ([[GPUs]]) since GPUs tend to have significantly more processing power (for some algorithms) compared to the CPU.<ref>{{cite book|url=https://www.amazon.com/Litecoin-Scrypt-Mining-Configurations-Radeon-ebook/dp/B00E2RT1I4|title=Litecoin Scrypt Mining Configurations for Radeon 7950|author=Roman Guelfi-Gibbs|publisher=Amazon Digital Services}}</ref>  This led to shortages of high end GPUs due to the rising price of these currencies in the months of November and December 2013.<ref>{{cite web|url=http://www.extremetech.com/computing/172381-massive-surge-in-litecoin-mining-leads-to-radeon-shortage|author=Joel Hruska|title=Massive surge in Litecoin mining leads to graphics card shortage|date=10 December 2013|publisher=ExtremeTech}}</ref>\n\nAs of May 2014, specialized [[Application-specific integrated circuit|ASIC]] mining hardware is available for scrypt-based cryptocurrencies.{{cn|date=May 2019}}\n== See also ==\n* [[Key derivation function]]\n* [[Argon2]], winner of the Password Hashing Competition\n* [[Crypt (C)|crypt]], password storage and verification scheme\n* [[PBKDF2]], a widely used standard password-based key derivation function\n* [[bcrypt]], password hashing function using [[Blowfish (cipher)|Blowfish]]\n* [[Space\u2013time tradeoff]]\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [http://www.tarsnap.com/scrypt.html The scrypt page on the Tarsnap website.]\n* [http://www.tarsnap.com/scrypt/scrypt.pdf The original scrypt paper.]\n\n{{Cryptography navbox|hash}}\n\n{{Cryptocurrencies}}\n\n[[Category:Cryptographic algorithms]]\n[[Category:Key derivation functions]]\n[[Category:Articles with example pseudocode]]\n", "name_user": "Xcore11", "label": "safe", "comment": "\u2192\u200eCryptocurrency uses", "url_page": "//en.wikipedia.org/wiki/Scrypt"}
