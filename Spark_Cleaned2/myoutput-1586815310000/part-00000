{"title_page": "Conway's Game of Life", "text_new": "{{short description|2D cellular automaton devised by J. H. Conway in 1970}}\n{{redirect|Conway game|Conway's surreal number game theory|Surreal number}}\n{{Multiple issues|\n{{Unreliable sources|date=July 2019}}\n{{More citations needed|date=November 2019}}\n}}\n{{Use British English Oxford spelling|date=December 2016}}\n[[File:Gospers glider gun.gif|frame|right|A single [[Bill Gosper|Gosper]]'s [[Gun (cellular automaton)|glider gun]] creating \"[[Glider (Conway's Life)|gliders]]\"]]\n[[File:Conways game of life breeder.png|thumb|379px|A screenshot of a [[Puffer train|puffer-type breeder]] (red) that leaves [[Gun (cellular automaton)|glider guns]] (green) in its wake, which in turn create gliders (blue) ([[:Image:Conways game of life breeder animation.gif|animation]])]]\nThe '''Game of Life''', also known simply as '''Life''', is a [[cellular automaton]] devised by the British [[mathematician]] [[John Horton Conway]] in 1970.<ref>{{cite journal | url=https://web.stanford.edu/class/sts145/Library/life.pdf | title=Mathematical Games - The Fantastic Combinations of John Conway's New Solitaire Game 'Life' | first=Martin | last=Gardner  | issue=223 | journal=[[Scientific American]] | date=October 1970 | pages=120\u2013123| doi=10.1038/scientificamerican1070-120 }}</ref>\n\nThe game is a [[zero-player game]], meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is [[Turing complete]] and can simulate a [[von Neumann universal constructor|universal constructor]] or any other [[Turing machine]].\n\n==Rules==\nThe universe of the ''Game of Life'' is an infinite, two-dimensional [[Orthogonality|orthogonal]] grid of square ''cells'', each of which is in one of two possible states, ''alive'' or ''dead'', (or ''populated'' and ''unpopulated'', respectively). Every cell interacts with its eight ''[[Moore neighborhood|neighbours]]'', which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:\n# Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n# Any live cell with two or three live neighbours lives on to the next generation.\n# Any live cell with more than three live neighbours dies, as if by overpopulation.\n# Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\nThese rules, which compare the behavior of the automaton to real life, can be condensed into the following:\n# Any live cell with two or three live neighbors survives.\n# Any dead cell with three live neighbors becomes a live cell.\n# All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n\nThe initial pattern constitutes the ''seed'' of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed; births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a ''tick''. Each generation is a ''[[pure function]]'' of the preceding one. The rules continue to be applied repeatedly to create further generations.\n\n==Origins==\nIn late 1940, [[John von Neumann]] defined life as a creation (as a ''being'' or organism) which can reproduce itself and simulate a [[Turing machine]]. Von Neumann was thinking about an engineering solution which would use electromagnetic components floating randomly in liquid or gas.<ref>{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/1179 1179]|isbn=978-1-57955-008-0|url=https://archive.org/details/newkindofscience00wolf/page/1179}}</ref> This turned out not to be realistic with the technology available at the time. [[Stanislaw Ulam]] invented [[cellular automata]], which were intended to simulate von Neumann's theoretical electromagnetic constructions. Ulam discussed using computers to simulate his cellular automata in a two-dimensional lattice in several papers. In parallel, Von Neumann attempted to construct Ulam's cellular automaton. Although successful, he was busy with other projects and left some details unfinished. His construction was complicated because it tried to simulate his own engineering design. Over time, simpler life constructions were provided by other researchers, and published in papers and books.{{citation needed|date=January 2018}}\n\nMotivated by questions in mathematical logic and in part by work on simulation games by Ulam, among others, [[John Horton Conway|John Conway]] began doing experiments in 1968 with a variety of different 2D cellular automaton rules.<ref>{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/877 877]|isbn=978-1-57955-008-0|url=https://archive.org/details/newkindofscience00wolf/page/877}}</ref> [[John Horton Conway|Conway's]] initial goal was to define an interesting and unpredictable cell automaton. Thus, he wanted some configurations to last for a long time before dying, other configurations to go on forever without allowing cycles, etc. It was a significant challenge and an open problem for years before experts on cell automatons managed to prove that, indeed, ''Conway's Game of Life'' admitted of a configuration which was alive in the sense of satisfying Von Neumann's two general requirements. While the definitions before ''Conway's Life'' were proof-oriented, Conway's construction aimed at simplicity without ''a priori'' providing proof the automaton was alive.\n\nConway chose his rules carefully, after considerable experimentation, to meet these criteria:\n# There should be no explosive growth.\n# There should exist small initial patterns with chaotic, unpredictable outcomes.\n# There should be potential for [[von Neumann universal constructor]]s.\n# The rules should be as simple as possible, whilst adhering to the above constraints.<ref>Conway, private communication to the 'Life list', 14 April 1999.</ref>\n\nThe game made its first public appearance in the October 1970 issue of ''[[Scientific American]]'', in [[Martin Gardner]]'s \"[[Mathematical Games (column)|Mathematical Games]]\" column. Theoretically, ''Conway's Life'' has the power of a [[universal Turing machine]]: anything that can be computed [[algorithm]]ically can be computed within ''Life''.<ref name=\"chapman\"> It is a model and simulation that is interesting to watch and can show that simple things can become complicated problems.{{cite web|url=http://www.igblan.free-online.co.uk/igblan/ca/|title=Life Universal Computer|author=Paul Chapman|accessdate=12 July 2009|date=11 November 2002}}</ref><ref name=\"bcg\">{{Cite book | last1=Berlekamp | first1=E. R. | author1-link=Elwyn Berlekamp | last2=Conway | first2=John Horton | author2-link=John Horton Conway | last3=Guy | first3=R. K. | author3-link=Richard K. Guy | title=Winning Ways for your Mathematical Plays | publisher=A K Peters Ltd | edition=2nd | year=2001\u20132004| title-link=Winning Ways for your Mathematical Plays }}</ref><ref>{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/877 877]|isbn=978-1-57955-008-0|url=https://archive.org/details/newkindofscience00wolf/page/877}}</ref> Gardner wrote, \"Because of Life's analogies with the rise, fall and alterations of a society of living organisms, it belongs to a growing class of what are called 'simulation games' (games that resemble real life processes).\"<ref>{{cite journal | url=https://web.stanford.edu/class/sts145/Library/life.pdf | title=Mathematical Games - The Fantastic Combinations of John Conway's New Solitaire Game 'Life' | first=Martin | last=Gardner  | issue=223 | journal=[[Scientific American]] | date=October 1970 | pages=120\u2013123| doi=10.1038/scientificamerican1070-120 }}</ref> \n\nSince its publication, ''Conway's Game of Life'' has attracted much interest, because of the surprising ways in which the patterns can evolve. ''Life'' provides an example of [[emergence]] and [[self-organization]]. Scholars in various fields, such as [[computer science]], [[physics]], [[biology]], [[biochemistry]], [[economics]], [[mathematics]], [[philosophy]], and [[generative science]]s have made use of the way that complex patterns can emerge from the implementation of the game's simple rules.{{citation needed|reason=Example from philosophy given, but claim made across various fields, some evidence to substantiate, elucidate the implicit claim of \"diverse academic use of this game\" should be provided|date=April 2015}} The game can also serve as a didactic [[analogy]], used to convey the somewhat counter-intuitive notion that design and organization can spontaneously emerge in the absence of a designer. For example, cognitive scientist [[Daniel Dennett]] has used the analogy of ''Conway's Life'' \"universe\" extensively to illustrate the possible evolution of complex philosophical constructs, such as [[consciousness]] and [[free will]], from the relatively simple set of deterministic physical laws, which might govern our universe.<ref>{{cite book|last=Dennett|first=D. C.|date=1991|title=Consciousness Explained|location=Boston|publisher=Back Bay Books|isbn=978-0-316-18066-5|url-access=registration|url=https://archive.org/details/consciousnessexp00denn}}</ref><ref>{{cite book|last=Dennett|first= D. C. |date=1995|title=Darwin's Dangerous Idea: Evolution and the Meanings of Life|url=https://archive.org/details/darwinsdangerous0000denn|url-access=registration|location=New York|publisher= Simon & Schuster |isbn= 978-0-684-82471-0}}</ref><ref>{{cite book|last=Dennett|first= D. C. |date=2003 |title=Freedom Evolves |location=New York |publisher=Penguin Books |isbn =978-0-14-200384-8}}</ref>\n\nThe popularity of ''Conway's Game of Life'' was helped by its coming into being just in time for a new generation of inexpensive computer access which was being released into the market. The game could be run for hours on these machines, which would otherwise have remained unused at night. In this respect, it foreshadowed the later popularity of computer-generated [[fractal]]s. For many, ''Life'' was simply a programming challenge: a fun way to use otherwise wasted [[Central processing unit|CPU]] cycles. For some, however, ''Life'' had more philosophical connotations. It developed a cult following through the 1970s and beyond; current developments have gone so far as to create theoretic emulations of computer systems within the confines of a Life board.<ref>{{cite web|url=http://rendell-attic.org/gol/tm.htm|title=A Turing Machine in Conway's Game of Life|author=Paul Rendell|date=January 12, 2005|accessdate=July 12, 2009}}</ref><ref>{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=Spartan_universal_computer-constructor|title=Spartan universal computer-constructor|author=Adam P. Goucher|publisher=LifeWiki|accessdate=July 12, 2009}}</ref>\n\n==Examples of patterns==\nMany different types of patterns occur in the ''Game of Life'', which are classified according to their behaviour. Common pattern types include: ''[[Still life (cellular automaton)|still lifes]]'', which do not change from one generation to the next; ''[[Oscillator (cellular automaton)|oscillators]]'', which return to their initial state after a finite number of generations; and ''[[spaceship (cellular automaton)|spaceships]]'', which translate themselves across the grid.\n\nThe earliest interesting patterns in the ''Game of Life'' were discovered without the use of computers. The simplest still lifes and oscillators were discovered while tracking the fates of various small starting configurations using [[graph paper]], [[blackboard]]s, and physical game boards, such as those used in [[Go (board game)|Go]]. During this early research, Conway discovered that the R-[[pentomino]] failed to stabilize in a small number of generations. In fact, it takes 1103 generations to stabilize, by which time it has a population of 116 and has generated six escaping [[Glider (Conway's Life)|gliders]];<ref>{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=R-pentomino|title=R-pentomino|publisher=LifeWiki|accessdate=July 12, 2009}}</ref> these were the first spaceships ever discovered.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_g.htm#glider|author=Stephen A. Silver|title=Glider|publisher=The Life Lexicon|accessdate=March 4, 2019}}\n</ref>\n\nFrequently occurring<ref>{{cite web|url=http://www.conwaylife.com/soup/census.asp?rule=B3/S23&sl=1&os=1&ss=1|archiveurl=https://web.archive.org/web/20090910010855/http://conwaylife.com/soup/census.asp?rule=B3%2FS23&sl=1&os=1&ss=1|archivedate=2009-09-10|title=Census Results in Conway's Game of Life|publisher=The Online Life-Like CA Soup Search|accessdate=July 12, 2009|url-status=dead}}\n</ref><ref>{{cite web|url=http://wwwhomes.uni-bielefeld.de/achim/moving.html|title=Spontaneous appeared Spaceships out of Random Dust|publisher=Achim Flammenkamp (1995-12-09)|accessdate=July 10, 2012}}</ref> examples (in that they emerge frequently from a random starting configuration of cells) of the three aforementioned pattern types are shown below, with live cells shown in black and dead cells in white. ''Period'' refers to the number of ticks a pattern must iterate through before returning to its initial configuration.\n\n{{col-begin|width=auto; margin:auto}}\n{{col-break}}\n{| class=\"wikitable\"\n|-\n! colspan=\"2\" | Still lifes\n|-\n| Block\n| [[File:Game of life block with border.svg]]\n|-\n| Bee-<br>hive\n| [[File:Game of life beehive.svg]]\n|-\n| Loaf\n| [[File:Game of life loaf.svg]]\n|-\n| Boat\n| [[File:Game of life boat.svg]]\n|-\n| Tub\n| [[File:Game of life flower.svg]]\n|}\n{{col-break|gap=1em}}\n{| class=\"wikitable\"\n|-\n! colspan=\"2\" | Oscillators\n|-\n| Blinker<br>(period 2)\n| [[File:game of life blinker.gif]]\n|-\n| Toad<br>(period 2)\n| [[File:game of life toad.gif]]\n|-\n| Beacon<br>(period 2)\n| [[File:game of life beacon.gif]]\n|-\n| Pulsar<br>(period 3)\n| [[File:game of life pulsar.gif]]\n|-\n| Penta-<br>decathlon<br>(period&nbsp;15)\n| [[File:I-Column.gif]]\n|}\n{{col-break|gap=1em}}\n{| class=\"wikitable\"\n|-\n! colspan=\"2\" | Spaceships\n|-\n| Glider\n| [[File:Game of life animated glider.gif]]\n|-\n| Light-<br>weight<br>spaceship<br>(LWSS)\n| [[File:Game of life animated LWSS.gif]]\n|-\n| Middle-<br>weight<br>spaceship<br>(MWSS)\n| [[File:Animated Mwss.gif]]\n|-\n| Heavy-<br>weight<br>spaceship<br>(HWSS)\n| [[File:Animated Hwss.gif]]\n|}\n{{col-end}}\n\nThe ''pulsar''<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_p.htm#pulsar |title=Pulsar |author=Stephen A. Silver |publisher=The Life Lexicon |accessdate=March 4, 2019}}\n</ref> is the most common period 3 oscillator. The great majority of naturally occurring oscillators are period 2, like the blinker and the toad, but oscillators of many periods are known to exist,<ref>[http://entropymine.com/jason/life/status.html#oscper Game of Life Status page], Jason Summers, retrieved 2012-02-23.</ref> and oscillators of periods 4, 8, 14, 15, 30 and a few others have been seen to arise from random initial conditions.<ref>{{cite web|url=http://wwwhomes.uni-bielefeld.de/achim/freq_top_life.html |title=Most seen natural occurring ash objects in Game of Life |author=Achim Flammenkamp |date=2004-09-07 |accessdate=2008-09-16}}</ref> Patterns which evolve for long periods before stabilizing are called ''[[Methuselah (cellular automaton)|Methuselahs]]'', the first-discovered of which was the R-pentomino. ''Diehard'' is a pattern that eventually disappears, rather than stabilizing, after 130 generations, which is conjectured to be maximal for patterns with seven or fewer cells.<ref>\n{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_d.htm#diehard|title=Diehard|author=Stephen A. Silver|publisher=The Life Lexicon|accessdate=March 4, 2019}}</ref> ''Acorn'' takes 5206 generations to generate 633 cells, including 13 escaped gliders.<ref>\n{{cite web|url=http://pentadecathlon.com/lifeNews/2005/02/new_methuselah_records.html |title=New Methuselah Records |author=Koenig, H. |date=February 21, 2005 |accessdate=January 24, 2009}}</ref>\n\n{|  style=\"margin:auto; text-align:center;\"\n|-\n| [[File:Game of life fpento.svg|framed|The R-pentomino]]\n| [[File:game of life diehard.svg|framed|Diehard]]\n| [[File:game of life acorn.svg|framed|Acorn]]\n|}\n\nConway originally conjectured that no pattern can grow indefinitely\u2014i.e., that for any initial configuration with a finite number of living cells, the population cannot grow beyond some finite upper limit. In the game's original appearance in \"Mathematical Games\", Conway offered a prize of fifty dollars to the first person who could prove or disprove the conjecture before the end of 1970. The prize was won in November by a team from the [[Massachusetts Institute of Technology]], led by [[Bill Gosper]]; the \"Gosper glider gun\" produces its first glider on the 15th generation, and another glider every 30th generation from then on. For many years, this glider gun was the smallest one known.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_g.htm#gosperglidergun|title=Gosper glider gun|author=Stephen A. Silver|publisher=The Life Lexicon|accessdate=March 4, 2019}}</ref> In 2015, a gun called the \"Simkin glider gun\", which releases a glider every 120th generation, was discovered that has fewer live cells but which is spread out across a larger bounding box at its extremities.<ref>[http://conwaylife.com/forums/viewtopic.php?f=2&t=1599&start=200#p19125 The Hunting of the New Herschel Conduits], ConwayLife forums, April 28th, 2015, posts by Michael Simkin (\"simsim314\") and Dongook Lee (\"Scorbie\").</ref>\n{| style=\"margin:auto; text-align:center;\"\n|-\n|[[File:Game of life glider gun.svg|framed|Gosper glider gun]]\n|-\n|[[File:Game of life Simkin glider gun.svg|562px|framed|Simkin glider gun]]\n|}\n\nSmaller patterns were later found that also exhibit infinite growth. All three of the patterns shown below grow indefinitely. The first two create a single ''block-laying switch engine'': a configuration that leaves behind two-by-two still life blocks as its translates itself across the game's universe.<ref>\n{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=Block-laying_switch_engine|title=Block-laying switch engine|publisher=LifeWiki|accessdate=July 12, 2009}}</ref> The third configuration creates two such patterns. The first has only ten live cells, which has been proven to be minimal.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_i.htm#infinitegrowth |title=Infinite Growth |author=Stephen A. Silver|publisher=The Life Lexicon |accessdate=March 4, 2019}}</ref> The second fits in a five-by-five square, and the third is only one cell high.\n\n{|  style=\"margin:auto; text-align:center;\"\n|-\n| [[File:game of life infinite1.svg]] &nbsp;&nbsp;&nbsp;&nbsp;[[File:game of life infinite2.svg]]\n|-\n| <br />[[File:game of life infinite3.svg]]\n|}\nLater discoveries included other ''[[Gun (cellular automaton)|guns]]'', which are stationary, and which produce gliders or other spaceships; ''[[puffer train]]s'', which move along leaving behind a trail of debris; and ''[[rake (cellular automaton)|rakes]]'', which move and emit spaceships.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_r.htm#rake|title=Rake|author=Stephen A. Silver|publisher=The Life Lexicon|accessdate=March 4, 2019}}</ref> Gosper also constructed the first pattern with an [[Asymptotically optimal algorithm|asymptotically optimal]] [[quadratic growth|quadratic growth rate]], called a ''[[Breeder (cellular automaton)|breeder]]'' or ''lobster'', which worked by leaving behind a trail of guns.\n\nIt is possible for gliders to interact with other objects in interesting ways. For example, if two gliders are shot at a block in a specific position, the block will move closer to the source of the gliders. If three gliders are shot in just the right way, the block will move farther away. This ''sliding block memory'' can be used to simulate a [[Counter (digital)|counter]]. It is possible to construct [[logic gate]]s such as ''[[logical conjunction|AND]]'', ''[[Logical disjunction|OR]]'' and ''[[Negation|NOT]]'' using gliders. It is possible to build a pattern that acts like a [[finite-state machine]] connected to two counters. This has the same computational power as a [[universal Turing machine]], so the Game of Life is theoretically as powerful as any computer with unlimited memory and no time constraints; it is [[Turing complete]].<ref name=\"chapman\"/><ref name=\"bcg\"/> In fact, several different programmable computer architectures<ref>{{cite web|url=http://conwaylife.com/forums/viewtopic.php?f=2&t=2561#p37428|title=Programmable computer|publisher=conwaylife.com forums|accessdate=August 23, 2018}}</ref><ref>{{cite web|url=http://rendell-attic.org/gol/tm.htm|title=A Turing Machine in Conway's Game of Life, extendable to a Universal Turing Machine|publisher=Paul Rendell|accessdate=August 23, 2018}}</ref> have been implemented in Conway's Life, including a pattern that simulates Tetris.<ref>{{cite web|url=https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673|title=Build a working game of Tetris in Conway's Game of Life|publisher=StackExchange|accessdate=August 23, 2018}}</ref>\n\nFurthermore, a pattern can contain a collection of guns that fire gliders in such a way as to construct new objects, including copies of the original pattern. A ''universal constructor'' can be built which contains a Turing complete computer, and which can build many types of complex objects, including more copies of itself.<ref name=\"bcg\"/>\n\nOn March 6, 2018, the first truly elementary knightship, Sir Robin, was discovered by Adam P. Goucher.<ref>{{cite web|url=http://www.conwaylife.com/forums/viewtopic.php?f=2&t=3303|title=Elementary knightship|access-date=9 March 2018}}</ref> A ''knightship'' is a spaceship that moves two squares left for every one square it moves down (like a [[Knight (chess)|knight in chess]]), as opposed to moving orthogonally or along a 45\u00b0 diagonal. This is the first new spaceship movement pattern for an elementary spaceship found in forty-eight years. \"Elementary\" means that it cannot be decomposed into smaller interacting patterns such as gliders and still lifes.<ref>[http://conwaylife.com/wiki/Elementary \"Elementary\"], LifeWiki, retrieved 2018-11-21</ref>\n\n==Undecidability==\n\nMany patterns in the Game of Life eventually become a combination of still lifes, oscillators, and spaceships; other patterns may be called chaotic. A pattern may stay chaotic for a very long time until it eventually settles to such a combination.\n\n''Life'' is [[undecidable problem|undecidable]], which means that given an initial pattern and a later pattern, no algorithm exists that can tell whether the later pattern is ever going to appear. This is a corollary of the [[halting problem]]: the problem of determining whether a given program will finish running or continue to run forever from an initial input.<ref>Elwyn R. Berlekamp, John H. Conway, and Richard K. Guy, Winning Ways for your Mathematical Plays. Academic Press, 1982</ref>\n\nIndeed, since ''Life'' includes a pattern that is equivalent to a [[universal Turing machine]] (UTM), this deciding algorithm, if it existed, could be used to solve the halting problem by taking the initial pattern as the one corresponding to a UTM plus an input, and the later pattern as the one corresponding to a halting state of the UTM. It also follows that some patterns exist that remain chaotic forever. If this were not the case, one could progress the game sequentially until a non-chaotic pattern emerged, then compute whether a later pattern was going to appear.\n\n==Self-replication==\nOn May 18, 2010, Andrew J. Wade announced a self-constructing pattern, dubbed \"Gemini\", that creates a copy of itself while destroying its parent.<ref>{{cite web|url=http://conwaylife.com/forums/viewtopic.php?f=2&t=399&p=2327#p2327 |title=Universal Constructor Based Spaceship |publisher=Conwaylife.com |accessdate=2012-06-24}}</ref><ref>{{cite web|url=http://conwaylife.com/wiki/index.php?title=Gemini |title=Gemini \u2013 LifeWiki |publisher=Conwaylife.com |accessdate=2012-06-24}}</ref> This pattern replicates in 34 million generations, and uses an instruction tape made of gliders oscillating between two stable configurations made of Chapman\u2013Greene construction arms. These, in turn, create new copies of the pattern, and destroy the previous copy. Gemini is also a spaceship, and is the first spaceship constructed in the Game of Life that is an oblique spaceship, which is a spaceship that is neither orthogonal nor purely diagonal.<ref>{{Cite news|periodical=New Scientist|date=16 June 2010|first=Jacob|last=Aron|title=First replicating creature spawned in life simulator|url=https://www.newscientist.com/article/mg20627653.800-first-replicating-creature-spawned-in-life-simulator.html|accessdate=12 October 2013}}</ref><ref>{{cite web|url=http://www.conwaylife.com/wiki/Types_of_spaceships#Knightship |title=Gemini \u2013 LifeWiki |publisher=Conwaylife.com |accessdate=2013-10-16}}</ref> In December 2015, diagonal versions of the Gemini were built.<ref>{{cite web|url=http://www.conwaylife.com/wiki/Demonoid|title=Demonoid|publisher=LifeWiki|access-date=18 June 2016}}</ref>\n\nOn November 23, 2013, Dave Greene built the first [[replicator (cellular automaton)|replicator]] in ''Conway's Game of Life'' that creates a complete copy of itself, including the instruction tape.<ref>{{cite web|url=http://www.conwaylife.com/forums/viewtopic.php?f=2&t=1006&p=9917#p9901|title=Geminoid Challenge|publisher=Conwaylife.com|accessdate=2015-06-25}}</ref>\n\nIn October 2018, Adam P. Goucher finished his construction of the 0E0P metacell, a metacell capable of self-replication. This differed from previous metacells, such as the OTCA metapixel by Brice Due, which only worked with already constructed copies near them. The 0E0P metacell works by using construction arms to create copies that simulate the programmed rule.<ref>{{Citation|last=Passe-Science|title=Automate Cellulaire - Passe-science #27|date=2019-05-29|url=https://www.youtube.com/watch?v=CfRSVPhzN5M|access-date=2019-06-25}}</ref> The actual simulation of Conway's Life or other [[Moore neighborhood]] rules is done by simulating an equivalent rule using the [[von Neumann neighborhood]] with more states.<ref>{{Cite web|url=https://cp4space.wordpress.com/2018/11/12/fully-self-directed-replication/|title=Fully self-directed replication|last=apgoucher|date=2018-11-12|website=Complex Projective 4-Space|language=en|access-date=2019-06-25}}</ref> The name 0E0P is short for \"Zero Encoded by Zero Population\", which indicates that instead of a metacell being in an \"off\" state simulating empty space, the 0E0P metacell removes itself when the cell enters that state, leaving a blank space.<ref>{{Cite web|url=http://www.conwaylife.com/wiki/0E0P|title=0E0P metacell - LifeWiki|website=www.conwaylife.com|access-date=2019-06-24}}</ref>\n\n==Iteration==\nFrom most random initial patterns of living cells on the grid, observers will find the population constantly changing as the generations tick by. The patterns that emerge from the simple rules may be considered a form of [[mathematical beauty]]. Small isolated sub patterns with no initial symmetry tend to become symmetrical. Once this happens, the symmetry may increase in richness, but it cannot be lost unless a nearby sub pattern comes close enough to disturb it. In a very few cases the society eventually dies out, with all living cells vanishing, though this may not happen for a great many generations. Most initial patterns eventually burn out, producing either stable figures or patterns that oscillate forever between two or more states;<ref>{{cite web|url=http://www.geocities.com/conwaylife/|author=Andrzej Okrasinski|title=Game of Life Object Statistics|accessdate=July 12, 2009|archiveurl=https://web.archive.org/web/20090727010353/http://geocities.com/conwaylife/ |archivedate=2009-07-27}}</ref><ref>{{cite web|url=http://www.conwaylife.com/soup/|archiveurl=https://web.archive.org/web/20090910010849/http://conwaylife.com/soup/ |archivedate=2009-09-10|author=Nathaniel Johnston|title=The Online Life-Like CA Soup Search|accessdate=July 12, 2009}}</ref> many also produce one or more gliders or spaceships that travel indefinitely away from the initial location. Because of the nearest-neighbour based rules, no information can travel through the grid at a greater rate than one cell per unit time, so this velocity is said to be the [[Speed of light (cellular automaton)|cellular automaton speed of light]] and denoted ''c''.\n\n==Algorithms==\nEarly patterns with unknown futures, such as the R-pentomino, led computer programmers across the world to write programs to track the evolution of Life patterns. Most of the early [[algorithm]]s were similar: they represented ''Life'' patterns as two-dimensional arrays in computer memory. Typically two arrays are used: one to hold the current generation, and one to calculate its successor. Often 0 and 1 represent dead and live cells respectively. A nested [[for loop]] considers each element of the current array in turn, counting the live neighbours of each cell to decide whether the corresponding element of the successor array should be 0 or 1. The successor array is displayed. For the next iteration, the arrays swap roles so that the successor array in the last iteration becomes the current array in the next iteration.\n\nA variety of minor enhancements to this basic scheme are possible, and there are many ways to save unnecessary computation. A cell that did not change at the last time step, and none of whose neighbours changed, is guaranteed not to change at the current time step as well. So, a program that keeps track of which areas are active can save time by not updating inactive zones.<ref>{{cite web|url=http://www.ibiblio.org/lifepatterns/lifeapplet.html|title=About my Conway's Game of Life Applet|author=Alan Hensel|accessdate=July 12, 2009}}</ref>\n[[File:Trefoil knot conways game of life.gif|alt=Game of Life on the surface of a trefoil knot|thumb|Game of Life on the surface of a [[trefoil knot]]]]\nTo avoid decisions and branches in the counting loop, the rules can be rearranged from an [[Egocentrism|egocentric]] approach of the inner field regarding its neighbours to a scientific observer's viewpoint: if the sum of all nine fields in a given neighbourhood is three, the inner field state for the next generation will be life; if the all-field sum is four, the inner field retains its current state; and every other sum sets the inner field to death.\n\nIf it is desired to save memory, the storage can be reduced to one array plus two line buffers. One line buffer is used to calculate the successor state for a line, then the second line buffer is used to calculate the successor state for the next line. The first buffer is then written to its line and freed to hold the successor state for the third line. If a [[torus|toroidal]] array is used, a third buffer is needed so that the original state of the first line in the array can be saved until the last line is computed.\n\n[[File:Long gun.gif|thumb|right|Glider gun within a toroidal array. The stream of gliders eventually wraps around and destroys the gun.]]\n[[File:\u0418\u0433\u0440\u0430 \"\u0416\u0438\u0437\u043d\u044c\".gif|thumb|right|Red glider on the square lattice with periodic boundary conditions]]\n\nIn principle, the ''Life'' field is infinite, but computers have finite memory. This leads to problems when the active area encroaches on the border of the array. Programmers have used several strategies to address these problems. The simplest strategy is simply to assume that every cell outside the array is dead. This is easy to program but leads to inaccurate results when the active area crosses the boundary. A more sophisticated trick is to consider the left and right edges of the field to be stitched together, and the top and bottom edges also, yielding a [[torus|toroidal]] array. The result is that active areas that move across a field edge reappear at the opposite edge. Inaccuracy can still result if the pattern grows too large, but there are no pathological edge effects. Techniques of dynamic storage allocation may also be used, creating ever-larger arrays to hold growing patterns. ''Life'' on a finite field is sometimes explicitly studied; some implementations, such as ''[[Golly (program)|Golly]]'', support a choice of the standard infinite field, a field infinite only in one dimension or a finite field, with a choice of topologies such as a cylinder, a torus or a [[M\u00f6bius strip]].\n\nAlternatively, the programmer may abandon the notion of representing the ''Life'' field with a 2-dimensional array, and use a different data structure, such as a vector of coordinate pairs representing live cells. This approach allows the pattern to move about the field unhindered, as long as the population does not exceed the size of the live-coordinate array. The drawback is that counting live neighbours becomes a hash-table lookup or search operation, slowing down simulation speed. With more sophisticated data structures this problem can also be largely solved.\n\nFor exploring large patterns at great time depths, sophisticated algorithms such as [[Hashlife]] may be useful. There is also a method, applicable to other cellular automata too, for implementation of the ''Game of Life'' using arbitrary asynchronous updates whilst still exactly emulating the behaviour of the synchronous game.<ref>{{cite conference|title=Self-Reproduction in Asynchronous Cellular Automata |first=Chrystopher L. |last=Nehaniv |date=15\u201318 July 2002 |conference=2002 NASA/DoD Conference on Evolvable Hardware |conference-url=http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=8000 |publisher=IEEE Computer Society Press |location=Alexandria, Virginia, USA |pages=201\u2013209 |isbn=0-7695-1718-8 |doi=10.1109/EH.2002.1029886 }}</ref> [[Source code]] examples that implement the basic ''Game of Life'' scenario in various programming languages, including [[C (programming language)|C]], [[C++]], [[Java (programming language)|Java]] and [[Python (programming language)|Python]] can be found at [[Rosetta Code]].<ref>{{cite web|url=http://rosettacode.org/wiki/Conway%27s_Game_of_Life|title=Conway's Game of Life}}</ref>\n\n==Variations==\n{{main | Life-like cellular automaton }}\nSince ''Life''{{'}}s inception, new, similar cellular automata have been developed. The standard ''Game of Life'' is symbolized as B3/S23. A cell is born if it has exactly three neighbours, survives if it has two or three living neighbours, and dies otherwise. The first number, or list of numbers, is what is required for a dead cell to be born. The second set is the requirement for a live cell to survive to the next generation. Hence B6/S16 means \"a cell is born if there are six neighbours, and lives on if there are either one or six neighbours\". Cellular automata on a two-dimensional grid that can be described in this way are known as [[Life-like cellular automaton|{{Not a typo|''Life''-like}} cellular automata]]. Another common {{Not a typo|''Life''-like}} automaton, ''[[Highlife (cellular automaton)|Highlife]]'', is described by the rule B36/S23, because having six neighbours, in addition to the original game's B3/S23 rule, causes a birth. ''HighLife'' is best known for its frequently occurring replicators.<ref>[http://www.tip.net.au/~dbell/articles/HighLife.zip HighLife \u2013 An Interesting Variant of Life] by David Bell (.zip file)</ref><ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_r.htm#replicator|title=Replicator|publisher=The Life Lexicon|author=Stephen A. Silver|accessdate=March 4, 2019}}</ref>\n\nAdditional {{Not a typo|''Life''-like}} cellular automata exist. The vast majority of these 2<sup>18</sup> different rules<ref>{{cite web|url=http://conwaylife.com/wiki/Life-like#Life-like_cellular_automata |title=Life-like cellular automata - LifeWiki |publisher=Conwaylife.com |accessdate=March 4, 2019}}</ref> produce universes that are either too chaotic or too desolate to be of interest, but a large subset do display interesting behavior. A further generalization produces the ''isotropic'' rulespace, with 2<sup>102</sup> possible CA rules<ref>{{cite web|url=http://conwaylife.com/wiki/Isotropic |title=Isotropic - LifeWiki |publisher=Conwaylife.com |accessdate=March 4, 2019}}</ref> (Conway's Life again being one of them). These are rules that use the same square grid as the ''Life''-like rules and the same eight-cell neighbourhood, and are likewise invariant under rotation and reflection. However, in isotropic rules, the positions of neighbour cells relative to each other may be taken into account in determining a cell's future state\u2014not just the total number of those neighbours.\n\n[[File:Oscillator.gif|right|frame|A sample of a 48-step oscillator along with a 2-step oscillator and a 4-step oscillator from a 2-D hexagonal Game of Life (rule H:B2/S34)]]\n\nSome variations on ''Life'' modify the geometry of the universe as well as the rule. The above variations can be thought of as 2-D square, because the world is two-dimensional and laid out in a square grid. One-dimensional square variations, known as [[elementary cellular automaton|elementary cellular automata]],<ref>{{cite web|url=http://mathworld.wolfram.com/ElementaryCellularAutomaton.html|publisher=Wolfram Mathworld|title=Elementary Cellular Automaton|accessdate=July 12, 2009}}</ref> and 3-D square variations have been developed, as have 2-D hexagonal and 2-D triangular variations. A variant using non-periodic tile grids has also been made.<ref>{{cite magazine|url=https://www.newscientist.com/article/dn22134-first-gliders-navigate-everchanging-penrose-universe.html|magazine=New Scientist|title=First gliders navigate ever-changing Penrose universe}}</ref>\n\nConway's rules may also be generalized such that instead of two states, ''live'' and ''dead'', there are three or more. State transitions are then determined either by a weighting system or by a table specifying separate transition rules for each state; for example, ''[[Mirek's Cellebration]]''{{'}}s multi-coloured ''Rules Table'' and ''Weighted Life'' rule families each include sample rules equivalent to ''Conway's Life''.\n\nPatterns relating to fractals and fractal systems may also be observed in certain {{Not a typo|''Life''-like}} variations. For example, the automaton B1/S12 generates four very close approximations to the [[Sierpinski triangle]] when applied to a single live cell. The Sierpinski triangle can also be observed in Conway's Game of Life by examining the long-term growth of a long single-cell-thick line of live cells,<ref>{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=One_cell_thick_pattern|title=One cell thick pattern|publisher=LifeWiki|accessdate=July 12, 2009}}</ref> as well as in ''Highlife'', [[Seeds (cellular automaton)|''Seeds'' (B2/S)]], and Wolfram's [[Rule 90]].<ref>{{cite web|url=http://www.conwaylife.com/forums/viewtopic.php?f=7&t=90|title=Life Imitates Sierpinski|publisher=ConwayLife.com forums|accessdate=July 12, 2009}}</ref>\n\n''Immigration'' is a variation that is very similar to ''Conway's Game of Life'', except that there are two ''on'' states, often expressed as two different colours. Whenever a new cell is born, it takes on the on state that is the majority in the three cells that gave it birth. This feature can be used to examine interactions between [[spaceship (cellular automaton)|spaceships]] and other objects within the game.<ref>\n{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_i.htm#immigration |title=Immigration |publisher=The Life Lexicon|author=Stephen A. Silver |accessdate=March 4, 2019}}</ref> Another similar variation, called ''QuadLife'', involves four different on states. When a new cell is born from three different on neighbours, it takes on the fourth value, and otherwise, like ''Immigration'', it takes the majority value.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_q.htm#quadlife |title=QuadLife |publisher=The Life Lexicon|author=Stephen A. Silver |accessdate=March 4, 2019}}</ref> Except for the variation among on cells, both of these variations act identically to Life.\n\n==Music==\nVarious musical composition techniques use Conway's Life, especially in [[MIDI]] sequencing.<ref>{{Cite journal\n  | last1 = Burraston | first1 = Dave\n  | last2 = Edmonds | first2 = Ernest\n  | last3 = Livingstone | first3 = Dan\n  | last4 = Miranda | first4 = Eduardo Reck | authorlink4 = Eduardo Reck Miranda\n  | title = Cellular Automata in MIDI based Computer Music\n  | url = http://quod.lib.umich.edu/i/icmc/bbp2372.2004.047?view=image\n  | journal = Proceedings of the 2004 International Computer Music Conference\n  | year = 2004\n  | citeseerx=10.1.1.6.3882\n  | hdl = 10453/1425\n  | doi =\n }}</ref> A variety of programs exist for creating sound from patterns generated in Life.<ref>{{cite web|url=http://www.synthtopia.com/content/2008/05/29/glitchds-cellular-automaton-sequencer-for-the-nintendo-ds/ |title=glitchDS \u2013 Cellular Automaton Sequencer For The Nintendo DS |publisher=Synthtopia.com |date=2008-05-29 |accessdate=2012-06-24}}</ref><ref>{{cite web|url=http://www.synthtopia.com/content/2009/04/29/game-of-life-music-sequencer/ |title=Game Of Life Music Sequencer |publisher=Synthtopia.com |date=2009-04-29 |accessdate=2012-06-24}}</ref><ref>{{cite web|url=http://www.synthtopia.com/content/2011/01/12/game-of-life-music-sequencer-for-ios-runxt-life/ |title=Game Of Life Music Sequencer For iOS, Runxt Life |publisher=Synthtopia.com |date=2011-01-12 |accessdate=2012-06-24}}</ref>\n\n==Notable programs==\n[[File:Turing Machine in Golly.png|thumb|right|The 6&thinsp;366&thinsp;548&thinsp;773&thinsp;467&thinsp;669&thinsp;985&thinsp;195&thinsp;496&thinsp;000<sup>th</sup> ({{val|6|e=27}}-th) generation of a [[Turing machine]], made in the game of Life, computed in less than 30 seconds on an [[Intel]] Core Duo 2 GHz CPU using Golly in [[Hashlife]] mode]]\n\nComputers have been used to follow ''Life'' configurations since it was first publicized. When John Conway was first investigating how various starting configurations developed, he tracked them by hand using a [[Go (game)|Go]] board with its black and white stones. This was tedious and prone to errors. While Conway was investigating the R-pentomino, John Francis, an undergraduate student at The [[University of Cambridge]], wrote a program (for an IBM 360 at the nearby Institute of Theoretical Astronomy) to check Conway's results. This program showed that the configuration had not reached a stable state after 1000 generations.\n\nThe first interactive ''Life'' program was written in an early version of [[ALGOL 68C]] for the [[PDP-7]] by [[Michael Guy (computer scientist)|M. J. T. Guy]] and [[Stephen R. Bourne|S. R. Bourne]]. The results were published in the October 1970 issue of ''[[Scientific American]]'', along with the statement: \"Without its help, some discoveries about the game would have been difficult to make.\"<ref>{{Cite journal|title=Mathematical Games: The fantastic combinations of John Conway's new solitaire game \"Life\"|first=Martin|last=Gardner|journal=Scientific American|volume=223|issue=4|date=October 1970|pages=120\u2013123|doi=10.1038/scientificamerican1070-120}}</ref>\n\nTwo early implementations of Life on home computers were by Malcolm Banthorpe written in [[BBC BASIC]]. The first was in the January 1984 issue of [[Acorn User]] magazine and Banthorpe followed this with a 3D version in the May 1984 issue (these can be downloaded as PDFs).<ref>{{cite web |url=http://8bs.com/aumags.htm |title=Acorn User Magazine Scans |author=<!--Not stated-->|publisher=The BBC and Master Computer Public Domain Library |access-date=2018-12-29}}</ref>\nSusan Stepney, Professor of Computer Science at the [[University of York]], followed this up in 1988 with \"Life on the line\", a program that generated one-dimensional cellular automata.<ref>{{cite web |url= https://www-users.cs.york.ac.uk/susan/bib/ss/au.htm|title= AcornUser articles |last= Stepney |first= Susan |website=www-users.cs.york.ac.uk |publisher= AcornUser|access-date=2018-12-29}}</ref>\n\nThere are now thousands of ''Life'' programs online, so a full list will not be provided here. The following is a small selection of programs with some special claim to notability, such as popularity or unusual features. Most of these programs incorporate a graphical user interface for pattern editing and simulation, the capability for simulating multiple rules including Life, and a large library of interesting patterns in Life and other CA rules.\n* [[Golly (program)|Golly]] is a cross-platform (Windows, Macintosh, Linux and also iOS and Android) open-source simulation system for ''Life'' and other cellular automata (including all ''Life''-like cellular automata, the ''Generations'' family of cellular automata from ''Mirek's Cellebration'', John von Neumann's 29-state cellular automaton, and others), by Andrew Trevorrow and Tomas Rokicki. It includes the ''Hashlife'' algorithm for extremely fast generation, and [[Lua (programming language)|Lua]] or [[Python (programming language)|Python]] scriptability for both editing and simulation.\n* ''Mirek's Cellebration'' is a freeware 1-D and 2-D cellular automata viewer, explorer and editor for Windows. It includes powerful facilities for simulating and viewing a wide variety of CA rules including ''Life'', and a scriptable editor.\n* ''Xlife'' is a cellular-automaton laboratory by Jon Bennett. The standard UNIX X11 Life simulation application for a long time, it has also been ported to Windows. It can handle cellular automaton rules with the same neighbourhood as ''Life'', and up to eight possible states per cell.<ref>{{cite web | url=http://www.conwaylife.com/wiki/Xlife |title=Xlife}}</ref>\n\nGoogle implemented an [[Easter egg (media)|easter egg]] of ''Conway's Game of Life'' in 2012. Users who search for the term are shown an implementation of the game in the search results page.\n\n==See also==\n* [[Aliquot sequence]], a similar problem of nonnegative integers\n* {{annotated link|Artificial life}}\n* {{annotated link|Glory Season|''Glory Season''}}, is set in a future society where the Game of Life is played in a competitive 2-player mode\n* {{annotated link|Langton's ant}}\n* {{annotated link|Poietic Generator}}, a \"human\" game of life.\n* {{annotated link|Reaction\u2013diffusion system}} that provides diffusing-chemical-reagent simulations (including game-of-life-like).\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n{{commons|Game of Life}}\n<!-- Note: Before adding any additional links here, read [[WP:EL]] and consider adding them to 'dmoz' instead -->\n* {{dmoz|Computers/Artificial_Life/Cellular_Automata/Conway%27s_Game_of_Life}}\n* [http://www.conwaylife.com/ref/lexicon/lex_home.htm Life Lexicon], extensive lexicon with many patterns\n* [http://pentadecathlon.com/lifeNews/index.php Game of Life News]\n* [http://www.conwaylife.com/wiki/ LifeWiki]\n* [http://www.conwaylife.com/forums/ Conway Life forums]\n* [https://catagolue.appspot.com/home Catagolue], an online database of objects in Conway's Game of Life and similar cellular automata\n* [http://cafaq.com/lifefaq/index.php Cellular Automata FAQ&nbsp;\u2013 Conway's Game of Life]\n\n{{Conway's Game of Life}}\n\n{{DEFAULTSORT:Conway's Game Of Life}}\n[[Category:Cellular automaton rules]]\n[[Category:Self-organization]]\n[[Category:Games and sports introduced in 1970]]\n[[Category:Video games with available source code]]\n[[Category:John Horton Conway]]\n", "text_old": "{{short description|2D cellular automaton devised by J. H. Conway in 1970}}\n{{redirect|Conway game|Conway's surreal number game theory|Surreal number}}\n{{Multiple issues|\n{{Unreliable sources|date=July 2019}}\n{{More citations needed|date=November 2019}}\n}}\n{{Use British English Oxford spelling|date=December 2016}}\n[[File:Gospers glider gun.gif|frame|right|A single [[Bill Gosper|Gosper]]'s [[Gun (cellular automaton)|glider gun]] creating \"[[Glider (Conway's Life)|gliders]]\"]]\n[[File:Conways game of life breeder.png|thumb|379px|A screenshot of a [[Puffer train|puffer-type breeder]] (red) that leaves [[Gun (cellular automaton)|glider guns]] (green) in its wake, which in turn create gliders (blue) ([[:Image:Conways game of life breeder animation.gif|animation]])]]\nThe '''Game of Life''', also known simply as '''Life''', is a [[cellular automaton]] devised by the British [[mathematician]] [[John Horton Conway]] in 1970.<ref>{{cite journal | url=https://web.stanford.edu/class/sts145/Library/life.pdf | title=Mathematical Games - The Fantastic Combinations of John Conway's New Solitaire Game 'Life' | first=Martin | last=Gardner  | issue=223 | journal=[[Scientific American]] | date=October 1970 | pages=120\u2013123| doi=10.1038/scientificamerican1070-120 }}</ref>\n\nThe game is a [[zero-player game]], meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is [[Turing complete]] and can simulate a [[von Neumann universal constructor|universal constructor]] or any other [[Turing machine]].\n\n==Rules==\nThe universe of the ''Game of Life'' is an infinite, two-dimensional [[Orthogonality|orthogonal]] grid of square ''cells'', each of which is in one of two possible states, ''alive'' or ''dead'', (or ''populated'' and ''unpopulated'', respectively). Every cell interacts with its eight ''[[Moore neighborhood|neighbours]]'', which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:\n# Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n# Any live cell with two or three live neighbours lives on to the next generation.\n# Any live cell with more than three live neighbours dies, as if by overpopulation.\n# Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n\nThese rules, which compare the behavior of the automaton to real life, can be condensed into the following:\n# Any live cell with two or three live neighbors survives.\n# Any dead cell with three live neighbors becomes a live cell.\n# All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n\nThe initial pattern constitutes the ''seed'' of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed; births and deaths occur simultaneously, and the discrete moment at which this happens is sometimes called a ''tick''. Each generation is a ''[[pure function]]'' of the preceding one. The rules continue to be applied repeatedly to create further generations.\n\n==Origins==\nIn late 1940, [[John von Neumann]] defined life as a creation (as a ''being'' or organism) which can reproduce itself and simulate a [[Turing machine]]. Von Neumann was thinking about an engineering solution which would use electromagnetic components floating randomly in liquid or gas.<ref>{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/1179 1179]|isbn=978-1-57955-008-0|url=https://archive.org/details/newkindofscience00wolf/page/1179}}</ref> This turned out not to be realistic with the technology available at the time. [[Stanislaw Ulam]] invented [[cellular automata]], which were intended to simulate von Neumann's theoretical electromagnetic constructions. Ulam discussed using computers to simulate his cellular automata in a two-dimensional lattice in several papers. In parallel, Von Neumann attempted to construct Ulam's cellular automaton. Although successful, he was busy with other projects and left some details unfinished. His construction was complicated because it tried to simulate his own engineering design. Over time, simpler life constructions were provided by other researchers, and published in papers and books.{{citation needed|date=January 2018}}\n\nMotivated by questions in mathematical logic and in part by work on simulation games by Ulam, among others, [[John Horton Conway|John Conway]] began doing experiments in 1968 with a variety of different 2D cellular automaton rules.<ref>{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/877 877]|isbn=978-1-57955-008-0|url=https://archive.org/details/newkindofscience00wolf/page/877}}</ref> [[John Horton Conway|Conway's]] initial goal was to define an interesting and unpredictable cell automaton. Thus, he wanted some configurations to last for a long time before dying, other configurations to go on forever without allowing cycles, etc. It was a significant challenge and an open problem for years before experts on cell automatons managed to prove that, indeed, ''Conway's Game of Life'' admitted of a configuration which was alive in the sense of satisfying Von Neumann's two general requirements. While the definitions before ''Conway's Life'' were proof-oriented, Conway's construction aimed at simplicity without ''a priori'' providing proof the automaton was alive.\n\nConway chose his rules carefully, after considerable experimentation, to meet these criteria:\n# There should be no explosive growth.\n# There should exist small initial patterns with chaotic, unpredictable outcomes.\n# There should be potential for [[von Neumann universal constructor]]s.\n# The rules should be as simple as possible, whilst adhering to the above constraints.<ref>Conway, private communication to the 'Life list', 14 April 1999.</ref>\n\nThe game made its first public appearance in the October 1970 issue of ''[[Scientific American]]'', in [[Martin Gardner]]'s \"[[Mathematical Games (column)|Mathematical Games]]\" column. Theoretically, ''Conway's Life'' has the power of a [[universal Turing machine]]: anything that can be computed [[algorithm]]ically can be computed within ''Life''.<ref name=\"chapman\"> It is a model and simulation that is interesting to watch and can show that simple things can become complicated problems.{{cite web|url=http://www.igblan.free-online.co.uk/igblan/ca/|title=Life Universal Computer|author=Paul Chapman|accessdate=12 July 2009|date=11 November 2002}}</ref><ref name=\"bcg\">{{Cite book | last1=Berlekamp | first1=E. R. | author1-link=Elwyn Berlekamp | last2=Conway | first2=John Horton | author2-link=John Horton Conway | last3=Guy | first3=R. K. | author3-link=Richard K. Guy | title=Winning Ways for your Mathematical Plays | publisher=A K Peters Ltd | edition=2nd | year=2001\u20132004| title-link=Winning Ways for your Mathematical Plays }}</ref><ref>{{cite book|last=Wolfram|first=Stephen|title=A New Kind of Science|publisher=Wolfram Media, Inc.|year=2002|page=[https://archive.org/details/newkindofscience00wolf/page/877 877]|isbn=978-1-57955-008-0|url=https://archive.org/details/newkindofscience00wolf/page/877}}</ref> Gardner wrote, \"Because of Life's analogies with the rise, fall and alterations of a society of living organisms, it belongs to a growing class of what are called 'simulation games' (games that resemble real life processes).\"<ref>{{cite journal | url=https://web.stanford.edu/class/sts145/Library/life.pdf | title=Mathematical Games - The Fantastic Combinations of John Conway's New Solitaire Game 'Life' | first=Martin | last=Gardner  | issue=223 | journal=[[Scientific American]] | date=October 1970 | pages=120\u2013123| doi=10.1038/scientificamerican1070-120 }}</ref> \n\nSince its publication, ''Conway's Game of Life'' has attracted much interest, because of the surprising ways in which the patterns can evolve. ''Life'' provides an example of [[emergence]] and [[self-organization]]. Scholars in various fields, such as [[computer science]], [[physics]], [[biology]], [[biochemistry]], [[economics]], [[mathematics]], [[philosophy]], and [[generative science]]s have made use of the way that complex patterns can emerge from the implementation of the game's simple rules.{{citation needed|reason=Example from philosophy given, but claim made across various fields, some evidence to substantiate, elucidate the implicit claim of \"diverse academic use of this game\" should be provided|date=April 2015}} The game can also serve as a didactic [[analogy]], used to convey the somewhat counter-intuitive notion that design and organization can spontaneously emerge in the absence of a designer. For example, cognitive scientist [[Daniel Dennett]] has used the analogy of ''Conway's Life'' \"universe\" extensively to illustrate the possible evolution of complex philosophical constructs, such as [[consciousness]] and [[free will]], from the relatively simple set of deterministic physical laws, which might govern our universe.<ref>{{cite book|last=Dennett|first=D. C.|date=1991|title=Consciousness Explained|location=Boston|publisher=Back Bay Books|isbn=978-0-316-18066-5|url-access=registration|url=https://archive.org/details/consciousnessexp00denn}}</ref><ref>{{cite book|last=Dennett|first= D. C. |date=1995|title=Darwin's Dangerous Idea: Evolution and the Meanings of Life|url=https://archive.org/details/darwinsdangerous0000denn|url-access=registration|location=New York|publisher= Simon & Schuster |isbn= 978-0-684-82471-0}}</ref><ref>{{cite book|last=Dennett|first= D. C. |date=2003 |title=Freedom Evolves |location=New York |publisher=Penguin Books |isbn =978-0-14-200384-8}}</ref>\n\nThe popularity of ''Conway's Game of Life'' was helped by its coming into being just in time for a new generation of inexpensive computer access which was being released into the market. The game could be run for hours on these machines, which would otherwise have remained unused at night. In this respect, it foreshadowed the later popularity of computer-generated [[fractal]]s. For many, ''Life'' was simply a programming challenge: a fun way to use otherwise wasted [[Central processing unit|CPU]] cycles. For some, however, ''Life'' had more philosophical connotations. It developed a cult following through the 1970s and beyond; current developments have gone so far as to create theoretic emulations of computer systems within the confines of a Life board.<ref>{{cite web|url=http://rendell-attic.org/gol/tm.htm|title=A Turing Machine in Conway's Game of Life|author=Paul Rendell|date=January 12, 2005|accessdate=July 12, 2009}}</ref><ref>{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=Spartan_universal_computer-constructor|title=Spartan universal computer-constructor|author=Adam P. Goucher|publisher=LifeWiki|accessdate=July 12, 2009}}</ref>\n\n==Examples of patterns==\nMany different types of patterns occur in the ''Game of Life'', which are classified according to their behaviour. Common pattern types include: ''[[Still life (cellular automaton)|still lifes]]'', which do not change from one generation to the next; ''[[Oscillator (cellular automaton)|oscillators]]'', which return to their initial state after a finite number of generations; and ''[[spaceship (cellular automaton)|spaceships]]'', which translate themselves across the grid.\n\nThe earliest interesting patterns in the ''Game of Life'' were discovered without the use of computers. The simplest still lifes and oscillators were discovered while tracking the fates of various small starting configurations using [[graph paper]], [[blackboard]]s, and physical game boards, such as those used in [[Go (board game)|Go]]. During this early research, Conway discovered that the R-[[pentomino]] failed to stabilize in a small number of generations. In fact, it takes 1103 generations to stabilize, by which time it has a population of 116 and has generated six escaping [[Glider (Conway's Life)|gliders]];<ref>{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=R-pentomino|title=R-pentomino|publisher=LifeWiki|accessdate=July 12, 2009}}</ref> these were the first spaceships ever discovered.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_g.htm#glider|author=Stephen A. Silver|title=Glider|publisher=The Life Lexicon|accessdate=March 4, 2019}}\n</ref>\n\nFrequently occurring<ref>{{cite web|url=http://www.conwaylife.com/soup/census.asp?rule=B3/S23&sl=1&os=1&ss=1|archiveurl=https://web.archive.org/web/20090910010855/http://conwaylife.com/soup/census.asp?rule=B3%2FS23&sl=1&os=1&ss=1|archivedate=2009-09-10|title=Census Results in Conway's Game of Life|publisher=The Online Life-Like CA Soup Search|accessdate=July 12, 2009|url-status=dead}}\n</ref><ref>{{cite web|url=http://wwwhomes.uni-bielefeld.de/achim/moving.html|title=Spontaneous appeared Spaceships out of Random Dust|publisher=Achim Flammenkamp (1995-12-09)|accessdate=July 10, 2012}}</ref> examples (in that they emerge frequently from a random starting configuration of cells) of the three aforementioned pattern types are shown below, with live cells shown in black and dead cells in white. ''Period'' refers to the number of ticks a pattern must iterate through before returning to its initial configuration.\n\n{{col-begin|width=auto; margin:auto}}\n{{col-break}}\n{| class=\"wikitable\"\n|-\n! colspan=\"2\" | Still lifes\n|-\n| Block\n| [[File:Game of life block with border.svg]]\n|-\n| Bee-<br>hive\n| [[File:Game of life beehive.svg]]\n|-\n| Loaf\n| [[File:Game of life loaf.svg]]\n|-\n| Boat\n| [[File:Game of life boat.svg]]\n|-\n| Tub\n| [[File:Game of life flower.svg]]\n|}\n{{col-break|gap=1em}}\n{| class=\"wikitable\"\n|-\n! colspan=\"2\" | Oscillators\n|-\n| Blinker<br>(period 2)\n| [[File:game of life blinker.gif]]\n|-\n| Toad<br>(period 2)\n| [[File:game of life toad.gif]]\n|-\n| Beacon<br>(period 2)\n| [[File:game of life beacon.gif]]\n|-\n| Pulsar<br>(period 3)\n| [[File:game of life pulsar.gif]]\n|-\n| Penta-<br>decathlon<br>(period&nbsp;15)\n| [[File:I-Column.gif]]\n|}\n{{col-break|gap=1em}}\n{| class=\"wikitable\"\n|-\n! colspan=\"2\" | Spaceships\n|-\n| Glider\n| [[File:Game of life animated glider.gif]]\n|-\n| Light-<br>weight<br>spaceship<br>(LWSS)\n| [[File:Game of life animated LWSS.gif]]\n|-\n| Middle-<br>weight<br>spaceship<br>(MWSS)\n| [[File:Animated Mwss.gif]]\n|-\n| Heavy-<br>weight<br>spaceship<br>(HWSS)\n| [[File:Animated Hwss.gif]]\n|}\n{{col-end}}\n\nThe ''pulsar''<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_p.htm#pulsar |title=Pulsar |author=Stephen A. Silver |publisher=The Life Lexicon |accessdate=March 4, 2019}}\n</ref> is the most common period 3 oscillator. The great majority of naturally occurring oscillators are period 2, like the blinker and the toad, but oscillators of many periods are known to exist,<ref>[http://entropymine.com/jason/life/status.html#oscper Game of Life Status page], Jason Summers, retrieved 2012-02-23.</ref> and oscillators of periods 4, 8, 14, 15, 30 and a few others have been seen to arise from random initial conditions.<ref>{{cite web|url=http://wwwhomes.uni-bielefeld.de/achim/freq_top_life.html |title=Most seen natural occurring ash objects in Game of Life |author=Achim Flammenkamp |date=2004-09-07 |accessdate=2008-09-16}}</ref> Patterns which evolve for long periods before stabilizing are called ''[[Methuselah (cellular automaton)|Methuselahs]]'', the first-discovered of which was the R-pentomino. ''Diehard'' is a pattern that eventually disappears, rather than stabilizing, after 130 generations, which is conjectured to be maximal for patterns with seven or fewer cells.<ref>\n{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_d.htm#diehard|title=Diehard|author=Stephen A. Silver|publisher=The Life Lexicon|accessdate=March 4, 2019}}</ref> ''Acorn'' takes 5206 generations to generate 633 cells, including 13 escaped gliders.<ref>\n{{cite web|url=http://pentadecathlon.com/lifeNews/2005/02/new_methuselah_records.html |title=New Methuselah Records |author=Koenig, H. |date=February 21, 2005 |accessdate=January 24, 2009}}</ref>\n\n{|  style=\"margin:auto; text-align:center;\"\n|-\n| [[File:Game of life fpento.svg|framed|The R-pentomino]]\n| [[File:game of life diehard.svg|framed|Diehard]]\n| [[File:game of life acorn.svg|framed|Acorn]]\n|}\n\nConway originally conjectured that no pattern can grow indefinitely\u2014i.e., that for any initial configuration with a finite number of living cells, the population cannot grow beyond some finite upper limit. In the game's original appearance in \"Mathematical Games\", Conway offered a prize of fifty dollars to the first person who could prove or disprove the conjecture before the end of 1970. The prize was won in November by a team from the [[Massachusetts Institute of Technology]], led by [[Bill Gosper]]; the \"Gosper glider gun\" produces its first glider on the 15th generation, and another glider every 30th generation from then on. For many years, this glider gun was the smallest one known.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_g.htm#gosperglidergun|title=Gosper glider gun|author=Stephen A. Silver|publisher=The Life Lexicon|accessdate=March 4, 2019}}</ref> In 2015, a gun called the \"Simkin glider gun\", which releases a glider every 120th generation, was discovered that has fewer live cells but which is spread out across a larger bounding box at its extremities.<ref>[http://conwaylife.com/forums/viewtopic.php?f=2&t=1599&start=200#p19125 The Hunting of the New Herschel Conduits], ConwayLife forums, April 28th, 2015, posts by Michael Simkin (\"simsim314\") and Dongook Lee (\"Scorbie\").</ref>\n{| style=\"margin:auto; text-align:center;\"\n|-\n|[[File:Game of life glider gun.svg|framed|Gosper glider gun]]\n|-\n|[[File:Game of life Simkin glider gun.svg|562px|framed|Simkin glider gun]]\n|}\n\nSmaller patterns were later found that also exhibit infinite growth. All three of the patterns shown below grow indefinitely. The first two create a single ''block-laying switch engine'': a configuration that leaves behind two-by-two still life blocks as its translates itself across the game's universe.<ref>\n{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=Block-laying_switch_engine|title=Block-laying switch engine|publisher=LifeWiki|accessdate=July 12, 2009}}</ref> The third configuration creates two such patterns. The first has only ten live cells, which has been proven to be minimal.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_i.htm#infinitegrowth |title=Infinite Growth |author=Stephen A. Silver|publisher=The Life Lexicon |accessdate=March 4, 2019}}</ref> The second fits in a five-by-five square, and the third is only one cell high.\n\n{|  style=\"margin:auto; text-align:center;\"\n|-\n| [[File:game of life infinite1.svg]] &nbsp;&nbsp;&nbsp;&nbsp;[[File:game of life infinite2.svg]]\n|-\n| <br />[[File:game of life infinite3.svg]]\n|}\nLater discoveries included other ''[[Gun (cellular automaton)|guns]]'', which are stationary, and which produce gliders or other spaceships; ''[[puffer train]]s'', which move along leaving behind a trail of debris; and ''[[rake (cellular automaton)|rakes]]'', which move and emit spaceships.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_r.htm#rake|title=Rake|author=Stephen A. Silver|publisher=The Life Lexicon|accessdate=March 4, 2019}}</ref> Gosper also constructed the first pattern with an [[Asymptotically optimal algorithm|asymptotically optimal]] [[quadratic growth|quadratic growth rate]], called a ''[[Breeder (cellular automaton)|breeder]]'' or ''lobster'', which worked by leaving behind a trail of guns.\n\nIt is possible for gliders to interact with other objects in interesting ways. For example, if two gliders are shot at a block in a specific position, the block will move closer to the source of the gliders. If three gliders are shot in just the right way, the block will move farther away. This ''sliding block memory'' can be used to simulate a [[Counter (digital)|counter]]. It is possible to construct [[logic gate]]s such as ''[[logical conjunction|AND]]'', ''[[Logical disjunction|OR]]'' and ''[[Negation|NOT]]'' using gliders. It is possible to build a pattern that acts like a [[finite-state machine]] connected to two counters. This has the same computational power as a [[universal Turing machine]], so the Game of Life is theoretically as powerful as any computer with unlimited memory and no time constraints; it is [[Turing complete]].<ref name=\"chapman\"/><ref name=\"bcg\"/> In fact, several different programmable computer architectures<ref>{{cite web|url=http://conwaylife.com/forums/viewtopic.php?f=2&t=2561#p37428|title=Programmable computer|publisher=conwaylife.com forums|accessdate=August 23, 2018}}</ref><ref>{{cite web|url=http://rendell-attic.org/gol/tm.htm|title=A Turing Machine in Conway's Game of Life, extendable to a Universal Turing Machine|publisher=Paul Rendell|accessdate=August 23, 2018}}</ref> have been implemented in Conway's Life, including a pattern that simulates Tetris.<ref>{{cite web|url=https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673|title=Build a working game of Tetris in Conway's Game of Life|publisher=StackExchange|accessdate=August 23, 2018}}</ref>\n\nFurthermore, a pattern can contain a collection of guns that fire gliders in such a way as to construct new objects, including copies of the original pattern. A ''universal constructor'' can be built which contains a Turing complete computer, and which can build many types of complex objects, including more copies of itself.<ref name=\"bcg\"/>\n\nOn March 6, 2018, the first truly elementary knightship, Sir Robin, was discovered by Adam P. Goucher.<ref>{{cite web|url=http://www.conwaylife.com/forums/viewtopic.php?f=2&t=3303|title=Elementary knightship|access-date=9 March 2018}}</ref> A ''knightship'' is a spaceship that moves two squares left for every one square it moves down (like a [[Knight (chess)|knight in chess]]), as opposed to moving orthogonally or along a 45\u00b0 diagonal. This is the first new spaceship movement pattern for an elementary spaceship found in forty-eight years. \"Elementary\" means that it cannot be decomposed into smaller interacting patterns such as gliders and still lifes.<ref>[http://conwaylife.com/wiki/Elementary \"Elementary\"], LifeWiki, retrieved 2018-11-21</ref>\n\n==Undecidability==\n\nMany patterns in the Game of Life eventually become a combination of still lifes, oscillators, and spaceships; other patterns may be called chaotic. A pattern may stay chaotic for a very long time until it eventually settles to such a combination.\n\n''Life'' is [[undecidable problem|undecidable]], which means that given an initial pattern and a later pattern, no algorithm exists that can tell whether the later pattern is ever going to appear. This is a corollary of the [[halting problem]]: the problem of determining whether a given program will finish running or continue to run forever from an initial input.<ref>Elwyn R. Berlekamp, John H. Conway, and Richard K. Guy, Winning Ways for your Mathematical Plays. Academic Press, 1982</ref>\n\nIndeed, since ''Life'' includes a pattern that is equivalent to a [[universal Turing machine]] (UTM), this deciding algorithm, if it existed, could be used to solve the halting problem by taking the initial pattern as the one corresponding to a UTM plus an input, and the later pattern as the one corresponding to a halting state of the UTM. It also follows that some patterns exist that remain chaotic forever. If this were not the case, one could progress the game sequentially until a non-chaotic pattern emerged, then compute whether a later pattern was going to appear.\n\n==Self-replication==\nOn May 18, 2010, Andrew J. Wade announced a self-constructing pattern, dubbed \"Gemini\", that creates a copy of itself while destroying its parent.<ref>{{cite web|url=http://conwaylife.com/forums/viewtopic.php?f=2&t=399&p=2327#p2327 |title=Universal Constructor Based Spaceship |publisher=Conwaylife.com |accessdate=2012-06-24}}</ref><ref>{{cite web|url=http://conwaylife.com/wiki/index.php?title=Gemini |title=Gemini \u2013 LifeWiki |publisher=Conwaylife.com |accessdate=2012-06-24}}</ref> This pattern replicates in 34 million generations, and uses an instruction tape made of gliders oscillating between two stable configurations made of Chapman\u2013Greene construction arms. These, in turn, create new copies of the pattern, and destroy the previous copy. Gemini is also a spaceship, and is the first spaceship constructed in the Game of Life that is an oblique spaceship, which is a spaceship that is neither orthogonal nor purely diagonal.<ref>{{Cite news|periodical=New Scientist|date=16 June 2010|first=Jacob|last=Aron|title=First replicating creature spawned in life simulator|url=https://www.newscientist.com/article/mg20627653.800-first-replicating-creature-spawned-in-life-simulator.html|accessdate=12 October 2013}}</ref><ref>{{cite web|url=http://www.conwaylife.com/wiki/Types_of_spaceships#Knightship |title=Gemini \u2013 LifeWiki |publisher=Conwaylife.com |accessdate=2013-10-16}}</ref> In December 2015, diagonal versions of the Gemini were built.<ref>{{cite web|url=http://www.conwaylife.com/wiki/Demonoid|title=Demonoid|publisher=LifeWiki|access-date=18 June 2016}}</ref>\n\nOn November 23, 2013, Dave Greene built the first [[replicator (cellular automaton)|replicator]] in ''Conway's Game of Life'' that creates a complete copy of itself, including the instruction tape.<ref>{{cite web|url=http://www.conwaylife.com/forums/viewtopic.php?f=2&t=1006&p=9917#p9901|title=Geminoid Challenge|publisher=Conwaylife.com|accessdate=2015-06-25}}</ref>\n\nIn October 2018, Adam P. Goucher finished his construction of the 0E0P metacell, a metacell capable of self-replication. This differed from previous metacells, such as the OTCA metapixel by Brice Due, which only worked with already constructed copies near them. The 0E0P metacell works by using construction arms to create copies that simulate the programmed rule.<ref>{{Citation|last=Passe-Science|title=Automate Cellulaire - Passe-science #27|date=2019-05-29|url=https://www.youtube.com/watch?v=CfRSVPhzN5M|access-date=2019-06-25}}</ref> The actual simulation of Conway's Life or other [[Moore neighborhood]] rules is done by simulating an equivalent rule using the [[von Neumann neighborhood]] with more states.<ref>{{Cite web|url=https://cp4space.wordpress.com/2018/11/12/fully-self-directed-replication/|title=Fully self-directed replication|last=apgoucher|date=2018-11-12|website=Complex Projective 4-Space|language=en|access-date=2019-06-25}}</ref> The name 0E0P is short for \"Zero Encoded by Zero Population\", which indicates that instead of a metacell being in an \"off\" state simulating empty space, the 0E0P metacell removes itself when the cell enters that state, leaving a blank space.<ref>{{Cite web|url=http://www.conwaylife.com/wiki/0E0P|title=0E0P metacell - LifeWiki|website=www.conwaylife.com|access-date=2019-06-24}}</ref>\n\n==Iteration==\nFrom most random initial patterns of living cells on the grid, observers will find the population constantly changing as the generations tick by. The patterns that emerge from the simple rules may be considered a form of [[mathematical beauty]]. Small isolated sub patterns with no initial symmetry tend to become symmetrical. Once this happens, the symmetry may increase in richness, but it cannot be lost unless a nearby sub pattern comes close enough to disturb it. In a very few cases the society eventually dies out, with all living cells vanishing, though this may not happen for a great many generations. Most initial patterns eventually burn out, producing either stable figures or patterns that oscillate forever between two or more states;<ref>{{cite web|url=http://www.geocities.com/conwaylife/|author=Andrzej Okrasinski|title=Game of Life Object Statistics|accessdate=July 12, 2009|archiveurl=https://web.archive.org/web/20090727010353/http://geocities.com/conwaylife/ |archivedate=2009-07-27}}</ref><ref>{{cite web|url=http://www.conwaylife.com/soup/|archiveurl=https://web.archive.org/web/20090910010849/http://conwaylife.com/soup/ |archivedate=2009-09-10|author=Nathaniel Johnston|title=The Online Life-Like CA Soup Search|accessdate=July 12, 2009}}</ref> many also produce one or more gliders or spaceships that travel indefinitely away from the initial location. Because of the nearest-neighbour based rules, no information can travel through the grid at a greater rate than one cell per unit time, so this velocity is said to be the [[Speed of light (cellular automaton)|cellular automaton speed of light]] and denoted ''c''.\n\n==Algorithms==\nEarly patterns with unknown futures, such as the R-pentomino, led computer programmers across the world to write programs to track the evolution of Life patterns. Most of the early [[algorithm]]s were similar: they represented ''Life'' patterns as two-dimensional arrays in computer memory. Typically two arrays are used: one to hold the current generation, and one to calculate its successor. Often 0 and 1 represent dead and live cells respectively. A nested [[for loop]] considers each element of the current array in turn, counting the live neighbours of each cell to decide whether the corresponding element of the successor array should be 0 or 1. The successor array is displayed. For the next iteration, the arrays swap roles so that the successor array in the last iteration becomes the current array in the next iteration.\n\nA variety of minor enhancements to this basic scheme are possible, and there are many ways to save unnecessary computation. A cell that did not change at the last time step, and none of whose neighbours changed, is guaranteed not to change at the current time step as well. So, a program that keeps track of which areas are active can save time by not updating inactive zones.<ref>{{cite web|url=http://www.ibiblio.org/lifepatterns/lifeapplet.html|title=About my Conway's Game of Life Applet|author=Alan Hensel|accessdate=July 12, 2009}}</ref>\n[[File:Trefoil knot conways game of life.gif|alt=Game of Life on the surface of a trefoil knot|thumb|Game of Life on the surface of a [[trefoil knot]]]]\nTo avoid decisions and branches in the counting loop, the rules can be rearranged from an [[Egocentrism|egocentric]] approach of the inner field regarding its neighbours to a scientific observer's viewpoint: if the sum of all nine fields in a given neighbourhood is three, the inner field state for the next generation will be life; if the all-field sum is four, the inner field retains its current state; and every other sum sets the inner field to death.\n\nIf it is desired to save memory, the storage can be reduced to one array plus two line buffers. One line buffer is used to calculate the successor state for a line, then the second line buffer is used to calculate the successor state for the next line. The first buffer is then written to its line and freed to hold the successor state for the third line. If a [[torus|toroidal]] array is used, a third buffer is needed so that the original state of the first line in the array can be saved until the last line is computed.\n\n[[File:Long gun.gif|thumb|right|Glider gun within a toroidal array. The stream of gliders eventually wraps around and destroys the gun.]]\n[[File:\u0418\u0433\u0440\u0430 \"\u0416\u0438\u0437\u043d\u044c\".gif|thumb|right|Red glider on the square lattice with periodic boundary conditions]]\n\nIn principle, the ''Life'' field is infinite, but computers have finite memory. This leads to problems when the active area encroaches on the border of the array. Programmers have used several strategies to address these problems. The simplest strategy is simply to assume that every cell outside the array is dead. This is easy to program but leads to inaccurate results when the active area crosses the boundary. A more sophisticated trick is to consider the left and right edges of the field to be stitched together, and the top and bottom edges also, yielding a [[torus|toroidal]] array. The result is that active areas that move across a field edge reappear at the opposite edge. Inaccuracy can still result if the pattern grows too large, but there are no pathological edge effects. Techniques of dynamic storage allocation may also be used, creating ever-larger arrays to hold growing patterns. ''Life'' on a finite field is sometimes explicitly studied; some implementations, such as ''[[Golly (program)|Golly]]'', support a choice of the standard infinite field, a field infinite only in one dimension or a finite field, with a choice of topologies such as a cylinder, a torus or a [[M\u00f6bius strip]].\n\nAlternatively, the programmer may abandon the notion of representing the ''Life'' field with a 2-dimensional array, and use a different data structure, such as a vector of coordinate pairs representing live cells. This approach allows the pattern to move about the field unhindered, as long as the population does not exceed the size of the live-coordinate array. The drawback is that counting live neighbours becomes a hash-table lookup or search operation, slowing down simulation speed. With more sophisticated data structures this problem can also be largely solved.\n\nFor exploring large patterns at great time depths, sophisticated algorithms such as [[Hashlife]] may be useful. There is also a method, applicable to other cellular automata too, for implementation of the ''Game of Life'' using arbitrary asynchronous updates whilst still exactly emulating the behaviour of the synchronous game.<ref>{{cite conference|title=Self-Reproduction in Asynchronous Cellular Automata |first=Chrystopher L. |last=Nehaniv |date=15\u201318 July 2002 |conference=2002 NASA/DoD Conference on Evolvable Hardware |conference-url=http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=8000 |publisher=IEEE Computer Society Press |location=Alexandria, Virginia, USA |pages=201\u2013209 |isbn=0-7695-1718-8 |doi=10.1109/EH.2002.1029886 }}</ref> [[Source code]] examples that implement the basic ''Game of Life'' scenario in various programming languages, including [[C (programming language)|C]], [[C++]], [[Java (programming language)|Java]] and [[Python (programming language)|Python]] can be found at [[Rosetta Code]].<ref>{{cite web|url=http://rosettacode.org/wiki/Conway%27s_Game_of_Life|title=Conway's Game of Life}}</ref>\n\n==Variations==\n{{main | Life-like cellular automaton }}\nSince ''Life''{{'}}s inception, new, similar cellular automata have been developed. The standard ''Game of Life'' is symbolized as B3/S23. A cell is born if it has exactly three neighbours, survives if it has two or three living neighbours, and dies otherwise. The first number, or list of numbers, is what is required for a dead cell to be born. The second set is the requirement for a live cell to survive to the next generation. Hence B6/S16 means \"a cell is born if there are six neighbours, and lives on if there are either one or six neighbours\". Cellular automata on a two-dimensional grid that can be described in this way are known as [[Life-like cellular automaton|{{Not a typo|''Life''-like}} cellular automata]]. Another common {{Not a typo|''Life''-like}} automaton, ''[[Highlife (cellular automaton)|Highlife]]'', is described by the rule B36/S23, because having six neighbours, in addition to the original game's B3/S23 rule, causes a birth. ''HighLife'' is best known for its frequently occurring replicators.<ref>[http://www.tip.net.au/~dbell/articles/HighLife.zip HighLife \u2013 An Interesting Variant of Life] by David Bell (.zip file)</ref><ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_r.htm#replicator|title=Replicator|publisher=The Life Lexicon|author=Stephen A. Silver|accessdate=March 4, 2019}}</ref>\n\nAdditional {{Not a typo|''Life''-like}} cellular automata exist. The vast majority of these 2<sup>18</sup> different rules<ref>{{cite web|url=http://conwaylife.com/wiki/Life-like#Life-like_cellular_automata |title=Life-like cellular automata - LifeWiki |publisher=Conwaylife.com |accessdate=March 4, 2019}}</ref> produce universes that are either too chaotic or too desolate to be of interest, but a large subset do display interesting behavior. A further generalization produces the ''isotropic'' rulespace, with 2<sup>102</sup> possible CA rules<ref>{{cite web|url=http://conwaylife.com/wiki/Isotropic |title=Isotropic - LifeWiki |publisher=Conwaylife.com |accessdate=March 4, 2019}}</ref> (Conway's Life again being one of them). These are rules that use the same square grid as the ''Life''-like rules and the same eight-cell neighbourhood, and are likewise invariant under rotation and reflection. However, in isotropic rules, the positions of neighbour cells relative to each other may be taken into account in determining a cell's future state\u2014not just the total number of those neighbours.\n\n[[File:Oscillator.gif|right|frame|A sample of a 48-step oscillator along with a 2-step oscillator and a 4-step oscillator from a 2-D hexagonal Game of Life (rule H:B2/S34)]]\n\nSome variations on ''Life'' modify the geometry of the universe as well as the rule. The above variations can be thought of as 2-D square, because the world is two-dimensional and laid out in a square grid. One-dimensional square variations, known as [[elementary cellular automaton|elementary cellular automata]],<ref>{{cite web|url=http://mathworld.wolfram.com/ElementaryCellularAutomaton.html|publisher=Wolfram Mathworld|title=Elementary Cellular Automaton|accessdate=July 12, 2009}}</ref> and 3-D square variations have been developed, as have 2-D hexagonal and 2-D triangular variations. A variant using non-periodic tile grids has also been made.<ref>{{cite magazine|url=https://www.newscientist.com/article/dn22134-first-gliders-navigate-everchanging-penrose-universe.html|magazine=New Scientist|title=First gliders navigate ever-changing Penrose universe}}</ref>\n\nConway's rules may also be generalized such that instead of two states, ''live'' and ''dead'', there are three or more. State transitions are then determined either by a weighting system or by a table specifying separate transition rules for each state; for example, ''[[Mirek's Cellebration]]''{{'}}s multi-coloured ''Rules Table'' and ''Weighted Life'' rule families each include sample rules equivalent to ''Conway's Life''.\n\nPatterns relating to fractals and fractal systems may also be observed in certain {{Not a typo|''Life''-like}} variations. For example, the automaton B1/S12 generates four very close approximations to the [[Sierpinski triangle]] when applied to a single live cell. The Sierpinski triangle can also be observed in Conway's Game of Life by examining the long-term growth of a long single-cell-thick line of live cells,<ref>{{cite web|url=http://www.conwaylife.com/wiki/index.php?title=One_cell_thick_pattern|title=One cell thick pattern|publisher=LifeWiki|accessdate=July 12, 2009}}</ref> as well as in ''Highlife'', [[Seeds (cellular automaton)|''Seeds'' (B2/S)]], and Wolfram's [[Rule 90]].<ref>{{cite web|url=http://www.conwaylife.com/forums/viewtopic.php?f=7&t=90|title=Life Imitates Sierpinski|publisher=ConwayLife.com forums|accessdate=July 12, 2009}}</ref>\n\n''Immigration'' is a variation that is very similar to ''Conway's Game of Life'', except that there are two ''on'' states, often expressed as two different colours. Whenever a new cell is born, it takes on the on state that is the majority in the three cells that gave it birth. This feature can be used to examine interactions between [[Spaceship (CA)|spaceships]] and other objects within the game.<ref>\n{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_i.htm#immigration |title=Immigration |publisher=The Life Lexicon|author=Stephen A. Silver |accessdate=March 4, 2019}}</ref> Another similar variation, called ''QuadLife'', involves four different on states. When a new cell is born from three different on neighbours, it takes on the fourth value, and otherwise, like ''Immigration'', it takes the majority value.<ref>{{cite web|url=http://www.conwaylife.com/ref/lexicon/lex_q.htm#quadlife |title=QuadLife |publisher=The Life Lexicon|author=Stephen A. Silver |accessdate=March 4, 2019}}</ref> Except for the variation among on cells, both of these variations act identically to Life.\n\n==Music==\nVarious musical composition techniques use Conway's Life, especially in [[MIDI]] sequencing.<ref>{{Cite journal\n  | last1 = Burraston | first1 = Dave\n  | last2 = Edmonds | first2 = Ernest\n  | last3 = Livingstone | first3 = Dan\n  | last4 = Miranda | first4 = Eduardo Reck | authorlink4 = Eduardo Reck Miranda\n  | title = Cellular Automata in MIDI based Computer Music\n  | url = http://quod.lib.umich.edu/i/icmc/bbp2372.2004.047?view=image\n  | journal = Proceedings of the 2004 International Computer Music Conference\n  | year = 2004\n  | citeseerx=10.1.1.6.3882\n  | hdl = 10453/1425\n  | doi =\n }}</ref> A variety of programs exist for creating sound from patterns generated in Life.<ref>{{cite web|url=http://www.synthtopia.com/content/2008/05/29/glitchds-cellular-automaton-sequencer-for-the-nintendo-ds/ |title=glitchDS \u2013 Cellular Automaton Sequencer For The Nintendo DS |publisher=Synthtopia.com |date=2008-05-29 |accessdate=2012-06-24}}</ref><ref>{{cite web|url=http://www.synthtopia.com/content/2009/04/29/game-of-life-music-sequencer/ |title=Game Of Life Music Sequencer |publisher=Synthtopia.com |date=2009-04-29 |accessdate=2012-06-24}}</ref><ref>{{cite web|url=http://www.synthtopia.com/content/2011/01/12/game-of-life-music-sequencer-for-ios-runxt-life/ |title=Game Of Life Music Sequencer For iOS, Runxt Life |publisher=Synthtopia.com |date=2011-01-12 |accessdate=2012-06-24}}</ref>\n\n==Notable programs==\n[[File:Turing Machine in Golly.png|thumb|right|The 6&thinsp;366&thinsp;548&thinsp;773&thinsp;467&thinsp;669&thinsp;985&thinsp;195&thinsp;496&thinsp;000<sup>th</sup> ({{val|6|e=27}}-th) generation of a [[Turing machine]], made in the game of Life, computed in less than 30 seconds on an [[Intel]] Core Duo 2 GHz CPU using Golly in [[Hashlife]] mode]]\n\nComputers have been used to follow ''Life'' configurations since it was first publicized. When John Conway was first investigating how various starting configurations developed, he tracked them by hand using a [[Go (game)|Go]] board with its black and white stones. This was tedious and prone to errors. While Conway was investigating the R-pentomino, John Francis, an undergraduate student at The [[University of Cambridge]], wrote a program (for an IBM 360 at the nearby Institute of Theoretical Astronomy) to check Conway's results. This program showed that the configuration had not reached a stable state after 1000 generations.\n\nThe first interactive ''Life'' program was written in an early version of [[ALGOL 68C]] for the [[PDP-7]] by [[Michael Guy (computer scientist)|M. J. T. Guy]] and [[Stephen R. Bourne|S. R. Bourne]]. The results were published in the October 1970 issue of ''[[Scientific American]]'', along with the statement: \"Without its help, some discoveries about the game would have been difficult to make.\"<ref>{{Cite journal|title=Mathematical Games: The fantastic combinations of John Conway's new solitaire game \"Life\"|first=Martin|last=Gardner|journal=Scientific American|volume=223|issue=4|date=October 1970|pages=120\u2013123|doi=10.1038/scientificamerican1070-120}}</ref>\n\nTwo early implementations of Life on home computers were by Malcolm Banthorpe written in [[BBC BASIC]]. The first was in the January 1984 issue of [[Acorn User]] magazine and Banthorpe followed this with a 3D version in the May 1984 issue (these can be downloaded as PDFs).<ref>{{cite web |url=http://8bs.com/aumags.htm |title=Acorn User Magazine Scans |author=<!--Not stated-->|publisher=The BBC and Master Computer Public Domain Library |access-date=2018-12-29}}</ref>\nSusan Stepney, Professor of Computer Science at the [[University of York]], followed this up in 1988 with \"Life on the line\", a program that generated one-dimensional cellular automata.<ref>{{cite web |url= https://www-users.cs.york.ac.uk/susan/bib/ss/au.htm|title= AcornUser articles |last= Stepney |first= Susan |website=www-users.cs.york.ac.uk |publisher= AcornUser|access-date=2018-12-29}}</ref>\n\nThere are now thousands of ''Life'' programs online, so a full list will not be provided here. The following is a small selection of programs with some special claim to notability, such as popularity or unusual features. Most of these programs incorporate a graphical user interface for pattern editing and simulation, the capability for simulating multiple rules including Life, and a large library of interesting patterns in Life and other CA rules.\n* [[Golly (program)|Golly]] is a cross-platform (Windows, Macintosh, Linux and also iOS and Android) open-source simulation system for ''Life'' and other cellular automata (including all ''Life''-like cellular automata, the ''Generations'' family of cellular automata from ''Mirek's Cellebration'', John von Neumann's 29-state cellular automaton, and others), by Andrew Trevorrow and Tomas Rokicki. It includes the ''Hashlife'' algorithm for extremely fast generation, and [[Lua (programming language)|Lua]] or [[Python (programming language)|Python]] scriptability for both editing and simulation.\n* ''Mirek's Cellebration'' is a freeware 1-D and 2-D cellular automata viewer, explorer and editor for Windows. It includes powerful facilities for simulating and viewing a wide variety of CA rules including ''Life'', and a scriptable editor.\n* ''Xlife'' is a cellular-automaton laboratory by Jon Bennett. The standard UNIX X11 Life simulation application for a long time, it has also been ported to Windows. It can handle cellular automaton rules with the same neighbourhood as ''Life'', and up to eight possible states per cell.<ref>{{cite web | url=http://www.conwaylife.com/wiki/Xlife |title=Xlife}}</ref>\n\nGoogle implemented an [[Easter egg (media)|easter egg]] of ''Conway's Game of Life'' in 2012. Users who search for the term are shown an implementation of the game in the search results page.\n\n==See also==\n* [[Aliquot sequence]], a similar problem of nonnegative integers\n* {{annotated link|Artificial life}}\n* {{annotated link|Glory Season|''Glory Season''}}, is set in a future society where the Game of Life is played in a competitive 2-player mode\n* {{annotated link|Langton's ant}}\n* {{annotated link|Poietic Generator}}, a \"human\" game of life.\n* {{annotated link|Reaction\u2013diffusion system}} that provides diffusing-chemical-reagent simulations (including game-of-life-like).\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n{{commons|Game of Life}}\n<!-- Note: Before adding any additional links here, read [[WP:EL]] and consider adding them to 'dmoz' instead -->\n* {{dmoz|Computers/Artificial_Life/Cellular_Automata/Conway%27s_Game_of_Life}}\n* [http://www.conwaylife.com/ref/lexicon/lex_home.htm Life Lexicon], extensive lexicon with many patterns\n* [http://pentadecathlon.com/lifeNews/index.php Game of Life News]\n* [http://www.conwaylife.com/wiki/ LifeWiki]\n* [http://www.conwaylife.com/forums/ Conway Life forums]\n* [https://catagolue.appspot.com/home Catagolue], an online database of objects in Conway's Game of Life and similar cellular automata\n* [http://cafaq.com/lifefaq/index.php Cellular Automata FAQ&nbsp;\u2013 Conway's Game of Life]\n\n{{Conway's Game of Life}}\n\n{{DEFAULTSORT:Conway's Game Of Life}}\n[[Category:Cellular automaton rules]]\n[[Category:Self-organization]]\n[[Category:Games and sports introduced in 1970]]\n[[Category:Video games with available source code]]\n[[Category:John Horton Conway]]\n", "name_user": "Bumm13", "label": "safe", "comment": "\u2192\u200eVariations:changed \"Spaceship (CA)\" (spaceships) wikilink to \"Spaceship (cellular automaton)\"", "url_page": "//en.wikipedia.org/wiki/Conway%27s_Game_of_Life"}
