{"title_page": "Splay tree", "text_new": "{{Use dmy dates|date=July 2012}}\n{{Infobox data structure\n|name=Splay tree\n|type=tree\n|invented_by=[[Daniel Dominic Sleator]] and [[Robert Endre Tarjan]]\n|invented_year=1985\n|space_avg=O(n)\n|space_worst=O(n)\n|search_avg=O(log n)\n|search_worst=amortized O(log n)\n|insert_avg=O(log n)\n|insert_worst=amortized O(log n)\n|delete_avg=O(log n)\n|delete_worst=amortized O(log n)\n}}\n\nA '''splay tree''' is a [[Self-balancing binary search tree|self-balancing binary search tree]] with the additional property that recently accessed elements are quick to access again.  It performs basic operations such as insertion, look-up and removal in [[big O notation|O]](log n) [[amortized analysis|amortized]] time. For many sequences of non-random operations, splay trees perform better than other search trees, even when the specific pattern of the sequence is unknown.  The splay tree was invented by [[Daniel Sleator]] and [[Robert Tarjan]] in 1985.<ref name=\"SleatorTarjan\">{{harvnb|Sleator|Tarjan|1985}}.</ref>\n\nAll normal operations on a binary search tree are combined with one basic operation, called ''splaying''. Splaying the tree for a certain element rearranges the tree so that the element is placed at the root of the tree.  One way to do this with the basic search operation is to first perform a standard binary tree search for the element in question, and then use [[tree rotation]]s in a specific fashion to bring the element to the top. Alternatively, a top-down algorithm can combine the search and the tree reorganization into a single phase.\n\n== Advantages ==\n\nGood performance for a splay tree depends on the fact that it is self-optimizing, in that frequently accessed nodes will move nearer to the root where they can be accessed more quickly. The worst-case height\u2014though unlikely\u2014is O(n), with the average being O(log ''n'').\nHaving frequently-used nodes near the root is an advantage for many practical applications (also see [[Locality of reference]]), and is particularly useful for implementing [[cache (computing)|cache]]s and [[Garbage collection (computer science)|garbage collection]] algorithms.\n\nAdvantages include:\n* Comparable performance: Average-case performance is as efficient as other trees.<ref>{{harvnb|Goodrich|Tamassia|Goldwasser|2014}}.</ref>\n* Small memory footprint: Splay trees do not need to store any bookkeeping data.\n\n== Disadvantages ==\n\nThe most significant disadvantage of splay trees is that the height of a splay tree can be linear.  For example, this will be the case after accessing all ''n'' elements in non-decreasing order.  Since the height of a tree corresponds to the worst-case access time, this means that the actual cost of an operation can be high. However the [[amortized]] access cost of this worst case is logarithmic, O(log ''n'').  Also, the expected access cost can be reduced to O(log ''n'') by using a randomized variant.<ref>{{harvnb|Albers|Karpinski|2002}}.</ref>\n\nThe representation of splay trees can change even when they are accessed in a 'read-only' manner (i.e. by ''find'' operations).  This complicates the use of such splay trees in a multi-threaded environment.  Specifically, extra management is needed if multiple threads are allowed to perform ''find'' operations concurrently. This also makes them unsuitable for general use in purely functional programming, although even there they can be used in limited ways to implement priority queues.\n\n== Operations ==\n\n=== Splaying ===\nWhen a node ''x'' is accessed, a splay operation is performed on ''x'' to move it to the root. To perform a splay operation we carry out a sequence of ''splay steps'', each of which moves ''x'' closer to the root. By performing a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced, so that we achieve the desired amortized time bounds.\n\nEach particular step depends on three factors:\n* Whether ''x'' is the left or right child of its parent node, ''p'',\n* whether ''p'' is the root or not, and if not\n* whether ''p'' is the left or right child of ''its'' parent, ''g'' (the ''grandparent'' of x).\n\nIt is important to remember to set ''gg'' (the ''great-grandparent'' of x) to now point to x after any splay operation. If ''gg'' is null, then x obviously is now the root and must be updated as such.\n\nThere are three types of splay steps, each of which has two symmetric variants: left- and right-handed. For the sake of brevity, only one of these two is shown for each type. (In the following diagrams, circles indicate nodes of interest and triangles indicate single nodes or sub-trees.)  The three types of splay steps are:\n\n'''Zig step:''' this step is done when ''p'' is the root. The tree is rotated on the edge between ''x'' and ''p''.  Zig steps exist to deal with the parity issue and will be done only as the last step in a splay operation and only when ''x'' has odd depth at the beginning of the operation.\n\n[[File:splay tree zig.svg|center]]\n\n'''Zig-zig step:''' this step is done when ''p'' is not the root and ''x'' and ''p'' are either both right children or are both left children. The picture below shows the case where ''x'' and ''p'' are both left children. The tree is rotated on the edge joining ''p'' with ''its'' parent ''g'', then rotated on the edge joining ''x'' with ''p''. Note that zig-zig steps are the only thing that differentiate splay trees from the ''rotate to root'' method introduced by Allen and Munro<ref name=\"AllenMunro\">{{harvnb|Allen|Munro|1978}}.</ref> prior to the introduction of splay trees.\n\n[[Image:Zigzig.gif|center]]\n\n'''Zig-zag step:''' this step is done when ''p'' is not the root and ''x'' is a right child and ''p'' is a left child or vice versa. The tree is rotated on the edge between ''p'' and x, and then rotated on the resulting edge between ''x'' and g.\n\n[[Image:Zigzag.gif|center]]\n\n=== Join ===\nGiven two trees S and T such that all elements of S are smaller than the elements of T, the following steps can be used to join them to a single tree:\n* Splay the largest item in S. Now this item is in the root of S and has a null right child. \n* Set the right child of the new root to T.\n\n=== Split ===\nGiven a tree and an element ''x'', return two new trees: one containing all elements less than or equal to ''x'' and the other containing all elements greater than ''x''. This can be done in the following way:\n* Splay ''x''. Now it is in the root so the tree to its left contains all elements smaller than ''x'' and the tree to its right contains all element larger than ''x''. \n* Split the right subtree from the rest of the tree.\n\n=== Insertion ===\nTo insert a value ''x'' into a splay tree:\n* Insert ''x'' as with a normal [[binary search tree]].\n* when an item is inserted, a splay is performed.\n* As a result, the newly inserted node ''x'' becomes the root of the tree.\n\nAlternatively:\n* Use the split operation to split the tree at the value of ''x'' to two sub-trees: S and T.\n* Create a new tree in which ''x'' is the root, S is its left sub-tree and T its right sub-tree.\n\n=== Deletion ===\nTo delete a node ''x'', use the same method as with a binary search tree:\n\n* If ''x'' has two children:\n** Swap its value with that of either the rightmost node of its left sub tree (its in-order predecessor) or the leftmost node of its right subtree (its in-order successor).\n** Remove that node instead.\n\nIn this way, deletion is reduced to the problem of removing a node with 0 or 1 children. Unlike a binary search tree, in a splay tree after deletion, we splay the parent of the removed node to the top of the tree.\n\nAlternatively:\n\n* The node to be deleted is first splayed, i.e. brought to the root of the tree and then deleted.  leaves the tree with two sub trees. \n* The two sub-trees are then joined using a \"join\" operation.\n\n== Implementation and variants ==\nSplaying, as mentioned above, is performed during a second, bottom-up pass over the access path of a node. It is possible to record the access path during the first pass for use during the second, but that requires extra space during the access operation.  Another alternative is to keep a parent pointer in every node, which avoids the need for extra space during access operations but may reduce overall time efficiency because of the need to update those pointers.<ref name=\"SleatorTarjan\" />\n\nAnother method which can be used is based on the argument that we can restructure the tree on our way down the access path instead of making a second pass. This top-down splaying routine uses three sets of nodes - left tree, right tree and middle tree. The first two contain all items of original tree known to be less than or greater than current item respectively. The middle tree consists of the sub-tree rooted at the current node. These three sets are updated down the access path while keeping the splay operations in check. Another method, semisplaying, modifies the zig-zig case to reduce the amount of restructuring done in all operations.<ref name=\"SleatorTarjan\" /><ref name=\"Lucas\" />\n\nBelow there is an implementation of splay trees in C++, which uses pointers to represent each node on the tree. This implementation is based on bottom-up splaying version and uses the second method of deletion on a splay tree.  Also, unlike the above definition, this C++ version does ''not'' splay the tree on finds - it only splays on insertions and deletions, and the find operation, therefore, has linear time complexity.\n\n<source lang=\"cpp\">\n#include <functional>\n\n#ifndef SPLAY_TREE\n#define SPLAY_TREE\n\ntemplate<typename T, typename Comp = std::less<T>>\nclass splay_tree {\nprivate:\n  Comp comp;\n  unsigned long p_size;\n  \n  struct node {\n    node *left, *right;\n    node *parent;\n    T key;\n    node(const T& init = T()) : left(nullptr), right(nullptr), parent(nullptr), key(init) { }\n    ~node() {\n\n    }\n  } *root;\n  \n  void left_rotate(node *x) {\n    node *y = x->right;\n    if (y) {\n      x->right = y->left;\n      if (y->left) y->left->parent = x;\n      y->parent = x->parent;\n    }\n    \n    if (!x->parent) root = y;\n    else if (x == x->parent->left) x->parent->left = y;\n    else x->parent->right = y;\n    if (y) y->left = x;\n    x->parent = y;\n  }\n  \n  void right_rotate(node *x) {\n    node *y = x->left;\n    if (y) {\n      x->left = y->right;\n      if (y->right) y->right->parent = x;\n      y->parent = x->parent;\n    }\n    if (!x->parent) root = y;\n    else if (x == x->parent->left) x->parent->left = y;\n    else x->parent->right = y;\n    if (y) y->right = x;\n    x->parent = y;\n  }\n  \n  void splay(node *x) {\n    while (x->parent) {\n      if (!x->parent->parent) {\n        if (x->parent->left == x) right_rotate(x->parent);\n        else left_rotate(x->parent);\n      } else if (x->parent->left == x && x->parent->parent->left == x->parent) {\n        right_rotate(x->parent->parent);\n        right_rotate(x->parent);\n      } else if (x->parent->right == x && x->parent->parent->right == x->parent) {\n        left_rotate(x->parent->parent);\n        left_rotate(x->parent);\n      } else if (x->parent->left == x && x->parent->parent->right == x->parent) {\n        right_rotate(x->parent);\n        left_rotate(x->parent);\n      } else {\n        left_rotate(x->parent);\n        right_rotate(x->parent);\n      }\n    }\n  }\n  \n  void replace(node *u, node *v) {\n    if (!u->parent) root = v;\n    else if (u == u->parent->left) u->parent->left = v;\n    else u->parent->right = v;\n    if (v) v->parent = u->parent;\n  }\n  \n  node* subtree_minimum(node *u) {\n    while (u->left) u = u->left;\n    return u;\n  }\n  \n  node* subtree_maximum(node *u) {\n    while (u->right) u = u->right;\n    return u;\n  }\npublic:\n  splay_tree() : root(nullptr), p_size(0) { }\n  \n  void insert(const T &key) {\n    node *z = root;\n    node *p = nullptr;\n    \n    while (z) {\n      p = z;\n      if (comp(z->key, key)) z = z->right;\n      else z = z->left;\n    }\n    \n    z = new node(key);\n    z->parent = p;\n    \n    if (!p) root = z;\n    else if (comp(p->key, z->key)) p->right = z;\n    else p->left = z;\n    \n    splay(z);\n    p_size++;\n  }\n  \n  node* find(const T &key) {\n    node *z = root;\n    while (z) {\n      if (comp(z->key, key)) z = z->right;\n      else if (comp(key, z->key)) z = z->left;\n      else return z;\n    }\n    return nullptr;\n  }\n        \n  void erase(const T &key) {\n    node *z = find(key);\n    if (!z) return;\n    \n    splay(z);\n    \n    if (!z->left) replace(z, z->right);\n    else if (!z->right) replace(z, z->left);\n    else {\n      node *y = subtree_minimum(z->right);\n      if (y->parent != z) {\n        replace(y, y->right);\n        y->right = z->right;\n        y->right->parent = y;\n      }\n      replace(z, y);\n      y->left = z->left;\n      y->left->parent = y;\n    }\n    \n    delete z;\n    p_size--;\n  }\n\n/* //the alternative implementation\n    void erase(const T &key) {\n        node *z = find(key);\n        if (!z) return;\n        \n        splay(z);\n        \n        node *s = z->left;\n        node *t = z->right;\n        delete z;\n        \n        node *sMax = NULL;\n        if (s) {\n            s->parent = NULL;\n            sMax = subtree_maximum(s);\n            splay(sMax);\n            root = sMax;\n        }\n        if (t) {\n            if (s)\n                sMax->right = t;\n            else\n                root = t;\n            t->parent = sMax;\n        }\n        \n        p_size--;\n    }\n*/\n  \n  const T& minimum() { return subtree_minimum(root)->key; }\n  const T& maximum() { return subtree_maximum(root)->key; }\n  \n  bool empty() const { return root == nullptr; }\n  unsigned long size() const { return p_size; }\n};\n\n#endif // SPLAY_TREE\n</source>\n\n== Analysis ==\nA simple [[amortized analysis]] of static splay trees can be carried out using the [[potential method]]. Define:\n* size(''r'') = the number of nodes in the sub-tree rooted at node ''r'' (including ''r'').\n* rank(''r'') = log<sub>2</sub>(size(''r'')).\n* \u03a6 = the sum of the ranks of all the nodes in the tree.\n\n\u03a6 will tend to be high for poorly balanced trees and low for well-balanced trees.\n\nTo apply the [[potential method]], we first calculate \u0394\u03a6: the change in the potential caused by a splay operation. We check each case separately. Denote by rank\u2032 the rank function after the operation. x, p and g are the nodes affected by the rotation operation (see figures above).\n\n===Zig step===\n:{|\n|-\n| \u0394\u03a6 || = rank\u2032(''p'') \u2212 rank(''p'') + rank\u2032(''x'') \u2212 rank(''x'')&nbsp;&nbsp;\n| [since only p and x change ranks]\n|-\n|    || = rank\u2032(''p'') \u2212 rank(''x'')\n| [since rank\u2032(''x'')=rank(''p'')]\n|-\n|    || \u2264 rank\u2032(''x'') \u2212 rank(''x'')\n| [since rank\u2032(''p'')<rank\u2032(''x'')]\n|}\n===Zig-zig step===\n:{|\n| \u0394\u03a6 ||colspan=2| = rank\u2032(''g'') \u2212 rank(''g'') + rank\u2032(''p'') \u2212 rank(''p'') + rank\u2032(''x'') \u2212 rank(''x'')\n|-\n|    || =  rank\u2032(''g'') + rank\u2032(''p'') \u2212 rank(''p'') \u2212 rank(''x'')&nbsp;&nbsp;\n| [since rank\u2032(x)=rank(g)]\n|-\n|    || \u2264  rank\u2032(''g'') + rank\u2032(''x'') \u2212 2 rank(''x'')\n| [since rank(''x'')<rank(''p'') and rank\u2032(''x'')>rank\u2032(''p'')]\n|-\n|    || \u2264  3(rank\u2032(''x'')\u2212rank(''x'')) \u2212 2\n| [due to the concavity of the log function]\n|}\n\n===Zig-zag step===\n:{|\n| \u0394\u03a6 ||colspan=2| = rank\u2032(''g'') \u2212 rank(''g'') + rank\u2032(''p'') \u2212 rank(''p'') + rank\u2032(''x'') \u2212 rank(''x'')\n|-\n|    || \u2264 rank\u2032(''g'') + rank\u2032(''p'') \u2212 2 rank(''x'')&nbsp;&nbsp;\n| [since rank\u2032(''x'')=rank(''g'') and rank(''x'')<rank(''p'')]\n|-\n|    || \u2264 3(rank\u2032(''x'')\u2212rank(''x'')) \u2212 2\n| [due to the concavity of the log function]\n|}\nThe amortized cost of any operation is \u0394\u03a6 plus the actual cost. The actual cost of any zig-zig or zig-zag operation is 2 since there are two rotations to make. Hence:\n\n:{|\n| amortized-cost || = cost + \u0394\u03a6\n|-\n|                || \u2264 3(rank\u2032(''x'')\u2212rank(''x''))\n|}\n\nWhen summed over the entire splay operation, this [[telescoping series|telescopes]] to 3(rank(root)\u2212rank(''x'')) which is O(log ''n'').  The Zig operation adds an amortized cost of 1, but there's at most one such operation.\n\nSo now we know that the total ''amortized'' time for a sequence of ''m'' operations is:\n:<math>T_\\mathrm{amortized}(m) = O(m \\log n)</math>\n\nTo go from the amortized time to the actual time, we must add the decrease in potential from the initial state before any operation is done (\u03a6<sub>''i''</sub>) to the final state after all operations are completed (\u03a6<sub>''f''</sub>).\n\n:<math>\\Phi_i - \\Phi_f = \\sum_x{\\mathrm{rank}_i(x) - \\mathrm{rank}_f(x)} = O(n \\log n)</math>\n\nwhere the last inequality comes from the fact that for every node ''x'', the minimum rank is 0 and the maximum rank is log(''n'').\n\nNow we can finally bound the actual time:\n\n:<math>T_\\mathrm{actual}(m) = O(m \\log n + n \\log n)</math>\n\n=== Weighted analysis ===\nThe above analysis can be generalized in the following way.\n* Assign to each node ''r'' a weight ''w''(''r'').\n* Define size(''r'') = the sum of weights of nodes in the sub-tree rooted at node ''r'' (including ''r'').\n* Define rank(''r'') and \u03a6 exactly as above.\n\nThe same analysis applies and the amortized cost of a splaying operation is again:\n:<math>\\mathrm{rank}(root)-\\mathrm{rank}(x) = O(\\log{W}- \\log{w(x)}) = O\\left(\\log{\\frac{W}{w(x)}}\\right)</math>\nwhere ''W'' is the sum of all weights.\n\nThe decrease from the initial to the final potential is bounded by:\n:<math>\\Phi_i - \\Phi_f \\leq \\sum_{x\\in tree}{\\log{\\frac{W}{w(x)}}}</math>\nsince the maximum size of any single node is ''W'' and the minimum is ''w(x)''.\n\nHence the actual time is bounded by:\n:<math>O\\left(\\sum_{x \\in sequence}{\\log{\\frac{W}{w(x)}}} + \\sum_{x \\in tree}{\\log{\\frac{W}{w(x)}}}\\right)</math>\n\n== Performance theorems ==\n\nThere are several theorems and conjectures regarding the worst-case runtime for performing a sequence ''S'' of ''m'' accesses in a splay tree containing ''n'' elements.\n\n{{Math theorem|Balance Theorem|The cost of performing the sequence ''S'' is <math>O\\left[m \\log n + n\\log n\\right]</math>.\n  {{Math proof|Take a constant weight, e.g. {{tmath|1=w(x)=1}} for every node ''x''. Then {{tmath|1=W=n}}.}} \nThis theorem implies that splay trees perform as well as static balanced binary search trees on sequences of at least ''n'' accesses.<ref name=\"SleatorTarjan\" />}}\n\n{{Math theorem|Static Optimality Theorem|Let <math>q_x</math> be the number of times element ''x'' is accessed in ''S''. If every element is accessed at least once, then the cost of performing ''S'' is <math>O\\left[m + \\sum_{x\\in tree} q_x\\log\\frac{m}{q_x}\\right]</math> \n  {{Math proof|Let <math>w(x)=q_x</math>. Then <math>W=m</math>.}} \nThis theorem implies that splay trees perform as well as an optimum static binary search tree on sequences of at least ''n'' accesses. They spend less time on the more frequent items.<ref name=\"SleatorTarjan\" />}}\n\n{{Math theorem|Static Finger Theorem|Assume that the items are numbered from 1 through ''n'' in ascending order. Let ''f'' be any fixed element (the 'finger'). Then the cost of performing ''S'' is <math>O\\left[m + n\\log n + \\sum_{x\\in sequence} \\log(|x-f| + 1)\\right]</math>.\n  {{Math proof|Let <math>w(x)=1/(|x-f|+1)^2</math>. Then {{tmath|1=W=O(1)}}. The net potential drop is ''O'' (''n'' log ''n'') since the weight of any item is at least {{tmath|1=1/n^2}}.<ref name=\"SleatorTarjan\" />}} }}\n\n{{Math theorem|Dynamic Finger Theorem|Assume that the 'finger' for each step accessing an element ''y'' is the element accessed in the previous step, ''x''. The cost of performing ''S'' is <math>O\\left[m + n + \\sum_{x,y\\in sequence}^m \\log(|y-x| + 1)\\right]</math>.<ref name=\"ColeEtAl\">{{harvnb|Cole|Mishra|Schmidt|Siegel|2000}}.</ref><ref name=\"Cole\">{{harvnb|Cole|2000}}.</ref>}}\n\n{{Math theorem|Working Set Theorem|At any time during the sequence, let <math>t(x)</math> be the number of distinct elements accessed before the previous time element x was accessed.  The cost of performing ''S'' is <math>O\\left[m + n\\log n + \\sum_{x\\in sequence} \\log(t(x) + 1)\\right]</math> \n  {{Math proof|Let <math>w(x)=1/(t(x)+1)^2</math>. Note that here the weights change during the sequence. However, the sequence of weights is still a permutation of {{tmath|1=1, \\tfrac 1 4, \\tfrac 1 9, \\cdots, \\tfrac 1 {n^2} }}. So as before {{tmath|1=W=O(1)}}. The net potential drop is ''O'' (''n'' log ''n'').}} \nThis theorem is equivalent to splay trees having [[key-independent optimality]].<ref name=\"SleatorTarjan\" />}}\n\n{{Math theorem|Scanning Theorem|Also known as the '''Sequential Access Theorem''' or the '''Queue theorem'''.  Accessing the ''n'' elements of a splay tree in symmetric order takes ''O''(''n'') time, regardless of the initial structure of the splay tree.<ref name=\"Tarjan\">{{harvnb|Tarjan|1985}}.</ref> The tightest upper bound proven so far is <math>4.5n</math>.<ref name=\"Elmasry\">{{harvnb|Elmasry|2004}}.</ref>}}\n\n== Dynamic optimality conjecture ==\n\n{{Main article|Optimal binary search tree}}\n{{unsolved|computer science|Do splay trees perform as well as any other binary search tree algorithm?}}\nIn addition to the proven performance guarantees for splay trees there is an unproven conjecture of great interest from the original Sleator and Tarjan paper.  This conjecture is known as the ''dynamic optimality conjecture'' and it basically claims that splay trees perform as well as any other binary search tree algorithm up to a constant factor.\n\n:'''Dynamic Optimality Conjecture:<ref name=\"SleatorTarjan\" />''' Let <math>A</math> be any binary search tree algorithm that accesses an element <math>x</math> by traversing the path from the root to <math>x</math> at a cost of <math>d(x)+1</math>, and that between accesses can make any rotations in the tree at a cost of 1 per rotation.  Let <math>A(S)</math> be the cost for <math>A</math> to perform the sequence <math>S</math> of accesses.  Then the cost for a splay tree to perform the same accesses is <math>O[n + A(S)]</math>.\n\nThere are several corollaries of the dynamic optimality conjecture that remain unproven:\n\n:'''Traversal Conjecture:<ref name=\"SleatorTarjan\" />''' Let <math>T_1</math> and <math>T_2</math> be two splay trees containing the same elements.  Let <math>S</math> be the sequence obtained by visiting the elements in <math>T_2</math> in preorder (i.e., depth first search order).  The total cost of performing the sequence <math>S</math> of accesses on <math>T_1</math> is <math>O(n)</math>.\n\n:'''Deque Conjecture:<ref name=\"Tarjan\" /><ref name=\"Pettie\">{{harvnb|Pettie|2008}}.</ref><ref name=\"Sundar\">{{harvnb|Sundar|1992}}.</ref>''' Let <math>S</math> be a sequence of <math>m</math> [[double-ended queue]] operations (push, pop, inject, eject).  Then the cost of performing <math>S</math> on a splay tree is <math>O(m + n)</math>.\n\n:'''Split Conjecture:<ref name=\"Lucas\">{{harvnb|Lucas|1991}}.</ref>''' Let <math>S</math> be any permutation of the elements of the splay tree.  Then the cost of deleting the elements in the order <math>S</math> is <math>O(n)</math>.\n\n== Variants ==\n\nIn order to reduce the number of restructuring operations, it is possible to replace the splaying with ''semi-splaying'', in which an element is splayed only halfway towards the root.<ref name=\"SleatorTarjan\"/><ref name=BrinkmannDegraerDeLoof>{{harvnb|Brinkmann|Degraer|De Loof|2009}}.</ref>\n\nAnother way to reduce restructuring is to do full splaying, but only in some of the access operations - only when the access path is longer than a threshold, or only in the first ''m'' access operations.<ref name=\"SleatorTarjan\"/>\n\n== See also ==\n\n* [[Finger tree]]\n* [[Link/cut tree]]\n* [[Scapegoat tree]]\n* [[Zipper (data structure)]]\n* [[tree data structure|Trees]]\n* [[Tree rotation]]\n* [[AVL tree]]\n* [[B-tree]]\n* [[T-tree]]\n* [[List of data structures]]\n* [[Iacono's working set structure]]\n* [[Geometry of binary search trees]]\n* [[Splaysort]], a sorting algorithm using splay trees\n* [[Treap]]\n\n== Notes ==\n\n{{Reflist}}\n\n== References ==\n\n*{{cite journal\n | first1 = Susanne\n | last1 = Albers\n | first2 = Marek\n | last2 = Karpinski\n | title = Randomized Splay Trees: Theoretical and Experimental Results\n | journal = [[Information Processing Letters]]\n | volume = 81\n | issue = 4\n | pages = 213\u2013221\n | date = 28 February 2002\n | url = http://www14.in.tum.de/personen/albers/papers/ipl02.pdf\n | ref = harv\n | doi=10.1016/s0020-0190(01)00230-7\n}}\n\n*{{cite journal\n | first1 = Brian\n | last1 = Allen\n | first2 = Ian\n | last2 = Munro\n | title = Self-organizing search trees\n | journal = [[Journal of the ACM]]\n | volume = 25\n | pages = 526\u2013535\n | date = October 1978\n | issue = 4\n | doi = 10.1145/322092.322094\n | ref = harv\n}}\n\n*{{cite journal\n | last1 = Brinkmann | first1 = Gunnar\n | last2 = Degraer | first2 = Jan\n | last3 = De Loof | first3 = Karel\n | title = Rehabilitation of an unloved child: semi-splaying\n | journal = Software\u2014Practice and Experience\n | volume = 39 | issue = 1 | pages = 33\u201345\n | date = January 2009\n | doi = 10.1002/spe.v39:1\n | citeseerx = 10.1.1.84.790\n | ref = harv\n | url = http://caagt.ugent.be/preprints/splay_spe.pdf\n | quote = The results show that semi-splaying, which was introduced in the same paper as splaying, performs better than splaying under almost all possible conditions. This makes semi-splaying a good alternative for all applications where normally splaying would be applied. The reason why splaying became so prominent while semi-splaying is relatively unknown and much less studied is hard to understand.\n}}\n\n*{{cite journal\n | first1 = Richard\n | last1 = Cole\n | first2 = Bud\n | last2 = Mishra\n | first3 = Jeanette\n | last3 = Schmidt\n | first4 = Alan\n | last4 = Siegel\n | title = On the Dynamic Finger Conjecture for Splay Trees. Part I: Splay Sorting log n-Block Sequences\n | journal = [[SIAM Journal on Computing]]\n | volume = 30 | issue = 1\n | pages = 1\u201343\n | date = January 2000\n | doi = 10.1137/s0097539797326988\n | ref = harv\n| citeseerx = 10.1.1.36.4558\n }}\n\n*{{cite journal\n | first = Richard\n | last = Cole\n | title = On the Dynamic Finger Conjecture for Splay Trees. Part II: The Proof\n | journal = [[SIAM Journal on Computing]]\n | volume = 30 | issue = 1\n | pages = 44\u201385\n | date = January 2000\n | doi = 10.1137/S009753979732699X\n | ref = harv\n| citeseerx = 10.1.1.36.2713\n }}\n\n*{{Citation\n | first = Amr\n | last = Elmasry\n | title = On the sequential access theorem and Deque conjecture for splay trees\n | journal = Theoretical Computer Science\n | volume = 314\n | issue = 3\n | pages = 459\u2013466\n | date = April 2004\n | doi = 10.1016/j.tcs.2004.01.019\n | ref = harv\n | url = https://www.researchgate.net/profile/Amr_Elmasry2/publication/220150614_On_the_sequential_access_theorem_and_deque_conjecture_for_splay_trees/links/0c96052a84e4fe1eba000000.pdf?disableCoverPage=true\n}}\n\n*{{cite book\n | first1 = Michael\n | last1 = Goodrich\n | first2 = Roberto\n | last2 = Tamassia\n | first3 = Michael\n | last3 = Goldwasser\n | title = Data Structures and Algorithms in Java\n | publisher = Wiley\n | page = 506\n | edition = 6\n | year = 2014\n | isbn = 978-1-118-77133-4\n | language = en\n | ref = harv\n}}\n\n*{{cite book\n | first = Donald\n | last = Knuth\n | author-link = Donald Knuth\n | title = [[The Art of Computer Programming]]''\n | volume = 3: Sorting and Searching\n | edition = 3rd\n | publisher = Addison-Wesley\n | year = 1997\n | isbn = 0-201-89685-0\n | page = 478  <!-- section 6.2.3 -->\n | ref = harv\n}}\n\n*{{cite book\n | first = Joan M.\n | last = Lucas\n | contribution = On the Competitiveness of Splay Trees: Relations to the Union-Find Problem\n | title = On-line Algorithms: Proceedings of a DIMACS Workshop, February 11\u201313, 1991\n | publisher = [[DIMACS|Center for Discrete Mathematics and Theoretical Computer Science]]\n | series = Series in Discrete Mathematics and Theoretical Computer Science\n | volume = 7\n | pages = 95\u2013124\n | date = 1991\n | ref = harv\n | isbn = 0-8218-7111-0\n}}\n\n*{{citation\n | first = Seth\n | last = Pettie\n | title = Splay Trees, Davenport-Schinzel Sequences, and the Deque Conjecture\n | journal = Proc. 19th ACM-SIAM Symposium on Discrete Algorithms\n | pages = 1115\u20131124\n | year = 2008\n | bibcode = 2007arXiv0707.2160P\n | volume = 0707\n | arxiv = 0707.2160\n | ref = harv\n | url = http://web.eecs.umich.edu/~pettie/papers/Deque.pdf\n}}\n\n*{{cite journal\n | first1 = Daniel D.\n | last1 = Sleator\n | author1-link = Daniel Sleator\n | first2 = Robert E.\n | last2 = Tarjan\n | author2-link = Robert Tarjan\n | title = Self-Adjusting Binary Search Trees\n | journal = [[Journal of the ACM]]\n | volume = 32\n | issue = 3\n | pages = 652\u2013686\n | year = 1985\n | url = https://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf\n | doi = 10.1145/3828.3835\n | ref = harv\n}}\n\n*{{cite journal\n | first = Rajamani\n | last = Sundar\n | title = On the Deque conjecture for the splay algorithm\n | journal = Combinatorica\n | volume = 12\n | pages = 95\u2013124\n | year = 1992\n | issue = 1\n | doi = 10.1007/BF01191208\n | ref = harv\n}}\n\n*{{cite journal\n | first = Robert E.\n | last = Tarjan\n | author-link = Robert Tarjan\n | title = Sequential access in splay trees takes linear time\n | journal = Combinatorica\n | volume = 5\n | issue = 4\n | pages = 367\u2013378\n | year = 1985\n | doi = 10.1007/BF02579253\n | ref = harv\n}}\n\n== External links ==\n\n* [https://xlinux.nist.gov/dads/HTML/splaytree.html NIST's Dictionary of Algorithms and Data Structures: Splay Tree]\n* [http://www.link.cs.cmu.edu/link/ftp-site/splaying/ Implementations in C and Java (by Daniel Sleator)]\n* [http://wiki.algoviz.org/search/node/splay Pointers to splay tree visualizations] \n* [https://github.com/fbuihuu/libtree Fast and efficient implementation of Splay trees]\n* [https://github.com/cpdomina/SplayTree Top-Down Splay Tree Java implementation]\n* [https://arxiv.org/abs/1003.0139 Zipper Trees]\n\n{{CS-Trees}}\n{{Data structures}}\n\n{{DEFAULTSORT:Splay Tree}}\n[[Category:Binary trees]]\n[[Category:Search trees]]\n[[Category:Amortized data structures]]\n", "text_old": "{{Use dmy dates|date=July 2012}}\n{{Infobox data structure\n|name=Splay tree\n|type=tree\n|invented_by=[[Daniel Dominic Sleator]] and [[Robert Endre Tarjan]]\n|invented_year=1985\n|space_avg=O(n)\n|space_worst=O(n)\n|search_avg=O(log n)\n|search_worst=amortized O(log n)\n|insert_avg=O(log n)\n|insert_worst=amortized O(log n)\n|delete_avg=O(log n)\n|delete_worst=amortized O(log n)\n}}\n\nA '''splay tree''' is a [[Self-balancing binary search tree|self-balancing binary search tree]] with the additional property that recently accessed elements are quick to access again.  It performs basic operations such as insertion, look-up and removal in [[big O notation|O]](log n) [[amortized analysis|amortized]] time. For many sequences of non-random operations, splay trees perform better than other search trees, even when the specific pattern of the sequence is unknown.  The splay tree was invented by [[Daniel Sleator]] and [[Robert Tarjan]] in 1985.<ref name=\"SleatorTarjan\">{{harvnb|Sleator|Tarjan|1985}}.</ref>\n\nAll normal operations on a binary search tree are combined with one basic operation, called ''splaying''. Splaying the tree for a certain element rearranges the tree so that the element is placed at the root of the tree.  One way to do this with the basic search operation is to first perform a standard binary tree search for the element in question, and then use [[tree rotation]]s in a specific fashion to bring the element to the top. Alternatively, a top-down algorithm can combine the search and the tree reorganization into a single phase.\n\n== Advantages ==\n\nGood performance for a splay tree depends on the fact that it is self-optimizing, in that frequently accessed nodes will move nearer to the root where they can be accessed more quickly. The worst-case height\u2014though unlikely\u2014is O(n), with the average being O(log ''n'').\nHaving frequently-used nodes near the root is an advantage for many practical applications (also see [[Locality of reference]]), and is particularly useful for implementing [[cache (computing)|cache]]s and [[Garbage collection (computer science)|garbage collection]] algorithms.\n\nAdvantages include:\n* Comparable performance: Average-case performance is as efficient as other trees.<ref>{{harvnb|Goodrich|Tamassia|Goldwasser|2014}}.</ref>\n* Small memory footprint: Splay trees do not need to store any bookkeeping data.\n\n== Disadvantages ==\n\nThe most significant disadvantage of splay trees is that the height of a splay tree can be linear.  For example, this will be the case after accessing all ''n'' elements in non-decreasing order.  Since the height of a tree corresponds to the worst-case access time, this means that the actual cost of an operation can be high. However the [[amortized]] access cost of this worst case is logarithmic, O(log ''n'').  Also, the expected access cost can be reduced to O(log ''n'') by using a randomized variant.<ref>{{harvnb|Albers|Karpinski|2002}}.</ref>\n\nThe representation of splay trees can change even when they are accessed in a 'read-only' manner (i.e. by ''find'' operations).  This complicates the use of such splay trees in a multi-threaded environment.  Specifically, extra management is needed if multiple threads are allowed to perform ''find'' operations concurrently. This also makes them unsuitable for general use in purely functional programming, although even there they can be used in limited ways to implement priority queues.\n\n== Operations ==\n\n=== Splaying ===\nWhen a node ''x'' is accessed, a splay operation is performed on ''x'' to move it to the root. To perform a splay operation we carry out a sequence of ''splay steps'', each of which moves ''x'' closer to the root. By performing a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced, so that we achieve the desired amortized time bounds.\n\nEach particular step depends on three factors:\n* Whether ''x'' is the left or right child of its parent node, ''p'',\n* whether ''p'' is the root or not, and if not\n* whether ''p'' is the left or right child of ''its'' parent, ''g'' (the ''grandparent'' of x).\n\nIt is important to remember to set ''gg'' (the ''great-grandparent'' of x) to now point to x after any splay operation. If ''gg'' is null, then x obviously is now the root and must be updated as such.\n\nThere are three types of splay steps, each of which has two symmetric variants: left- and right-handed. For the sake of brevity, only one of these two is shown for each type. These three types are:\n\n'''Zig step:''' this step is done when ''p'' is the root. The tree is rotated on the edge between ''x'' and ''p''.  Zig steps exist to deal with the parity issue and will be done only as the last step in a splay operation and only when ''x'' has odd depth at the beginning of the operation.\n\n[[File:splay tree zig.svg|center]]\n\n'''Zig-zig step:''' this step is done when ''p'' is not the root and ''x'' and ''p'' are either both right children or are both left children. The picture below shows the case where ''x'' and ''p'' are both left children. The tree is rotated on the edge joining ''p'' with ''its'' parent ''g'', then rotated on the edge joining ''x'' with ''p''. Note that zig-zig steps are the only thing that differentiate splay trees from the ''rotate to root'' method introduced by Allen and Munro<ref name=\"AllenMunro\">{{harvnb|Allen|Munro|1978}}.</ref> prior to the introduction of splay trees.\n\n[[Image:Zigzig.gif|center]]\n\n'''Zig-zag step:''' this step is done when ''p'' is not the root and ''x'' is a right child and ''p'' is a left child or vice versa. The tree is rotated on the edge between ''p'' and x, and then rotated on the resulting edge between ''x'' and g.\n\n[[Image:Zigzag.gif|center]]\n\n=== Join ===\nGiven two trees S and T such that all elements of S are smaller than the elements of T, the following steps can be used to join them to a single tree:\n* Splay the largest item in S. Now this item is in the root of S and has a null right child. \n* Set the right child of the new root to T.\n\n=== Split ===\nGiven a tree and an element ''x'', return two new trees: one containing all elements less than or equal to ''x'' and the other containing all elements greater than ''x''. This can be done in the following way:\n* Splay ''x''. Now it is in the root so the tree to its left contains all elements smaller than ''x'' and the tree to its right contains all element larger than ''x''. \n* Split the right subtree from the rest of the tree.\n\n=== Insertion ===\nTo insert a value ''x'' into a splay tree:\n* Insert ''x'' as with a normal [[binary search tree]].\n* when an item is inserted, a splay is performed.\n* As a result, the newly inserted node ''x'' becomes the root of the tree.\n\nAlternatively:\n* Use the split operation to split the tree at the value of ''x'' to two sub-trees: S and T.\n* Create a new tree in which ''x'' is the root, S is its left sub-tree and T its right sub-tree.\n\n=== Deletion ===\nTo delete a node ''x'', use the same method as with a binary search tree:\n\n* If ''x'' has two children:\n** Swap its value with that of either the rightmost node of its left sub tree (its in-order predecessor) or the leftmost node of its right subtree (its in-order successor).\n** Remove that node instead.\n\nIn this way, deletion is reduced to the problem of removing a node with 0 or 1 children. Unlike a binary search tree, in a splay tree after deletion, we splay the parent of the removed node to the top of the tree.\n\nAlternatively:\n\n* The node to be deleted is first splayed, i.e. brought to the root of the tree and then deleted.  leaves the tree with two sub trees. \n* The two sub-trees are then joined using a \"join\" operation.\n\n== Implementation and variants ==\nSplaying, as mentioned above, is performed during a second, bottom-up pass over the access path of a node. It is possible to record the access path during the first pass for use during the second, but that requires extra space during the access operation.  Another alternative is to keep a parent pointer in every node, which avoids the need for extra space during access operations but may reduce overall time efficiency because of the need to update those pointers.<ref name=\"SleatorTarjan\" />\n\nAnother method which can be used is based on the argument that we can restructure the tree on our way down the access path instead of making a second pass. This top-down splaying routine uses three sets of nodes - left tree, right tree and middle tree. The first two contain all items of original tree known to be less than or greater than current item respectively. The middle tree consists of the sub-tree rooted at the current node. These three sets are updated down the access path while keeping the splay operations in check. Another method, semisplaying, modifies the zig-zig case to reduce the amount of restructuring done in all operations.<ref name=\"SleatorTarjan\" /><ref name=\"Lucas\" />\n\nBelow there is an implementation of splay trees in C++, which uses pointers to represent each node on the tree. This implementation is based on bottom-up splaying version and uses the second method of deletion on a splay tree.  Also, unlike the above definition, this C++ version does ''not'' splay the tree on finds - it only splays on insertions and deletions, and the find operation, therefore, has linear time complexity.\n\n<source lang=\"cpp\">\n#include <functional>\n\n#ifndef SPLAY_TREE\n#define SPLAY_TREE\n\ntemplate<typename T, typename Comp = std::less<T>>\nclass splay_tree {\nprivate:\n  Comp comp;\n  unsigned long p_size;\n  \n  struct node {\n    node *left, *right;\n    node *parent;\n    T key;\n    node(const T& init = T()) : left(nullptr), right(nullptr), parent(nullptr), key(init) { }\n    ~node() {\n\n    }\n  } *root;\n  \n  void left_rotate(node *x) {\n    node *y = x->right;\n    if (y) {\n      x->right = y->left;\n      if (y->left) y->left->parent = x;\n      y->parent = x->parent;\n    }\n    \n    if (!x->parent) root = y;\n    else if (x == x->parent->left) x->parent->left = y;\n    else x->parent->right = y;\n    if (y) y->left = x;\n    x->parent = y;\n  }\n  \n  void right_rotate(node *x) {\n    node *y = x->left;\n    if (y) {\n      x->left = y->right;\n      if (y->right) y->right->parent = x;\n      y->parent = x->parent;\n    }\n    if (!x->parent) root = y;\n    else if (x == x->parent->left) x->parent->left = y;\n    else x->parent->right = y;\n    if (y) y->right = x;\n    x->parent = y;\n  }\n  \n  void splay(node *x) {\n    while (x->parent) {\n      if (!x->parent->parent) {\n        if (x->parent->left == x) right_rotate(x->parent);\n        else left_rotate(x->parent);\n      } else if (x->parent->left == x && x->parent->parent->left == x->parent) {\n        right_rotate(x->parent->parent);\n        right_rotate(x->parent);\n      } else if (x->parent->right == x && x->parent->parent->right == x->parent) {\n        left_rotate(x->parent->parent);\n        left_rotate(x->parent);\n      } else if (x->parent->left == x && x->parent->parent->right == x->parent) {\n        right_rotate(x->parent);\n        left_rotate(x->parent);\n      } else {\n        left_rotate(x->parent);\n        right_rotate(x->parent);\n      }\n    }\n  }\n  \n  void replace(node *u, node *v) {\n    if (!u->parent) root = v;\n    else if (u == u->parent->left) u->parent->left = v;\n    else u->parent->right = v;\n    if (v) v->parent = u->parent;\n  }\n  \n  node* subtree_minimum(node *u) {\n    while (u->left) u = u->left;\n    return u;\n  }\n  \n  node* subtree_maximum(node *u) {\n    while (u->right) u = u->right;\n    return u;\n  }\npublic:\n  splay_tree() : root(nullptr), p_size(0) { }\n  \n  void insert(const T &key) {\n    node *z = root;\n    node *p = nullptr;\n    \n    while (z) {\n      p = z;\n      if (comp(z->key, key)) z = z->right;\n      else z = z->left;\n    }\n    \n    z = new node(key);\n    z->parent = p;\n    \n    if (!p) root = z;\n    else if (comp(p->key, z->key)) p->right = z;\n    else p->left = z;\n    \n    splay(z);\n    p_size++;\n  }\n  \n  node* find(const T &key) {\n    node *z = root;\n    while (z) {\n      if (comp(z->key, key)) z = z->right;\n      else if (comp(key, z->key)) z = z->left;\n      else return z;\n    }\n    return nullptr;\n  }\n        \n  void erase(const T &key) {\n    node *z = find(key);\n    if (!z) return;\n    \n    splay(z);\n    \n    if (!z->left) replace(z, z->right);\n    else if (!z->right) replace(z, z->left);\n    else {\n      node *y = subtree_minimum(z->right);\n      if (y->parent != z) {\n        replace(y, y->right);\n        y->right = z->right;\n        y->right->parent = y;\n      }\n      replace(z, y);\n      y->left = z->left;\n      y->left->parent = y;\n    }\n    \n    delete z;\n    p_size--;\n  }\n\n/* //the alternative implementation\n    void erase(const T &key) {\n        node *z = find(key);\n        if (!z) return;\n        \n        splay(z);\n        \n        node *s = z->left;\n        node *t = z->right;\n        delete z;\n        \n        node *sMax = NULL;\n        if (s) {\n            s->parent = NULL;\n            sMax = subtree_maximum(s);\n            splay(sMax);\n            root = sMax;\n        }\n        if (t) {\n            if (s)\n                sMax->right = t;\n            else\n                root = t;\n            t->parent = sMax;\n        }\n        \n        p_size--;\n    }\n*/\n  \n  const T& minimum() { return subtree_minimum(root)->key; }\n  const T& maximum() { return subtree_maximum(root)->key; }\n  \n  bool empty() const { return root == nullptr; }\n  unsigned long size() const { return p_size; }\n};\n\n#endif // SPLAY_TREE\n</source>\n\n== Analysis ==\nA simple [[amortized analysis]] of static splay trees can be carried out using the [[potential method]]. Define:\n* size(''r'') = the number of nodes in the sub-tree rooted at node ''r'' (including ''r'').\n* rank(''r'') = log<sub>2</sub>(size(''r'')).\n* \u03a6 = the sum of the ranks of all the nodes in the tree.\n\n\u03a6 will tend to be high for poorly balanced trees and low for well-balanced trees.\n\nTo apply the [[potential method]], we first calculate \u0394\u03a6: the change in the potential caused by a splay operation. We check each case separately. Denote by rank\u2032 the rank function after the operation. x, p and g are the nodes affected by the rotation operation (see figures above).\n\n===Zig step===\n:{|\n|-\n| \u0394\u03a6 || = rank\u2032(''p'') \u2212 rank(''p'') + rank\u2032(''x'') \u2212 rank(''x'')&nbsp;&nbsp;\n| [since only p and x change ranks]\n|-\n|    || = rank\u2032(''p'') \u2212 rank(''x'')\n| [since rank\u2032(''x'')=rank(''p'')]\n|-\n|    || \u2264 rank\u2032(''x'') \u2212 rank(''x'')\n| [since rank\u2032(''p'')<rank\u2032(''x'')]\n|}\n===Zig-zig step===\n:{|\n| \u0394\u03a6 ||colspan=2| = rank\u2032(''g'') \u2212 rank(''g'') + rank\u2032(''p'') \u2212 rank(''p'') + rank\u2032(''x'') \u2212 rank(''x'')\n|-\n|    || =  rank\u2032(''g'') + rank\u2032(''p'') \u2212 rank(''p'') \u2212 rank(''x'')&nbsp;&nbsp;\n| [since rank\u2032(x)=rank(g)]\n|-\n|    || \u2264  rank\u2032(''g'') + rank\u2032(''x'') \u2212 2 rank(''x'')\n| [since rank(''x'')<rank(''p'') and rank\u2032(''x'')>rank\u2032(''p'')]\n|-\n|    || \u2264  3(rank\u2032(''x'')\u2212rank(''x'')) \u2212 2\n| [due to the concavity of the log function]\n|}\n\n===Zig-zag step===\n:{|\n| \u0394\u03a6 ||colspan=2| = rank\u2032(''g'') \u2212 rank(''g'') + rank\u2032(''p'') \u2212 rank(''p'') + rank\u2032(''x'') \u2212 rank(''x'')\n|-\n|    || \u2264 rank\u2032(''g'') + rank\u2032(''p'') \u2212 2 rank(''x'')&nbsp;&nbsp;\n| [since rank\u2032(''x'')=rank(''g'') and rank(''x'')<rank(''p'')]\n|-\n|    || \u2264 3(rank\u2032(''x'')\u2212rank(''x'')) \u2212 2\n| [due to the concavity of the log function]\n|}\nThe amortized cost of any operation is \u0394\u03a6 plus the actual cost. The actual cost of any zig-zig or zig-zag operation is 2 since there are two rotations to make. Hence:\n\n:{|\n| amortized-cost || = cost + \u0394\u03a6\n|-\n|                || \u2264 3(rank\u2032(''x'')\u2212rank(''x''))\n|}\n\nWhen summed over the entire splay operation, this [[telescoping series|telescopes]] to 3(rank(root)\u2212rank(''x'')) which is O(log ''n'').  The Zig operation adds an amortized cost of 1, but there's at most one such operation.\n\nSo now we know that the total ''amortized'' time for a sequence of ''m'' operations is:\n:<math>T_\\mathrm{amortized}(m) = O(m \\log n)</math>\n\nTo go from the amortized time to the actual time, we must add the decrease in potential from the initial state before any operation is done (\u03a6<sub>''i''</sub>) to the final state after all operations are completed (\u03a6<sub>''f''</sub>).\n\n:<math>\\Phi_i - \\Phi_f = \\sum_x{\\mathrm{rank}_i(x) - \\mathrm{rank}_f(x)} = O(n \\log n)</math>\n\nwhere the last inequality comes from the fact that for every node ''x'', the minimum rank is 0 and the maximum rank is log(''n'').\n\nNow we can finally bound the actual time:\n\n:<math>T_\\mathrm{actual}(m) = O(m \\log n + n \\log n)</math>\n\n=== Weighted analysis ===\nThe above analysis can be generalized in the following way.\n* Assign to each node ''r'' a weight ''w''(''r'').\n* Define size(''r'') = the sum of weights of nodes in the sub-tree rooted at node ''r'' (including ''r'').\n* Define rank(''r'') and \u03a6 exactly as above.\n\nThe same analysis applies and the amortized cost of a splaying operation is again:\n:<math>\\mathrm{rank}(root)-\\mathrm{rank}(x) = O(\\log{W}- \\log{w(x)}) = O\\left(\\log{\\frac{W}{w(x)}}\\right)</math>\nwhere ''W'' is the sum of all weights.\n\nThe decrease from the initial to the final potential is bounded by:\n:<math>\\Phi_i - \\Phi_f \\leq \\sum_{x\\in tree}{\\log{\\frac{W}{w(x)}}}</math>\nsince the maximum size of any single node is ''W'' and the minimum is ''w(x)''.\n\nHence the actual time is bounded by:\n:<math>O\\left(\\sum_{x \\in sequence}{\\log{\\frac{W}{w(x)}}} + \\sum_{x \\in tree}{\\log{\\frac{W}{w(x)}}}\\right)</math>\n\n== Performance theorems ==\n\nThere are several theorems and conjectures regarding the worst-case runtime for performing a sequence ''S'' of ''m'' accesses in a splay tree containing ''n'' elements.\n\n{{Math theorem|Balance Theorem|The cost of performing the sequence ''S'' is <math>O\\left[m \\log n + n\\log n\\right]</math>.\n  {{Math proof|Take a constant weight, e.g. {{tmath|1=w(x)=1}} for every node ''x''. Then {{tmath|1=W=n}}.}} \nThis theorem implies that splay trees perform as well as static balanced binary search trees on sequences of at least ''n'' accesses.<ref name=\"SleatorTarjan\" />}}\n\n{{Math theorem|Static Optimality Theorem|Let <math>q_x</math> be the number of times element ''x'' is accessed in ''S''. If every element is accessed at least once, then the cost of performing ''S'' is <math>O\\left[m + \\sum_{x\\in tree} q_x\\log\\frac{m}{q_x}\\right]</math> \n  {{Math proof|Let <math>w(x)=q_x</math>. Then <math>W=m</math>.}} \nThis theorem implies that splay trees perform as well as an optimum static binary search tree on sequences of at least ''n'' accesses. They spend less time on the more frequent items.<ref name=\"SleatorTarjan\" />}}\n\n{{Math theorem|Static Finger Theorem|Assume that the items are numbered from 1 through ''n'' in ascending order. Let ''f'' be any fixed element (the 'finger'). Then the cost of performing ''S'' is <math>O\\left[m + n\\log n + \\sum_{x\\in sequence} \\log(|x-f| + 1)\\right]</math>.\n  {{Math proof|Let <math>w(x)=1/(|x-f|+1)^2</math>. Then {{tmath|1=W=O(1)}}. The net potential drop is ''O'' (''n'' log ''n'') since the weight of any item is at least {{tmath|1=1/n^2}}.<ref name=\"SleatorTarjan\" />}} }}\n\n{{Math theorem|Dynamic Finger Theorem|Assume that the 'finger' for each step accessing an element ''y'' is the element accessed in the previous step, ''x''. The cost of performing ''S'' is <math>O\\left[m + n + \\sum_{x,y\\in sequence}^m \\log(|y-x| + 1)\\right]</math>.<ref name=\"ColeEtAl\">{{harvnb|Cole|Mishra|Schmidt|Siegel|2000}}.</ref><ref name=\"Cole\">{{harvnb|Cole|2000}}.</ref>}}\n\n{{Math theorem|Working Set Theorem|At any time during the sequence, let <math>t(x)</math> be the number of distinct elements accessed before the previous time element x was accessed.  The cost of performing ''S'' is <math>O\\left[m + n\\log n + \\sum_{x\\in sequence} \\log(t(x) + 1)\\right]</math> \n  {{Math proof|Let <math>w(x)=1/(t(x)+1)^2</math>. Note that here the weights change during the sequence. However, the sequence of weights is still a permutation of {{tmath|1=1, \\tfrac 1 4, \\tfrac 1 9, \\cdots, \\tfrac 1 {n^2} }}. So as before {{tmath|1=W=O(1)}}. The net potential drop is ''O'' (''n'' log ''n'').}} \nThis theorem is equivalent to splay trees having [[key-independent optimality]].<ref name=\"SleatorTarjan\" />}}\n\n{{Math theorem|Scanning Theorem|Also known as the '''Sequential Access Theorem''' or the '''Queue theorem'''.  Accessing the ''n'' elements of a splay tree in symmetric order takes ''O''(''n'') time, regardless of the initial structure of the splay tree.<ref name=\"Tarjan\">{{harvnb|Tarjan|1985}}.</ref> The tightest upper bound proven so far is <math>4.5n</math>.<ref name=\"Elmasry\">{{harvnb|Elmasry|2004}}.</ref>}}\n\n== Dynamic optimality conjecture ==\n\n{{Main article|Optimal binary search tree}}\n{{unsolved|computer science|Do splay trees perform as well as any other binary search tree algorithm?}}\nIn addition to the proven performance guarantees for splay trees there is an unproven conjecture of great interest from the original Sleator and Tarjan paper.  This conjecture is known as the ''dynamic optimality conjecture'' and it basically claims that splay trees perform as well as any other binary search tree algorithm up to a constant factor.\n\n:'''Dynamic Optimality Conjecture:<ref name=\"SleatorTarjan\" />''' Let <math>A</math> be any binary search tree algorithm that accesses an element <math>x</math> by traversing the path from the root to <math>x</math> at a cost of <math>d(x)+1</math>, and that between accesses can make any rotations in the tree at a cost of 1 per rotation.  Let <math>A(S)</math> be the cost for <math>A</math> to perform the sequence <math>S</math> of accesses.  Then the cost for a splay tree to perform the same accesses is <math>O[n + A(S)]</math>.\n\nThere are several corollaries of the dynamic optimality conjecture that remain unproven:\n\n:'''Traversal Conjecture:<ref name=\"SleatorTarjan\" />''' Let <math>T_1</math> and <math>T_2</math> be two splay trees containing the same elements.  Let <math>S</math> be the sequence obtained by visiting the elements in <math>T_2</math> in preorder (i.e., depth first search order).  The total cost of performing the sequence <math>S</math> of accesses on <math>T_1</math> is <math>O(n)</math>.\n\n:'''Deque Conjecture:<ref name=\"Tarjan\" /><ref name=\"Pettie\">{{harvnb|Pettie|2008}}.</ref><ref name=\"Sundar\">{{harvnb|Sundar|1992}}.</ref>''' Let <math>S</math> be a sequence of <math>m</math> [[double-ended queue]] operations (push, pop, inject, eject).  Then the cost of performing <math>S</math> on a splay tree is <math>O(m + n)</math>.\n\n:'''Split Conjecture:<ref name=\"Lucas\">{{harvnb|Lucas|1991}}.</ref>''' Let <math>S</math> be any permutation of the elements of the splay tree.  Then the cost of deleting the elements in the order <math>S</math> is <math>O(n)</math>.\n\n== Variants ==\n\nIn order to reduce the number of restructuring operations, it is possible to replace the splaying with ''semi-splaying'', in which an element is splayed only halfway towards the root.<ref name=\"SleatorTarjan\"/><ref name=BrinkmannDegraerDeLoof>{{harvnb|Brinkmann|Degraer|De Loof|2009}}.</ref>\n\nAnother way to reduce restructuring is to do full splaying, but only in some of the access operations - only when the access path is longer than a threshold, or only in the first ''m'' access operations.<ref name=\"SleatorTarjan\"/>\n\n== See also ==\n\n* [[Finger tree]]\n* [[Link/cut tree]]\n* [[Scapegoat tree]]\n* [[Zipper (data structure)]]\n* [[tree data structure|Trees]]\n* [[Tree rotation]]\n* [[AVL tree]]\n* [[B-tree]]\n* [[T-tree]]\n* [[List of data structures]]\n* [[Iacono's working set structure]]\n* [[Geometry of binary search trees]]\n* [[Splaysort]], a sorting algorithm using splay trees\n* [[Treap]]\n\n== Notes ==\n\n{{Reflist}}\n\n== References ==\n\n*{{cite journal\n | first1 = Susanne\n | last1 = Albers\n | first2 = Marek\n | last2 = Karpinski\n | title = Randomized Splay Trees: Theoretical and Experimental Results\n | journal = [[Information Processing Letters]]\n | volume = 81\n | issue = 4\n | pages = 213\u2013221\n | date = 28 February 2002\n | url = http://www14.in.tum.de/personen/albers/papers/ipl02.pdf\n | ref = harv\n | doi=10.1016/s0020-0190(01)00230-7\n}}\n\n*{{cite journal\n | first1 = Brian\n | last1 = Allen\n | first2 = Ian\n | last2 = Munro\n | title = Self-organizing search trees\n | journal = [[Journal of the ACM]]\n | volume = 25\n | pages = 526\u2013535\n | date = October 1978\n | issue = 4\n | doi = 10.1145/322092.322094\n | ref = harv\n}}\n\n*{{cite journal\n | last1 = Brinkmann | first1 = Gunnar\n | last2 = Degraer | first2 = Jan\n | last3 = De Loof | first3 = Karel\n | title = Rehabilitation of an unloved child: semi-splaying\n | journal = Software\u2014Practice and Experience\n | volume = 39 | issue = 1 | pages = 33\u201345\n | date = January 2009\n | doi = 10.1002/spe.v39:1\n | citeseerx = 10.1.1.84.790\n | ref = harv\n | url = http://caagt.ugent.be/preprints/splay_spe.pdf\n | quote = The results show that semi-splaying, which was introduced in the same paper as splaying, performs better than splaying under almost all possible conditions. This makes semi-splaying a good alternative for all applications where normally splaying would be applied. The reason why splaying became so prominent while semi-splaying is relatively unknown and much less studied is hard to understand.\n}}\n\n*{{cite journal\n | first1 = Richard\n | last1 = Cole\n | first2 = Bud\n | last2 = Mishra\n | first3 = Jeanette\n | last3 = Schmidt\n | first4 = Alan\n | last4 = Siegel\n | title = On the Dynamic Finger Conjecture for Splay Trees. Part I: Splay Sorting log n-Block Sequences\n | journal = [[SIAM Journal on Computing]]\n | volume = 30 | issue = 1\n | pages = 1\u201343\n | date = January 2000\n | doi = 10.1137/s0097539797326988\n | ref = harv\n| citeseerx = 10.1.1.36.4558\n }}\n\n*{{cite journal\n | first = Richard\n | last = Cole\n | title = On the Dynamic Finger Conjecture for Splay Trees. Part II: The Proof\n | journal = [[SIAM Journal on Computing]]\n | volume = 30 | issue = 1\n | pages = 44\u201385\n | date = January 2000\n | doi = 10.1137/S009753979732699X\n | ref = harv\n| citeseerx = 10.1.1.36.2713\n }}\n\n*{{Citation\n | first = Amr\n | last = Elmasry\n | title = On the sequential access theorem and Deque conjecture for splay trees\n | journal = Theoretical Computer Science\n | volume = 314\n | issue = 3\n | pages = 459\u2013466\n | date = April 2004\n | doi = 10.1016/j.tcs.2004.01.019\n | ref = harv\n | url = https://www.researchgate.net/profile/Amr_Elmasry2/publication/220150614_On_the_sequential_access_theorem_and_deque_conjecture_for_splay_trees/links/0c96052a84e4fe1eba000000.pdf?disableCoverPage=true\n}}\n\n*{{cite book\n | first1 = Michael\n | last1 = Goodrich\n | first2 = Roberto\n | last2 = Tamassia\n | first3 = Michael\n | last3 = Goldwasser\n | title = Data Structures and Algorithms in Java\n | publisher = Wiley\n | page = 506\n | edition = 6\n | year = 2014\n | isbn = 978-1-118-77133-4\n | language = en\n | ref = harv\n}}\n\n*{{cite book\n | first = Donald\n | last = Knuth\n | author-link = Donald Knuth\n | title = [[The Art of Computer Programming]]''\n | volume = 3: Sorting and Searching\n | edition = 3rd\n | publisher = Addison-Wesley\n | year = 1997\n | isbn = 0-201-89685-0\n | page = 478  <!-- section 6.2.3 -->\n | ref = harv\n}}\n\n*{{cite book\n | first = Joan M.\n | last = Lucas\n | contribution = On the Competitiveness of Splay Trees: Relations to the Union-Find Problem\n | title = On-line Algorithms: Proceedings of a DIMACS Workshop, February 11\u201313, 1991\n | publisher = [[DIMACS|Center for Discrete Mathematics and Theoretical Computer Science]]\n | series = Series in Discrete Mathematics and Theoretical Computer Science\n | volume = 7\n | pages = 95\u2013124\n | date = 1991\n | ref = harv\n | isbn = 0-8218-7111-0\n}}\n\n*{{citation\n | first = Seth\n | last = Pettie\n | title = Splay Trees, Davenport-Schinzel Sequences, and the Deque Conjecture\n | journal = Proc. 19th ACM-SIAM Symposium on Discrete Algorithms\n | pages = 1115\u20131124\n | year = 2008\n | bibcode = 2007arXiv0707.2160P\n | volume = 0707\n | arxiv = 0707.2160\n | ref = harv\n | url = http://web.eecs.umich.edu/~pettie/papers/Deque.pdf\n}}\n\n*{{cite journal\n | first1 = Daniel D.\n | last1 = Sleator\n | author1-link = Daniel Sleator\n | first2 = Robert E.\n | last2 = Tarjan\n | author2-link = Robert Tarjan\n | title = Self-Adjusting Binary Search Trees\n | journal = [[Journal of the ACM]]\n | volume = 32\n | issue = 3\n | pages = 652\u2013686\n | year = 1985\n | url = https://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf\n | doi = 10.1145/3828.3835\n | ref = harv\n}}\n\n*{{cite journal\n | first = Rajamani\n | last = Sundar\n | title = On the Deque conjecture for the splay algorithm\n | journal = Combinatorica\n | volume = 12\n | pages = 95\u2013124\n | year = 1992\n | issue = 1\n | doi = 10.1007/BF01191208\n | ref = harv\n}}\n\n*{{cite journal\n | first = Robert E.\n | last = Tarjan\n | author-link = Robert Tarjan\n | title = Sequential access in splay trees takes linear time\n | journal = Combinatorica\n | volume = 5\n | issue = 4\n | pages = 367\u2013378\n | year = 1985\n | doi = 10.1007/BF02579253\n | ref = harv\n}}\n\n== External links ==\n\n* [https://xlinux.nist.gov/dads/HTML/splaytree.html NIST's Dictionary of Algorithms and Data Structures: Splay Tree]\n* [http://www.link.cs.cmu.edu/link/ftp-site/splaying/ Implementations in C and Java (by Daniel Sleator)]\n* [http://wiki.algoviz.org/search/node/splay Pointers to splay tree visualizations] \n* [https://github.com/fbuihuu/libtree Fast and efficient implementation of Splay trees]\n* [https://github.com/cpdomina/SplayTree Top-Down Splay Tree Java implementation]\n* [https://arxiv.org/abs/1003.0139 Zipper Trees]\n\n{{CS-Trees}}\n{{Data structures}}\n\n{{DEFAULTSORT:Splay Tree}}\n[[Category:Binary trees]]\n[[Category:Search trees]]\n[[Category:Amortized data structures]]\n", "name_user": "NegNoggin", "label": "safe", "comment": "\u2192\u200eSplaying:Added clarification of symbols used in algorithm description diagrams.", "url_page": "//en.wikipedia.org/wiki/Splay_tree"}
